package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"sort"

	"github.com/vinceanalytics/vince/internal/must"
	"github.com/vinceanalytics/vince/internal/tools"
	"github.com/vinceanalytics/vince/internal/ua/gen/bot"
	"github.com/vinceanalytics/vince/internal/ua/gen/client"
	"github.com/vinceanalytics/vince/internal/ua/gen/device"
	uos "github.com/vinceanalytics/vince/internal/ua/gen/os"
	"github.com/vinceanalytics/vince/internal/ua/gen/vendorfragment"
	"gopkg.in/yaml.v2"
)

const (
	repo = "git@github.com:matomo-org/device-detector.git"
	dir  = "device-detector"
)

func main() {
	root := tools.RootVince()
	tools.EnsureRepo(
		filepath.Join(root, "internal", "ua"),
		repo, dir,
	)
	rootRegex := filepath.Join(root, "internal", "ua", dir, "regexes")
	bot.Make(rootRegex)
	client.Make(rootRegex)
	device.Make(rootRegex)
	uos.Make(rootRegex)
	vendorfragment.Make(rootRegex)
	makeAgents(root)
}

func makeAgents(root string) {
	rootFixture := filepath.Join(root, "internal", "ua", dir, "Tests", "fixtures")
	o, err := os.ReadDir(rootFixture)
	if err != nil {
		tools.Exit(err.Error())
	}
	var agents []*UA
	for _, f := range o {
		if f.Name() == "bots.yml" {
			continue
		}
		println(f.Name())
		a := readUA(rootFixture, f.Name())
		n := min(3, len(a))
		agents = append(agents, a[:n]...)
	}
	sort.Slice(agents, func(i, j int) bool {
		return agents[i].UA < agents[j].UA
	})
	var buf bytes.Buffer
	fmt.Fprintln(&buf, "// DO NOT EDIT Code generated by ua/gen/main.go")
	fmt.Fprintln(&buf, " package ua")

	fmt.Fprintln(&buf, "var AGENTS =[]string{")
	for _, i := range agents {
		fmt.Fprintf(&buf, "%q,\n", i.UA)
	}
	fmt.Fprintln(&buf, "}")
	f := must.Must(format.Source(buf.Bytes()))("failed formatting")
	tools.WriteFile("bench_agents.go", f)
}

type UA struct {
	UA string `yaml:"user_agent" json:"regex"`
}

func readUA(root, name string) (out []*UA) {
	path := filepath.Join(root, name)
	f, err := os.ReadFile(path)
	if err != nil {
		tools.Exit("failed to read ua file ", path)
	}
	err = yaml.Unmarshal(f, &out)
	if err != nil {
		tools.Exit("failed to  decode ", path, err.Error())
	}
	return
}
