package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"go/format"
	"io"
	"log"
	"net/http"
	"net/http/httputil"
	"os"
	"sort"
	"time"

	"github.com/oschwald/maxminddb-golang"
	"github.com/vinceanalytics/vince/internal/geoip"
	"github.com/vinceanalytics/vince/internal/must"
	"github.com/vinceanalytics/vince/internal/tools"
)

const dateFormat = "2006-01-02T15:04:05-0700"
const urlFmt = "https://download.db-ip.com/free/dbip-city-lite-%s.mmdb.gz"

func main() {
	if os.Getenv("IP") == "true" {
		benchIP()
		return
	}
	if os.Getenv("DOWNLOAD") != "true" {
		return
	}
	now := time.Now()
	thisMoth := now.Format(dateFormat)[0:7]
	lastMonth := time.Date(
		now.Year(), now.Month()-1,
		0, 0, 0, 0, 0, now.Location(),
	).Format(dateFormat)[0:7]
	var b bytes.Buffer
	fmt.Fprintf(&b, urlFmt, thisMoth)
	thisMonthURL := b.String()
	b.Reset()
	fmt.Fprintf(&b, urlFmt, lastMonth)
	lastMonthURL := b.String()
	println(thisMonthURL)
	println(lastMonthURL)

	res, err := http.Get(thisMonthURL)
	if err != nil {
		log.Fatal(err)
	}
	if res.StatusCode == http.StatusNotFound {
		res.Body.Close()
		log.Printf(" Got 404 for %s ,trying %s", thisMonthURL, lastMonthURL)
		res, err = http.Get(lastMonthURL)
		if err != nil {
			log.Fatal(err)
		}
	}
	defer res.Body.Close()
	if res.StatusCode == http.StatusOK {
		f, err := os.Create("city.mmdb")
		if err != nil {
			log.Fatal(err)
		}
		f.ReadFrom(res.Body)
		f.Close()
	} else {
		b, _ := httputil.DumpResponse(res, true)
		log.Fatalf("Unable to download and save the database \n %s", string(b))
	}
}

func benchIP() {
	ps := map[string]struct{}{}

	g := must.Must(gzip.NewReader(bytes.NewReader(geoip.CityData)))(
		"failed to read embedded mmdb data file gzip data expected ",
	)
	b := must.Must(io.ReadAll(g))("failed reading compressed mmdb")
	r := must.Must(maxminddb.FromBytes(b))(
		"failed opening mmdb",
	)
	n := r.Networks(maxminddb.SkipAliasedNetworks)
	for n.Next() && len(ps) < 10 {
		var v interface{}
		ip, err := n.Network(&v)
		if err != nil {
			log.Fatal(err)
		}
		ps[ip.IP.String()] = struct{}{}
	}
	var ls []string
	for k := range ps {
		ls = append(ls, k)
	}
	sort.Strings(ls)
	var buf bytes.Buffer

	fmt.Fprintln(&buf, "// DO NOT EDIT Code generated by geoip/gen/main.go")
	fmt.Fprintln(&buf, " package geoip")

	fmt.Fprintln(&buf, "var IP =[]string{")
	for _, i := range ls {
		fmt.Fprintf(&buf, "%q,", i)
	}
	fmt.Fprintln(&buf, "}")
	f := must.Must(format.Source(buf.Bytes()))("failed formatting")
	tools.WriteFile("bench_ip.go", f)
}
