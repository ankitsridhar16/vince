/*
Licensed under the GNU AFFERO GENERAL PUBLIC LICENSE Version 3
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "github.com/gernest/vince/pkg/apis/site/v1alpha1"
	sitev1alpha1 "github.com/gernest/vince/pkg/gen/client/site/applyconfiguration/site/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSites implements SiteInterface
type FakeSites struct {
	Fake *FakeVinceV1alpha1
	ns   string
}

var sitesResource = v1alpha1.SchemeGroupVersion.WithResource("sites")

var sitesKind = v1alpha1.SchemeGroupVersion.WithKind("Site")

// Get takes name of the site, and returns the corresponding site object, and an error if there is any.
func (c *FakeSites) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.Site, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(sitesResource, c.ns, name), &v1alpha1.Site{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Site), err
}

// List takes label and field selectors, and returns the list of Sites that match those selectors.
func (c *FakeSites) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.SiteList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(sitesResource, sitesKind, c.ns, opts), &v1alpha1.SiteList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.SiteList{ListMeta: obj.(*v1alpha1.SiteList).ListMeta}
	for _, item := range obj.(*v1alpha1.SiteList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested sites.
func (c *FakeSites) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(sitesResource, c.ns, opts))

}

// Create takes the representation of a site and creates it.  Returns the server's representation of the site, and an error, if there is any.
func (c *FakeSites) Create(ctx context.Context, site *v1alpha1.Site, opts v1.CreateOptions) (result *v1alpha1.Site, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(sitesResource, c.ns, site), &v1alpha1.Site{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Site), err
}

// Update takes the representation of a site and updates it. Returns the server's representation of the site, and an error, if there is any.
func (c *FakeSites) Update(ctx context.Context, site *v1alpha1.Site, opts v1.UpdateOptions) (result *v1alpha1.Site, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(sitesResource, c.ns, site), &v1alpha1.Site{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Site), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSites) UpdateStatus(ctx context.Context, site *v1alpha1.Site, opts v1.UpdateOptions) (*v1alpha1.Site, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(sitesResource, "status", c.ns, site), &v1alpha1.Site{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Site), err
}

// Delete takes name of the site and deletes it. Returns an error if one occurs.
func (c *FakeSites) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(sitesResource, c.ns, name, opts), &v1alpha1.Site{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSites) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(sitesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.SiteList{})
	return err
}

// Patch applies the patch and returns the patched site.
func (c *FakeSites) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Site, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(sitesResource, c.ns, name, pt, data, subresources...), &v1alpha1.Site{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Site), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied site.
func (c *FakeSites) Apply(ctx context.Context, site *sitev1alpha1.SiteApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.Site, err error) {
	if site == nil {
		return nil, fmt.Errorf("site provided to Apply must not be nil")
	}
	data, err := json.Marshal(site)
	if err != nil {
		return nil, err
	}
	name := site.Name
	if name == nil {
		return nil, fmt.Errorf("site.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(sitesResource, c.ns, *name, types.ApplyPatchType, data), &v1alpha1.Site{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Site), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeSites) ApplyStatus(ctx context.Context, site *sitev1alpha1.SiteApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.Site, err error) {
	if site == nil {
		return nil, fmt.Errorf("site provided to Apply must not be nil")
	}
	data, err := json.Marshal(site)
	if err != nil {
		return nil, err
	}
	name := site.Name
	if name == nil {
		return nil, fmt.Errorf("site.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(sitesResource, c.ns, *name, types.ApplyPatchType, data, "status"), &v1alpha1.Site{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Site), err
}
