/*
Licensed under the GNU AFFERO GENERAL PUBLIC LICENSE Version 3
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// VinceSpecApplyConfiguration represents an declarative configuration of the VinceSpec type for use
// with apply.
type VinceSpecApplyConfiguration struct {
	Volume        *v1.PersistentVolumeClaimSpec `json:"volume,omitempty"`
	VolumeSubPath *string                       `json:"volume_subpath,omitempty"`
	Container     *v1.Container                 `json:"container,omitempty"`
}

// VinceSpecApplyConfiguration constructs an declarative configuration of the VinceSpec type for use with
// apply.
func VinceSpec() *VinceSpecApplyConfiguration {
	return &VinceSpecApplyConfiguration{}
}

// WithVolume sets the Volume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Volume field is set to the value of the last call.
func (b *VinceSpecApplyConfiguration) WithVolume(value v1.PersistentVolumeClaimSpec) *VinceSpecApplyConfiguration {
	b.Volume = &value
	return b
}

// WithVolumeSubPath sets the VolumeSubPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeSubPath field is set to the value of the last call.
func (b *VinceSpecApplyConfiguration) WithVolumeSubPath(value string) *VinceSpecApplyConfiguration {
	b.VolumeSubPath = &value
	return b
}

// WithContainer sets the Container field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Container field is set to the value of the last call.
func (b *VinceSpecApplyConfiguration) WithContainer(value v1.Container) *VinceSpecApplyConfiguration {
	b.Container = &value
	return b
}
