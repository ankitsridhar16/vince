// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: event.proto

package timeseries

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Entries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Entry `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *Entries) Reset() {
	*x = Entries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entries) ProtoMessage() {}

func (x *Entries) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entries.ProtoReflect.Descriptor instead.
func (*Entries) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *Entries) GetEvents() []*Entry {
	if x != nil {
		return x.Events
	}
	return nil
}

type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp              int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Name                   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Domain                 string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	UserId                 uint64 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId              uint64 `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Hostname               string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Pathname               string `protobuf:"bytes,7,opt,name=pathname,proto3" json:"pathname,omitempty"`
	Referrer               string `protobuf:"bytes,8,opt,name=referrer,proto3" json:"referrer,omitempty"`
	ReferrerSource         string `protobuf:"bytes,9,opt,name=referrer_source,json=referrerSource,proto3" json:"referrer_source,omitempty"`
	CountryCode            string `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	ScreenSize             string `protobuf:"bytes,11,opt,name=screen_size,json=screenSize,proto3" json:"screen_size,omitempty"`
	OperatingSystem        string `protobuf:"bytes,12,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	Browser                string `protobuf:"bytes,13,opt,name=browser,proto3" json:"browser,omitempty"`
	UtmMedium              string `protobuf:"bytes,14,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty"`
	UtmSource              string `protobuf:"bytes,15,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	UtmCampaign            string `protobuf:"bytes,16,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty"`
	BrowserVersion         string `protobuf:"bytes,17,opt,name=browser_version,json=browserVersion,proto3" json:"browser_version,omitempty"`
	OperatingSystemVersion string `protobuf:"bytes,18,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	UtmContent             string `protobuf:"bytes,19,opt,name=utm_content,json=utmContent,proto3" json:"utm_content,omitempty"`
	UtmTerm                string `protobuf:"bytes,20,opt,name=utm_term,json=utmTerm,proto3" json:"utm_term,omitempty"`
	TransferredFrom        string `protobuf:"bytes,21,opt,name=transferred_from,json=transferredFrom,proto3" json:"transferred_from,omitempty"`
	EntryPage              string `protobuf:"bytes,22,opt,name=entry_page,json=entryPage,proto3" json:"entry_page,omitempty"`
	ExitPage               string `protobuf:"bytes,23,opt,name=exit_page,json=exitPage,proto3" json:"exit_page,omitempty"`
	CityGeoNameId          string `protobuf:"bytes,24,opt,name=city_geo_name_id,json=cityGeoNameId,proto3" json:"city_geo_name_id,omitempty"`
	PageViews              uint64 `protobuf:"varint,25,opt,name=page_views,json=pageViews,proto3" json:"page_views,omitempty"`
	Events                 uint64 `protobuf:"varint,26,opt,name=events,proto3" json:"events,omitempty"`
	Sign                   int32  `protobuf:"varint,27,opt,name=sign,proto3" json:"sign,omitempty"`
	IsBounce               bool   `protobuf:"varint,28,opt,name=is_bounce,json=isBounce,proto3" json:"is_bounce,omitempty"`
	Duration               int64  `protobuf:"varint,29,opt,name=duration,proto3" json:"duration,omitempty"`
	Start                  int64  `protobuf:"varint,30,opt,name=start,proto3" json:"start,omitempty"`
	Region                 string `protobuf:"bytes,31,opt,name=region,proto3" json:"region,omitempty"`
	IsSession              bool   `protobuf:"varint,32,opt,name=is_session,json=isSession,proto3" json:"is_session,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *Entry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Entry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Entry) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Entry) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Entry) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Entry) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Entry) GetPathname() string {
	if x != nil {
		return x.Pathname
	}
	return ""
}

func (x *Entry) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *Entry) GetReferrerSource() string {
	if x != nil {
		return x.ReferrerSource
	}
	return ""
}

func (x *Entry) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Entry) GetScreenSize() string {
	if x != nil {
		return x.ScreenSize
	}
	return ""
}

func (x *Entry) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *Entry) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *Entry) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *Entry) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *Entry) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

func (x *Entry) GetBrowserVersion() string {
	if x != nil {
		return x.BrowserVersion
	}
	return ""
}

func (x *Entry) GetOperatingSystemVersion() string {
	if x != nil {
		return x.OperatingSystemVersion
	}
	return ""
}

func (x *Entry) GetUtmContent() string {
	if x != nil {
		return x.UtmContent
	}
	return ""
}

func (x *Entry) GetUtmTerm() string {
	if x != nil {
		return x.UtmTerm
	}
	return ""
}

func (x *Entry) GetTransferredFrom() string {
	if x != nil {
		return x.TransferredFrom
	}
	return ""
}

func (x *Entry) GetEntryPage() string {
	if x != nil {
		return x.EntryPage
	}
	return ""
}

func (x *Entry) GetExitPage() string {
	if x != nil {
		return x.ExitPage
	}
	return ""
}

func (x *Entry) GetCityGeoNameId() string {
	if x != nil {
		return x.CityGeoNameId
	}
	return ""
}

func (x *Entry) GetPageViews() uint64 {
	if x != nil {
		return x.PageViews
	}
	return 0
}

func (x *Entry) GetEvents() uint64 {
	if x != nil {
		return x.Events
	}
	return 0
}

func (x *Entry) GetSign() int32 {
	if x != nil {
		return x.Sign
	}
	return 0
}

func (x *Entry) GetIsBounce() bool {
	if x != nil {
		return x.IsBounce
	}
	return false
}

func (x *Entry) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Entry) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Entry) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Entry) GetIsSession() bool {
	if x != nil {
		return x.IsSession
	}
	return false
}

type EntrySegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   []*Entry `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty"`
	Domain                 []*Entry `protobuf:"bytes,3,rep,name=domain,proto3" json:"domain,omitempty"`
	Hostname               []*Entry `protobuf:"bytes,6,rep,name=hostname,proto3" json:"hostname,omitempty"`
	Pathname               []*Entry `protobuf:"bytes,7,rep,name=pathname,proto3" json:"pathname,omitempty"`
	Referrer               []*Entry `protobuf:"bytes,8,rep,name=referrer,proto3" json:"referrer,omitempty"`
	ReferrerSource         []*Entry `protobuf:"bytes,9,rep,name=referrer_source,json=referrerSource,proto3" json:"referrer_source,omitempty"`
	CountryCode            []*Entry `protobuf:"bytes,10,rep,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	ScreenSize             []*Entry `protobuf:"bytes,11,rep,name=screen_size,json=screenSize,proto3" json:"screen_size,omitempty"`
	OperatingSystem        []*Entry `protobuf:"bytes,12,rep,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	Browser                []*Entry `protobuf:"bytes,13,rep,name=browser,proto3" json:"browser,omitempty"`
	UtmMedium              []*Entry `protobuf:"bytes,14,rep,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty"`
	UtmSource              []*Entry `protobuf:"bytes,15,rep,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	UtmCampaign            []*Entry `protobuf:"bytes,16,rep,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty"`
	BrowserVersion         []*Entry `protobuf:"bytes,17,rep,name=browser_version,json=browserVersion,proto3" json:"browser_version,omitempty"`
	OperatingSystemVersion []*Entry `protobuf:"bytes,18,rep,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	UtmContent             []*Entry `protobuf:"bytes,19,rep,name=utm_content,json=utmContent,proto3" json:"utm_content,omitempty"`
	UtmTerm                []*Entry `protobuf:"bytes,20,rep,name=utm_term,json=utmTerm,proto3" json:"utm_term,omitempty"`
	EntryPage              []*Entry `protobuf:"bytes,22,rep,name=entry_page,json=entryPage,proto3" json:"entry_page,omitempty"`
	ExitPage               []*Entry `protobuf:"bytes,23,rep,name=exit_page,json=exitPage,proto3" json:"exit_page,omitempty"`
	CityGeoNameId          []*Entry `protobuf:"bytes,24,rep,name=city_geo_name_id,json=cityGeoNameId,proto3" json:"city_geo_name_id,omitempty"`
	Region                 []*Entry `protobuf:"bytes,31,rep,name=region,proto3" json:"region,omitempty"`
}

func (x *EntrySegment) Reset() {
	*x = EntrySegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrySegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrySegment) ProtoMessage() {}

func (x *EntrySegment) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrySegment.ProtoReflect.Descriptor instead.
func (*EntrySegment) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *EntrySegment) GetName() []*Entry {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EntrySegment) GetDomain() []*Entry {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *EntrySegment) GetHostname() []*Entry {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *EntrySegment) GetPathname() []*Entry {
	if x != nil {
		return x.Pathname
	}
	return nil
}

func (x *EntrySegment) GetReferrer() []*Entry {
	if x != nil {
		return x.Referrer
	}
	return nil
}

func (x *EntrySegment) GetReferrerSource() []*Entry {
	if x != nil {
		return x.ReferrerSource
	}
	return nil
}

func (x *EntrySegment) GetCountryCode() []*Entry {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

func (x *EntrySegment) GetScreenSize() []*Entry {
	if x != nil {
		return x.ScreenSize
	}
	return nil
}

func (x *EntrySegment) GetOperatingSystem() []*Entry {
	if x != nil {
		return x.OperatingSystem
	}
	return nil
}

func (x *EntrySegment) GetBrowser() []*Entry {
	if x != nil {
		return x.Browser
	}
	return nil
}

func (x *EntrySegment) GetUtmMedium() []*Entry {
	if x != nil {
		return x.UtmMedium
	}
	return nil
}

func (x *EntrySegment) GetUtmSource() []*Entry {
	if x != nil {
		return x.UtmSource
	}
	return nil
}

func (x *EntrySegment) GetUtmCampaign() []*Entry {
	if x != nil {
		return x.UtmCampaign
	}
	return nil
}

func (x *EntrySegment) GetBrowserVersion() []*Entry {
	if x != nil {
		return x.BrowserVersion
	}
	return nil
}

func (x *EntrySegment) GetOperatingSystemVersion() []*Entry {
	if x != nil {
		return x.OperatingSystemVersion
	}
	return nil
}

func (x *EntrySegment) GetUtmContent() []*Entry {
	if x != nil {
		return x.UtmContent
	}
	return nil
}

func (x *EntrySegment) GetUtmTerm() []*Entry {
	if x != nil {
		return x.UtmTerm
	}
	return nil
}

func (x *EntrySegment) GetEntryPage() []*Entry {
	if x != nil {
		return x.EntryPage
	}
	return nil
}

func (x *EntrySegment) GetExitPage() []*Entry {
	if x != nil {
		return x.ExitPage
	}
	return nil
}

func (x *EntrySegment) GetCityGeoNameId() []*Entry {
	if x != nil {
		return x.CityGeoNameId
	}
	return nil
}

func (x *EntrySegment) GetRegion() []*Entry {
	if x != nil {
		return x.Region
	}
	return nil
}

type Aggr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                  *Aggr_Total   `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Name                   *Aggr_Segment `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Domain                 *Aggr_Segment `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Hostname               *Aggr_Segment `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Pathname               *Aggr_Segment `protobuf:"bytes,7,opt,name=pathname,proto3" json:"pathname,omitempty"`
	Referrer               *Aggr_Segment `protobuf:"bytes,8,opt,name=referrer,proto3" json:"referrer,omitempty"`
	ReferrerSource         *Aggr_Segment `protobuf:"bytes,9,opt,name=referrer_source,json=referrerSource,proto3" json:"referrer_source,omitempty"`
	CountryCode            *Aggr_Segment `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	ScreenSize             *Aggr_Segment `protobuf:"bytes,11,opt,name=screen_size,json=screenSize,proto3" json:"screen_size,omitempty"`
	OperatingSystem        *Aggr_Segment `protobuf:"bytes,12,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	Browser                *Aggr_Segment `protobuf:"bytes,13,opt,name=browser,proto3" json:"browser,omitempty"`
	UtmMedium              *Aggr_Segment `protobuf:"bytes,14,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty"`
	UtmSource              *Aggr_Segment `protobuf:"bytes,15,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	UtmCampaign            *Aggr_Segment `protobuf:"bytes,16,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty"`
	BrowserVersion         *Aggr_Segment `protobuf:"bytes,17,opt,name=browser_version,json=browserVersion,proto3" json:"browser_version,omitempty"`
	OperatingSystemVersion *Aggr_Segment `protobuf:"bytes,18,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	UtmContent             *Aggr_Segment `protobuf:"bytes,19,opt,name=utm_content,json=utmContent,proto3" json:"utm_content,omitempty"`
	UtmTerm                *Aggr_Segment `protobuf:"bytes,20,opt,name=utm_term,json=utmTerm,proto3" json:"utm_term,omitempty"`
	EntryPage              *Aggr_Segment `protobuf:"bytes,22,opt,name=entry_page,json=entryPage,proto3" json:"entry_page,omitempty"`
	ExitPage               *Aggr_Segment `protobuf:"bytes,23,opt,name=exit_page,json=exitPage,proto3" json:"exit_page,omitempty"`
	CityGeoNameId          *Aggr_Segment `protobuf:"bytes,24,opt,name=city_geo_name_id,json=cityGeoNameId,proto3" json:"city_geo_name_id,omitempty"`
	Region                 *Aggr_Segment `protobuf:"bytes,31,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *Aggr) Reset() {
	*x = Aggr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggr) ProtoMessage() {}

func (x *Aggr) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggr.ProtoReflect.Descriptor instead.
func (*Aggr) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *Aggr) GetTotal() *Aggr_Total {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Aggr) GetName() *Aggr_Segment {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Aggr) GetDomain() *Aggr_Segment {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *Aggr) GetHostname() *Aggr_Segment {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *Aggr) GetPathname() *Aggr_Segment {
	if x != nil {
		return x.Pathname
	}
	return nil
}

func (x *Aggr) GetReferrer() *Aggr_Segment {
	if x != nil {
		return x.Referrer
	}
	return nil
}

func (x *Aggr) GetReferrerSource() *Aggr_Segment {
	if x != nil {
		return x.ReferrerSource
	}
	return nil
}

func (x *Aggr) GetCountryCode() *Aggr_Segment {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

func (x *Aggr) GetScreenSize() *Aggr_Segment {
	if x != nil {
		return x.ScreenSize
	}
	return nil
}

func (x *Aggr) GetOperatingSystem() *Aggr_Segment {
	if x != nil {
		return x.OperatingSystem
	}
	return nil
}

func (x *Aggr) GetBrowser() *Aggr_Segment {
	if x != nil {
		return x.Browser
	}
	return nil
}

func (x *Aggr) GetUtmMedium() *Aggr_Segment {
	if x != nil {
		return x.UtmMedium
	}
	return nil
}

func (x *Aggr) GetUtmSource() *Aggr_Segment {
	if x != nil {
		return x.UtmSource
	}
	return nil
}

func (x *Aggr) GetUtmCampaign() *Aggr_Segment {
	if x != nil {
		return x.UtmCampaign
	}
	return nil
}

func (x *Aggr) GetBrowserVersion() *Aggr_Segment {
	if x != nil {
		return x.BrowserVersion
	}
	return nil
}

func (x *Aggr) GetOperatingSystemVersion() *Aggr_Segment {
	if x != nil {
		return x.OperatingSystemVersion
	}
	return nil
}

func (x *Aggr) GetUtmContent() *Aggr_Segment {
	if x != nil {
		return x.UtmContent
	}
	return nil
}

func (x *Aggr) GetUtmTerm() *Aggr_Segment {
	if x != nil {
		return x.UtmTerm
	}
	return nil
}

func (x *Aggr) GetEntryPage() *Aggr_Segment {
	if x != nil {
		return x.EntryPage
	}
	return nil
}

func (x *Aggr) GetExitPage() *Aggr_Segment {
	if x != nil {
		return x.ExitPage
	}
	return nil
}

func (x *Aggr) GetCityGeoNameId() *Aggr_Segment {
	if x != nil {
		return x.CityGeoNameId
	}
	return nil
}

func (x *Aggr) GetRegion() *Aggr_Segment {
	if x != nil {
		return x.Region
	}
	return nil
}

type Aggr_Total struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Visitors      uint64  `protobuf:"varint,1,opt,name=visitors,proto3" json:"visitors,omitempty"`
	Visits        uint64  `protobuf:"varint,2,opt,name=visits,proto3" json:"visits,omitempty"`
	ViewsPerVisit float64 `protobuf:"fixed64,3,opt,name=views_per_visit,json=viewsPerVisit,proto3" json:"views_per_visit,omitempty"`
	VisitDuration int64   `protobuf:"varint,4,opt,name=visit_duration,json=visitDuration,proto3" json:"visit_duration,omitempty"`
	BounceRate    uint32  `protobuf:"varint,5,opt,name=bounce_rate,json=bounceRate,proto3" json:"bounce_rate,omitempty"`
	Events        int64   `protobuf:"varint,6,opt,name=events,proto3" json:"events,omitempty"`
}

func (x *Aggr_Total) Reset() {
	*x = Aggr_Total{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggr_Total) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggr_Total) ProtoMessage() {}

func (x *Aggr_Total) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggr_Total.ProtoReflect.Descriptor instead.
func (*Aggr_Total) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Aggr_Total) GetVisitors() uint64 {
	if x != nil {
		return x.Visitors
	}
	return 0
}

func (x *Aggr_Total) GetVisits() uint64 {
	if x != nil {
		return x.Visits
	}
	return 0
}

func (x *Aggr_Total) GetViewsPerVisit() float64 {
	if x != nil {
		return x.ViewsPerVisit
	}
	return 0
}

func (x *Aggr_Total) GetVisitDuration() int64 {
	if x != nil {
		return x.VisitDuration
	}
	return 0
}

func (x *Aggr_Total) GetBounceRate() uint32 {
	if x != nil {
		return x.BounceRate
	}
	return 0
}

func (x *Aggr_Total) GetEvents() int64 {
	if x != nil {
		return x.Events
	}
	return 0
}

type Aggr_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregates map[string]*Aggr_Total `protobuf:"bytes,1,rep,name=aggregates,proto3" json:"aggregates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Aggr_Segment) Reset() {
	*x = Aggr_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggr_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggr_Segment) ProtoMessage() {}

func (x *Aggr_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggr_Segment.ProtoReflect.Descriptor instead.
func (*Aggr_Segment) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Aggr_Segment) GetAggregates() map[string]*Aggr_Total {
	if x != nil {
		return x.Aggregates
	}
	return nil
}

var File_event_proto protoreflect.FileDescriptor

var file_event_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xf0, 0x07, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x74, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x74, 0x6d, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x74, 0x6d, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x78, 0x69, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xcc, 0x08, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75, 0x74,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x3a, 0x0a,
	0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x18, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x75, 0x74, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x74,
	0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x75, 0x74, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x22, 0xf8, 0x0c, 0x0a, 0x04, 0x41, 0x67, 0x67, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x07, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x75, 0x74,
	0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3b, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x41, 0x0a,
	0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x75, 0x74, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x08, 0x75, 0x74, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x75, 0x74, 0x6d,
	0x54, 0x65, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x69, 0x74, 0x79, 0x47, 0x65,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0xc3, 0x01, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x69, 0x73, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x76, 0x69, 0x73, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x73, 0x50, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0xaa, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x25, 0x5a, 0x23,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x72, 0x6e, 0x65,
	0x73, 0x74, 0x2f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData = file_event_proto_rawDesc
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_proto_rawDescData)
	})
	return file_event_proto_rawDescData
}

var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_event_proto_goTypes = []interface{}{
	(*Entries)(nil),      // 0: timeseries.Entries
	(*Entry)(nil),        // 1: timeseries.Entry
	(*EntrySegment)(nil), // 2: timeseries.EntrySegment
	(*Aggr)(nil),         // 3: timeseries.Aggr
	(*Aggr_Total)(nil),   // 4: timeseries.Aggr.Total
	(*Aggr_Segment)(nil), // 5: timeseries.Aggr.Segment
	nil,                  // 6: timeseries.Aggr.Segment.AggregatesEntry
}
var file_event_proto_depIdxs = []int32{
	1,  // 0: timeseries.Entries.events:type_name -> timeseries.Entry
	1,  // 1: timeseries.EntrySegment.name:type_name -> timeseries.Entry
	1,  // 2: timeseries.EntrySegment.domain:type_name -> timeseries.Entry
	1,  // 3: timeseries.EntrySegment.hostname:type_name -> timeseries.Entry
	1,  // 4: timeseries.EntrySegment.pathname:type_name -> timeseries.Entry
	1,  // 5: timeseries.EntrySegment.referrer:type_name -> timeseries.Entry
	1,  // 6: timeseries.EntrySegment.referrer_source:type_name -> timeseries.Entry
	1,  // 7: timeseries.EntrySegment.country_code:type_name -> timeseries.Entry
	1,  // 8: timeseries.EntrySegment.screen_size:type_name -> timeseries.Entry
	1,  // 9: timeseries.EntrySegment.operating_system:type_name -> timeseries.Entry
	1,  // 10: timeseries.EntrySegment.browser:type_name -> timeseries.Entry
	1,  // 11: timeseries.EntrySegment.utm_medium:type_name -> timeseries.Entry
	1,  // 12: timeseries.EntrySegment.utm_source:type_name -> timeseries.Entry
	1,  // 13: timeseries.EntrySegment.utm_campaign:type_name -> timeseries.Entry
	1,  // 14: timeseries.EntrySegment.browser_version:type_name -> timeseries.Entry
	1,  // 15: timeseries.EntrySegment.operating_system_version:type_name -> timeseries.Entry
	1,  // 16: timeseries.EntrySegment.utm_content:type_name -> timeseries.Entry
	1,  // 17: timeseries.EntrySegment.utm_term:type_name -> timeseries.Entry
	1,  // 18: timeseries.EntrySegment.entry_page:type_name -> timeseries.Entry
	1,  // 19: timeseries.EntrySegment.exit_page:type_name -> timeseries.Entry
	1,  // 20: timeseries.EntrySegment.city_geo_name_id:type_name -> timeseries.Entry
	1,  // 21: timeseries.EntrySegment.region:type_name -> timeseries.Entry
	4,  // 22: timeseries.Aggr.total:type_name -> timeseries.Aggr.Total
	5,  // 23: timeseries.Aggr.name:type_name -> timeseries.Aggr.Segment
	5,  // 24: timeseries.Aggr.domain:type_name -> timeseries.Aggr.Segment
	5,  // 25: timeseries.Aggr.hostname:type_name -> timeseries.Aggr.Segment
	5,  // 26: timeseries.Aggr.pathname:type_name -> timeseries.Aggr.Segment
	5,  // 27: timeseries.Aggr.referrer:type_name -> timeseries.Aggr.Segment
	5,  // 28: timeseries.Aggr.referrer_source:type_name -> timeseries.Aggr.Segment
	5,  // 29: timeseries.Aggr.country_code:type_name -> timeseries.Aggr.Segment
	5,  // 30: timeseries.Aggr.screen_size:type_name -> timeseries.Aggr.Segment
	5,  // 31: timeseries.Aggr.operating_system:type_name -> timeseries.Aggr.Segment
	5,  // 32: timeseries.Aggr.browser:type_name -> timeseries.Aggr.Segment
	5,  // 33: timeseries.Aggr.utm_medium:type_name -> timeseries.Aggr.Segment
	5,  // 34: timeseries.Aggr.utm_source:type_name -> timeseries.Aggr.Segment
	5,  // 35: timeseries.Aggr.utm_campaign:type_name -> timeseries.Aggr.Segment
	5,  // 36: timeseries.Aggr.browser_version:type_name -> timeseries.Aggr.Segment
	5,  // 37: timeseries.Aggr.operating_system_version:type_name -> timeseries.Aggr.Segment
	5,  // 38: timeseries.Aggr.utm_content:type_name -> timeseries.Aggr.Segment
	5,  // 39: timeseries.Aggr.utm_term:type_name -> timeseries.Aggr.Segment
	5,  // 40: timeseries.Aggr.entry_page:type_name -> timeseries.Aggr.Segment
	5,  // 41: timeseries.Aggr.exit_page:type_name -> timeseries.Aggr.Segment
	5,  // 42: timeseries.Aggr.city_geo_name_id:type_name -> timeseries.Aggr.Segment
	5,  // 43: timeseries.Aggr.region:type_name -> timeseries.Aggr.Segment
	6,  // 44: timeseries.Aggr.Segment.aggregates:type_name -> timeseries.Aggr.Segment.AggregatesEntry
	4,  // 45: timeseries.Aggr.Segment.AggregatesEntry.value:type_name -> timeseries.Aggr.Total
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrySegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggr_Total); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggr_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_rawDesc = nil
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
