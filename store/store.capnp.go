// Code generated by capnpc-go. DO NOT EDIT.

package store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Calendar capnp.Struct

// Calendar_TypeID is the unique identifier for the type Calendar.
const Calendar_TypeID = 0xf8bd901143c99f61

func NewCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Calendar(st), err
}

func NewRootCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Calendar(st), err
}

func ReadRootCalendar(msg *capnp.Message) (Calendar, error) {
	root, err := msg.Root()
	return Calendar(root.Struct()), err
}

func (s Calendar) String() string {
	str, _ := text.Marshal(0xf8bd901143c99f61, capnp.Struct(s))
	return str
}

func (s Calendar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Calendar) DecodeFromPtr(p capnp.Ptr) Calendar {
	return Calendar(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Calendar) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Calendar) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Calendar) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Calendar) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Calendar) Visitors() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitors() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Calendar) SetVisitors(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVisitors sets the visitors field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitors(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Calendar) Views() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViews() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Calendar) SetViews(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewViews sets the views field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViews(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Calendar) Events() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasEvents() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Calendar) SetEvents(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewEvents(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Calendar) Visits() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisits() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Calendar) SetVisits(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewVisits sets the visits field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisits(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Calendar) BounceRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasBounceRate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Calendar) SetBounceRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewBounceRate sets the bounceRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewBounceRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Calendar) VisitDuration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitDuration() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Calendar) SetVisitDuration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewVisitDuration sets the visitDuration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitDuration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Calendar) ViewsPerVisit() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViewsPerVisit() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Calendar) SetViewsPerVisit(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewViewsPerVisit sets the viewsPerVisit field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViewsPerVisit(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}

// Calendar_List is a list of Calendar.
type Calendar_List = capnp.StructList[Calendar]

// NewCalendar creates a new list of Calendar.
func NewCalendar_List(s *capnp.Segment, sz int32) (Calendar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return capnp.StructList[Calendar](l), err
}

// Calendar_Future is a wrapper for a Calendar promised by a client call.
type Calendar_Future struct{ *capnp.Future }

func (f Calendar_Future) Struct() (Calendar, error) {
	p, err := f.Future.Ptr()
	return Calendar(p.Struct()), err
}

type Sum capnp.Struct

// Sum_TypeID is the unique identifier for the type Sum.
const Sum_TypeID = 0xb5b7b963d0a9b4d4

func NewSum(s *capnp.Segment) (Sum, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 0})
	return Sum(st), err
}

func NewRootSum(s *capnp.Segment) (Sum, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 0})
	return Sum(st), err
}

func ReadRootSum(msg *capnp.Message) (Sum, error) {
	root, err := msg.Root()
	return Sum(root.Struct()), err
}

func (s Sum) String() string {
	str, _ := text.Marshal(0xb5b7b963d0a9b4d4, capnp.Struct(s))
	return str
}

func (s Sum) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Sum) DecodeFromPtr(p capnp.Ptr) Sum {
	return Sum(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Sum) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Sum) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Sum) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Sum) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Sum) Visitors() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Sum) SetVisitors(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Sum) Views() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Sum) SetViews(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Sum) Events() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Sum) SetEvents(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Sum) Visits() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Sum) SetVisits(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Sum) BounceRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Sum) SetBounceRate(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Sum) VisitDuration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Sum) SetVisitDuration(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Sum) ViewsPerVisit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Sum) SetViewsPerVisit(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

// Sum_List is a list of Sum.
type Sum_List = capnp.StructList[Sum]

// NewSum creates a new list of Sum.
func NewSum_List(s *capnp.Segment, sz int32) (Sum_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 56, PointerCount: 0}, sz)
	return capnp.StructList[Sum](l), err
}

// Sum_Future is a wrapper for a Sum promised by a client call.
type Sum_Future struct{ *capnp.Future }

func (f Sum_Future) Struct() (Sum, error) {
	p, err := f.Future.Ptr()
	return Sum(p.Struct()), err
}

const schema_da1eebf4d7c0f83e = "x\xdat\xd0\xbfk\x14A\x18\xc6\xf1\xe7\x99\xd9\xbdU" +
	"\xa2\x81\xc9.h!\x9e\x82\xad?\x12\x1b=D\x85\xd8" +
	"hu\xe3\x8aE\xba\xf5\x9c\xe2@w\x8f\xdd\xbd\xcb_" +
	"!\xb1\xb1\xb0\xb2\xb6\x95\x04\x15\x0c\x9c\xa0\x90\x80\xc2\x09" +
	"\x015\xa4\x11\xd2\xd9(\x188\xab\x95=\xeenoW" +
	"R\xbe\xdf\xf7\x9db>\x97n\xf3\xa6\xb5x\xfc\x84\x80" +
	"\xd0'\xedZ\xb6\xb3\xfer\xd0z\xfbz\x03z\x81N" +
	"v}\xd8\xff\xfa\xe7\xe7\xe9]X\x0e\xa0~\xbfR\x7f" +
	"\x1d`\xf1`\x8d`\x16\xbc\xd8^VO7\x87P\x0b" +
	",\x0em\xc7\x01\xdc'b\xd7}.\x1c\xe0\xf23\xb1" +
	"F\x9c\xcf\x924\x8a\xcd\xc5$e\x14\x9b\x0b\xad\xa0\x13" +
	"\xd6;\x0d\xbf\xfb\xb8I\xeaS\xd2\x02,\x02j\xe3\x0e" +
	"\xa0\xd7%u_P\x91\x1e\xf3\xb8\xb9\x04\xe87\x92\xfa" +
	"\x83\xa0\x12\xc2\xa3\x00\xd4\xfb\x06\xa0\xdfI\xea-A%" +
	"\xa5G\x09\xa8\x8fy\xecK\xeaO\x82\xca\xb2<Z\x80" +
	"\xda^\x01\xf4\x96\xa4\xde\x11T\xb6\xed\xd1\x06\xd4\x97\x18" +
	"\xd0\x03I\xbd'\xa8j5\x8f5@}\xcf\xe37I" +
	"\xbd/\x98\xf5\xdaI;\x8d\xe2\x04\x00\xe7 8\x07\xd6" +
	"{m\xb3\x9aL\xa6\x1b\xa6g\xc2\xb4\x18G\x0f\xa6c" +
	"\xf6 \xea\x86-s7\x80L\xcd4\x8ennuc" +
	"\xd4\x83\xb4\x1d\x853\xdd\xac&M\x13\xa3~?\xbf\x98" +
	"\xf6\x09\x9a\x98\xa0u\x1a\xcb\xc1#\x13>\x94A|\x88" +
	"\xdc`F\xee\xf3\xd2\xf8\xeb\xfb3r?r\xa4=I" +
	"=\x9c\x91;\xc8\xe3/I\xff\x18\x0b:\xf7(W\x00" +
	"\xff\x08%\xfds,\xf4\xdc\xb3\x8c\x01\xffL\xde\xaf\xb1" +
	"\x00t\xaf\x8e\xfa\x95\xbc\xdfc\xc5p\x1elJ\x8e~" +
	"6?\xa5,\xc7\x89h\xa5\x8ea\xcb\xb5\xec[\xd9U" +
	"\x99\xff[\x97\xb5\xcb\xeb\x7f\x01\x00\x00\xff\xff\xc79\xa7" +
	"e"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_da1eebf4d7c0f83e,
		Nodes: []uint64{
			0xb5b7b963d0a9b4d4,
			0xf8bd901143c99f61,
		},
		Compressed: true,
	})
}
