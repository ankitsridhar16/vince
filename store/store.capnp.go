// Code generated by capnpc-go. DO NOT EDIT.

package store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Calendar capnp.Struct

// Calendar_TypeID is the unique identifier for the type Calendar.
const Calendar_TypeID = 0xf8bd901143c99f61

func NewCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return Calendar(st), err
}

func NewRootCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return Calendar(st), err
}

func ReadRootCalendar(msg *capnp.Message) (Calendar, error) {
	root, err := msg.Root()
	return Calendar(root.Struct()), err
}

func (s Calendar) String() string {
	str, _ := text.Marshal(0xf8bd901143c99f61, capnp.Struct(s))
	return str
}

func (s Calendar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Calendar) DecodeFromPtr(p capnp.Ptr) Calendar {
	return Calendar(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Calendar) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Calendar) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Calendar) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Calendar) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Calendar) Timestamps() (capnp.Int64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int64List(p.List()), err
}

func (s Calendar) HasTimestamps() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Calendar) SetTimestamps(v capnp.Int64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTimestamps sets the timestamps field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s Calendar) NewTimestamps(n int32) (capnp.Int64List, error) {
	l, err := capnp.NewInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Calendar) Visitors() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitors() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Calendar) SetVisitors(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVisitors sets the visitors field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitors(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Calendar) Views() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViews() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Calendar) SetViews(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewViews sets the views field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViews(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Calendar) Events() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasEvents() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Calendar) SetEvents(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewEvents(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Calendar) Visits() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisits() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Calendar) SetVisits(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewVisits sets the visits field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisits(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Calendar) BounceRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasBounceRate() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Calendar) SetBounceRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewBounceRate sets the bounceRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewBounceRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Calendar) VisitDuration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitDuration() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Calendar) SetVisitDuration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewVisitDuration sets the visitDuration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitDuration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Calendar) ViewsPerVisit() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViewsPerVisit() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Calendar) SetViewsPerVisit(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewViewsPerVisit sets the viewsPerVisit field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViewsPerVisit(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}

// Calendar_List is a list of Calendar.
type Calendar_List = capnp.StructList[Calendar]

// NewCalendar creates a new list of Calendar.
func NewCalendar_List(s *capnp.Segment, sz int32) (Calendar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8}, sz)
	return capnp.StructList[Calendar](l), err
}

// Calendar_Future is a wrapper for a Calendar promised by a client call.
type Calendar_Future struct{ *capnp.Future }

func (f Calendar_Future) Struct() (Calendar, error) {
	p, err := f.Future.Ptr()
	return Calendar(p.Struct()), err
}

const schema_da1eebf4d7c0f83e = "x\xdad\xcc=O\xdbP\x14\xc6\xf1\xe7\xb9\xd7/\x95" +
	"\xfa\x16\xcb\xb7R\xa7\xa6C\x97Jm\xa5t\x8c\xfa\x12" +
	")\x9d:\xc5\x18\x10\xcaf\xc2\x1d,%\xb6e;\xc9" +
	"W`\xe4\x1b\xb0\xf3\x1d\x10,\x08e@\x82\x09\x89\x85" +
	"\x15\x04#C\x06$\xa3k\xc4\xe2lG\xbf\xff9\xa7" +
	"u\xdd\xb3:o\x8f\x08\x11(\xdb\xa9\xa2\xfdE\xdf\xdb" +
	";\\\xc2{\xc3\xea\xcf\xf2\xf8\xf2\xe1\xee\xd3\x15\xecW" +
	".\xe0\x9d\x1cxg.\xd0Y\x9c\x12\xdf\xab\xa2Ls" +
	"\xfdc\x141K\xb2n?\x1a\xeb\xf7\xc9N\x94\x0f\xc8" +
	"\xe0\xb3\xb4\x00\x8b\x80w1\x04\x82s\xc9\xe0^\xd0#" +
	"\x15\x0d\xde\xfe\x07\x82\x1b\xc9\xd0\xa2\xa0'\x84\xa2\x00|" +
	"\xf2'\x10<J\x86\x1f\x0dK\xa9(\x01\xff\x03\xbb@" +
	"\xd8\xa2d\xf8\xcd\xb8e)Z\x80\xff\xb5\xf6/\xc6{" +
	"\xc6m[\xd1\x06\xfc\xdf\x1c\x02\xe1/\xe3[\xc6\x1dG" +
	"\xd1\x01\xfc\x0d\xe6@\xb8n<3\xee\xba\x8a.\xe0O" +
	"j\x1f\x1b\xdf\xa5`U\xc6\x13]\x94\xd1\x042+\xf8" +
	"\x0e\x1cH\xd2\x860c5\x8b\x8b\xb8L\xf3\x02\xc0K" +
	"z\xfd\x9c\xda\xb3X\xcf\x8b\x06\xfe\xd53\x9d\x94+Z" +
	"\x7fij\xb5\x9dN\x93\x91^\x8b K\xddl\xf5\xc5" +
	"\xbfi\x8evT\xc6i\xb2\x9a\xf5\xbc\x18\xe8\x1c\xedM" +
	"\xb3\xd8\xc8O\x01\x00\x00\xff\xff\xc1 XO"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_da1eebf4d7c0f83e,
		Nodes: []uint64{
			0xf8bd901143c99f61,
		},
		Compressed: true,
	})
}
