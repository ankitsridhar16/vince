// Code generated by capnpc-go. DO NOT EDIT.

package store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Calendar capnp.Struct

// Calendar_TypeID is the unique identifier for the type Calendar.
const Calendar_TypeID = 0xf8bd901143c99f61

func NewCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Calendar(st), err
}

func NewRootCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Calendar(st), err
}

func ReadRootCalendar(msg *capnp.Message) (Calendar, error) {
	root, err := msg.Root()
	return Calendar(root.Struct()), err
}

func (s Calendar) String() string {
	str, _ := text.Marshal(0xf8bd901143c99f61, capnp.Struct(s))
	return str
}

func (s Calendar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Calendar) DecodeFromPtr(p capnp.Ptr) Calendar {
	return Calendar(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Calendar) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Calendar) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Calendar) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Calendar) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Calendar) Visitors() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitors() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Calendar) SetVisitors(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVisitors sets the visitors field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitors(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Calendar) Visits() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisits() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Calendar) SetVisits(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVisits sets the visits field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisits(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Calendar) Views() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViews() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Calendar) SetViews(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewViews sets the views field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViews(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Calendar) Events() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasEvents() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Calendar) SetEvents(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewEvents(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Calendar_List is a list of Calendar.
type Calendar_List = capnp.StructList[Calendar]

// NewCalendar creates a new list of Calendar.
func NewCalendar_List(s *capnp.Segment, sz int32) (Calendar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Calendar](l), err
}

// Calendar_Future is a wrapper for a Calendar promised by a client call.
type Calendar_Future struct{ *capnp.Future }

func (f Calendar_Future) Struct() (Calendar, error) {
	p, err := f.Future.Ptr()
	return Calendar(p.Struct()), err
}

type Sum capnp.Struct

// Sum_TypeID is the unique identifier for the type Sum.
const Sum_TypeID = 0xb5b7b963d0a9b4d4

func NewSum(s *capnp.Segment) (Sum, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Sum(st), err
}

func NewRootSum(s *capnp.Segment) (Sum, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Sum(st), err
}

func ReadRootSum(msg *capnp.Message) (Sum, error) {
	root, err := msg.Root()
	return Sum(root.Struct()), err
}

func (s Sum) String() string {
	str, _ := text.Marshal(0xb5b7b963d0a9b4d4, capnp.Struct(s))
	return str
}

func (s Sum) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Sum) DecodeFromPtr(p capnp.Ptr) Sum {
	return Sum(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Sum) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Sum) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Sum) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Sum) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Sum) Visitors() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Sum) SetVisitors(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Sum) Visits() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Sum) SetVisits(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Sum) Views() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Sum) SetViews(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Sum) Events() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Sum) SetEvents(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

// Sum_List is a list of Sum.
type Sum_List = capnp.StructList[Sum]

// NewSum creates a new list of Sum.
func NewSum_List(s *capnp.Segment, sz int32) (Sum_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[Sum](l), err
}

// Sum_Future is a wrapper for a Sum promised by a client call.
type Sum_Future struct{ *capnp.Future }

func (f Sum_Future) Struct() (Sum, error) {
	p, err := f.Future.Ptr()
	return Sum(p.Struct()), err
}

const schema_da1eebf4d7c0f83e = "x\xdat\xcf\xbdJ;A\x14\x05\xf0sf6\xff\x7f" +
	"\x11\x0c\x99$\xa0\x95y\x02\x15-S\x18!\x9dU\x06" +
	"_\xc0%Yp!\x1f\xeb\xee\x1a\x15|\x00\x1b!\x0f" +
	" \x88`c+\x8aZ\x08\xb6\x16\x82\x85\"\x06\xacS" +
	"X\x09\x0a\xb1Z\x99\x90\x8fM\xc0j\xe6\x9e{\x8a\xdf" +
	"M\xbf\xafY\xcb3\xb3\x02B\xcf%\xfeE\xcf\x97\xe7" +
	"O\x95\xdb\xeb+\xe8\x0c\xadh\xb5w\xff\xfa\xf51\xdf" +
	"\x81\xf5\x1fP\x9f\x17\xea\xc7\xbc\xdf]0\xb2O\x1eJ" +
	"\xaa}\xd7\x83\xcap\xdcK\x98b\xf6\x91\x9d\xec\x1b\xcd" +
	"\xef\x85],DA\xd8\xf4\x9d\xa5 d\xd3w\x16+" +
	"\xb6\xd7\xc8{\x85\x8d\x9dz\x99\xd4ii\x01\x16\x01e" +
	"\xaf\x03zSR\xd7\x04\x15\x99\xa3\x09\xdd\x02\xa0\xab\x92" +
	"\xda\x13TB\xe4(\x00U_\x01\xf4\x96\xa4\x0e\x05\x95" +
	"\x949J@m\x9bfMR\xef\x09F-7p\xc3" +
	"\xa6\x1f\x00`\x12\x82I\xb0\xd8\xcf\x82\xe1\x98o\xb9\xce" +
	"\xeeh*:-\xa71^\x8e\xc0b\x08\xf6\x0a%\xbb" +
	"\xe64\xaa\xd2\xf6\xffP\x1f\xc4\xd4\xfb\xc6\x12J\xeav" +
	"L}d\xd4\x87\x92\xfa,\xa6>5\xcdcI}3" +
	"\xa5N\x81e\xc9>(5\xc6O\xa6\x83\x1b\xa6\xaa\x83" +
	"S&\xd3\xdf\x00\x00\x00\xff\xff\x18\xcfj\xce"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_da1eebf4d7c0f83e,
		Nodes: []uint64{
			0xb5b7b963d0a9b4d4,
			0xf8bd901143c99f61,
		},
		Compressed: true,
	})
}
