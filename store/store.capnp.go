// Code generated by capnpc-go. DO NOT EDIT.

package store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Calendar capnp.Struct

// Calendar_TypeID is the unique identifier for the type Calendar.
const Calendar_TypeID = 0xf8bd901143c99f61

func NewCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Calendar(st), err
}

func NewRootCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Calendar(st), err
}

func ReadRootCalendar(msg *capnp.Message) (Calendar, error) {
	root, err := msg.Root()
	return Calendar(root.Struct()), err
}

func (s Calendar) String() string {
	str, _ := text.Marshal(0xf8bd901143c99f61, capnp.Struct(s))
	return str
}

func (s Calendar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Calendar) DecodeFromPtr(p capnp.Ptr) Calendar {
	return Calendar(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Calendar) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Calendar) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Calendar) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Calendar) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Calendar) Visitors() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitors() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Calendar) SetVisitors(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVisitors sets the visitors field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitors(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Calendar) Visits() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisits() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Calendar) SetVisits(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVisits sets the visits field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisits(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Calendar) Views() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViews() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Calendar) SetViews(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewViews sets the views field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViews(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Calendar) Events() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasEvents() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Calendar) SetEvents(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewEvents(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Calendar_List is a list of Calendar.
type Calendar_List = capnp.StructList[Calendar]

// NewCalendar creates a new list of Calendar.
func NewCalendar_List(s *capnp.Segment, sz int32) (Calendar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Calendar](l), err
}

// Calendar_Future is a wrapper for a Calendar promised by a client call.
type Calendar_Future struct{ *capnp.Future }

func (f Calendar_Future) Struct() (Calendar, error) {
	p, err := f.Future.Ptr()
	return Calendar(p.Struct()), err
}

type Sum capnp.Struct

// Sum_TypeID is the unique identifier for the type Sum.
const Sum_TypeID = 0xb5b7b963d0a9b4d4

func NewSum(s *capnp.Segment) (Sum, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 0})
	return Sum(st), err
}

func NewRootSum(s *capnp.Segment) (Sum, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 0})
	return Sum(st), err
}

func ReadRootSum(msg *capnp.Message) (Sum, error) {
	root, err := msg.Root()
	return Sum(root.Struct()), err
}

func (s Sum) String() string {
	str, _ := text.Marshal(0xb5b7b963d0a9b4d4, capnp.Struct(s))
	return str
}

func (s Sum) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Sum) DecodeFromPtr(p capnp.Ptr) Sum {
	return Sum(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Sum) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Sum) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Sum) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Sum) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Sum) Visitors() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Sum) SetVisitors(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Sum) Views() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Sum) SetViews(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Sum) Events() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Sum) SetEvents(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Sum) Visits() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Sum) SetVisits(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Sum) BounceRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Sum) SetBounceRate(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Sum) VisitDuration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Sum) SetVisitDuration(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Sum) ViewsPerVisit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Sum) SetViewsPerVisit(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

// Sum_List is a list of Sum.
type Sum_List = capnp.StructList[Sum]

// NewSum creates a new list of Sum.
func NewSum_List(s *capnp.Segment, sz int32) (Sum_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 56, PointerCount: 0}, sz)
	return capnp.StructList[Sum](l), err
}

// Sum_Future is a wrapper for a Sum promised by a client call.
type Sum_Future struct{ *capnp.Future }

func (f Sum_Future) Struct() (Sum, error) {
	p, err := f.Future.Ptr()
	return Sum(p.Struct()), err
}

const schema_da1eebf4d7c0f83e = "x\xda\\\x90\xbfk\x14Q\x14\x85\xcfywf\xb7\x08" +
	"\x09\xbed@\x0bq\xff\x02\x7f\xc4r\x0b\x15be\xb5" +
	"W\xc1\xc2\xcaq}\xc5\x82\xce,3\xb3\x1b\x04\xff\x00" +
	"\x9b`\x1a\x0bA\x10\xc1\xc6V\x12\x8c``\x05\x85\x04" +
	",\"\x04\xd4`)XX\x09\x0a\xb1\x1ayKvv" +
	"\xb2\xdd\x9c\x8fo\xe0\xdd\xef\xc2<\xaf\x04\xcb\xf3'\x0d" +
	"\x8c\x9e\x0a\x1b\xe5\xfe\xc6\xab\xbd\xee\xdb7\x9b\xd0E6" +
	"\xcbK\x87\xa3/\x7f~\x9d9@\xd0\x04\xec\xef\xd7\xf6" +
	"_\x13X\xfe\xfb\x98`\x19?\xdf]\xb1\xeb\xdb\x87\xb0" +
	"\x8b\x9c\x8a\xa17\x97\xd6\xcc\xc1\xd2S\xe3\xbf\x9e\x98\x9f" +
	"8[\xe6E\x9a\xb9\xf3y\xc14s\xe7\xbaq?i" +
	"\xf5\xdb7\x06\xf7;\xa4\x9e\x96\x00\x08\x08\xd8\xcdk\x80" +
	"n\x08udh\xc9\x88\x1en_\x04tK\xa8\x1f\x0c" +
	"\xad1\x11\x0d`\xdf\xb7\x01}'\xd4\x1dC+\x12Q" +
	"\x00\xfb\xd1\xc3\x91P?\x19\xda \x88\x18\x00v\xf7\x16" +
	"\xa0;B\xdd7\xb4a\x181\x04\xec\xe7\x0c\xd0=\xa1" +
	"~7\xb4\x8dF\xc4\x06`\xbfy\xf8U\xa8?\x0c\xcb" +
	"a/\xef\x15i\x96\x03\xe0\x1c\x0c\xe7\xc0\xd6\xb0\xe7V" +
	"\xf3\xc9\xba\xec\x86.)\xa6s\xfcC5\xcb;\xe9 " +
	"\xe9\xba\xeb1\xa4p\x15\x1c;W\x07\x19Zq\xd1K" +
	"\x93\x1aw\xaby\xc7eh\xdd\xf4F\xc5'\xd1\xcc$" +
	"Z\xbf\xbd\x12\xdfs\xc9]\x893_\xeeDU.\xf6" +
	"\xe5n\x0b\xf5a\xad\xdc\x03\xdf\xa3\x10\xeaz\xad\xdc\x9a" +
	"\xcf\xf9H\xa8/k\xe5^x\xf3\x99P\xb7fN_" +
	"\x00;\xc2\xf1\x83\x16\xa6G\x1e\xa7G]f\xd4\xa3<" +
	"\xc7\xe9\xff\x00\x00\x00\xff\xff\xd2'\x8b\x1c"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_da1eebf4d7c0f83e,
		Nodes: []uint64{
			0xb5b7b963d0a9b4d4,
			0xf8bd901143c99f61,
		},
		Compressed: true,
	})
}
