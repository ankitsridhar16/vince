// Code generated by capnpc-go. DO NOT EDIT.

package store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Calendar capnp.Struct

// Calendar_TypeID is the unique identifier for the type Calendar.
const Calendar_TypeID = 0xf8bd901143c99f61

func NewCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Calendar(st), err
}

func NewRootCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Calendar(st), err
}

func ReadRootCalendar(msg *capnp.Message) (Calendar, error) {
	root, err := msg.Root()
	return Calendar(root.Struct()), err
}

func (s Calendar) String() string {
	str, _ := text.Marshal(0xf8bd901143c99f61, capnp.Struct(s))
	return str
}

func (s Calendar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Calendar) DecodeFromPtr(p capnp.Ptr) Calendar {
	return Calendar(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Calendar) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Calendar) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Calendar) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Calendar) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Calendar) Visitors() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitors() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Calendar) SetVisitors(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVisitors sets the visitors field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitors(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Calendar) Views() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViews() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Calendar) SetViews(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewViews sets the views field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViews(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Calendar) Events() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasEvents() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Calendar) SetEvents(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewEvents(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Calendar) Visits() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisits() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Calendar) SetVisits(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewVisits sets the visits field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisits(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Calendar) BounceRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasBounceRate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Calendar) SetBounceRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewBounceRate sets the bounceRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewBounceRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Calendar) VisitDuration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitDuration() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Calendar) SetVisitDuration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewVisitDuration sets the visitDuration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitDuration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Calendar) ViewsPerVisit() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViewsPerVisit() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Calendar) SetViewsPerVisit(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewViewsPerVisit sets the viewsPerVisit field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViewsPerVisit(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}

// Calendar_List is a list of Calendar.
type Calendar_List = capnp.StructList[Calendar]

// NewCalendar creates a new list of Calendar.
func NewCalendar_List(s *capnp.Segment, sz int32) (Calendar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return capnp.StructList[Calendar](l), err
}

// Calendar_Future is a wrapper for a Calendar promised by a client call.
type Calendar_Future struct{ *capnp.Future }

func (f Calendar_Future) Struct() (Calendar, error) {
	p, err := f.Future.Ptr()
	return Calendar(p.Struct()), err
}

const schema_da1eebf4d7c0f83e = "x\xdad\xcc?K\xf3P\x14\xc7\xf1\xdf\xef\xde$}" +
	"\x1e\xfc\x83\xd7f\x14\xab\xe0\xaaR'-\xa2B\x9d\x9c" +
	"z\x8d8\xb8\xc5z\x87\x80$%I\xdb\x97\xa1\xef\xc0" +
	"7\xa1\xa3\xe8\"(X\xd0I(.\x82\x9b\x8b\x83B" +
	"\xb7\xc8\xed\x98n\x87\xcf\xf7\x9c3\xf7\xbc\xe7\xd4g\xee" +
	"\x08\xa1}\xd7+\xc2\xab\xa7\xa6\xba\xbc\x1dA\xcd\xb3\xd8" +
	"\x19\xdd\xbf\xfd|-\x0e\xe1V*\x80z\x18\xaa\xd7\x0a" +
	"P\x1f\\\x10\xabE\x96'\xa9Y\xcfr\x91\xa4f\xad" +
	"\x1dv\xe2N\xa3\x19\x9e\x9b\xf8L\x86i\x8b\xd4\x0b\xd2" +
	"\x01\x1c\x02\xea\xe6\x00\xd0\xd7\x92\xfaEP\x91>-\x0e" +
	"6\x00\xfd(\xa9?\x05\x95\x10>\x05\xa0>\x1a\x80~" +
	"\x97\xd4#A%\xa5O\x09\xa8_\x8b\xdf\x92\xc14\x05" +
	"\x95\xe3\xf8t\x80\xea\x7f\x9e\x00\xc1?J\x06+\xd6]" +
	"\xd7\xa7\x0bT\x97\x99\x02\xc1\x92\xf5m\xeb\x9e\xe7\xd3\x03" +
	"\xaa[c\xdf\xb4~D\xc1\xa2\x17eQ\x9e\xa4\x19\x00" +
	"\xce\x82-INA\xd8\xb1\xd6\x8bL?+\xe1\xae\xe9" +
	"\x998\x9f\xd0\xf1\x97\xb2\x16\xa7I7n\x9b\xc3\x102" +
	"7\xe56\xbe\xd8\xef\xa6\xa8\x85y\x94\xc4\x93\xd9\xf4\xb3" +
	"\x96IQ;\xb6\x8b\xa5\xfc\x17\x00\x00\xff\xffh\x8eT" +
	"\x91"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_da1eebf4d7c0f83e,
		Nodes: []uint64{
			0xf8bd901143c99f61,
		},
		Compressed: true,
	})
}
