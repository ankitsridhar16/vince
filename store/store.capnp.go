// Code generated by capnpc-go. DO NOT EDIT.

package store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Calendar capnp.Struct

// Calendar_TypeID is the unique identifier for the type Calendar.
const Calendar_TypeID = 0xf8bd901143c99f61

func NewCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Calendar(st), err
}

func NewRootCalendar(s *capnp.Segment) (Calendar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return Calendar(st), err
}

func ReadRootCalendar(msg *capnp.Message) (Calendar, error) {
	root, err := msg.Root()
	return Calendar(root.Struct()), err
}

func (s Calendar) String() string {
	str, _ := text.Marshal(0xf8bd901143c99f61, capnp.Struct(s))
	return str
}

func (s Calendar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Calendar) DecodeFromPtr(p capnp.Ptr) Calendar {
	return Calendar(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Calendar) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Calendar) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Calendar) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Calendar) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Calendar) Visitors() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitors() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Calendar) SetVisitors(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVisitors sets the visitors field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitors(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Calendar) Views() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViews() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Calendar) SetViews(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewViews sets the views field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViews(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Calendar) Events() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasEvents() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Calendar) SetEvents(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewEvents(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Calendar) Visits() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisits() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Calendar) SetVisits(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewVisits sets the visits field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisits(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Calendar) BounceRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasBounceRate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Calendar) SetBounceRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewBounceRate sets the bounceRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewBounceRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Calendar) VisitDuration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasVisitDuration() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Calendar) SetVisitDuration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewVisitDuration sets the visitDuration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewVisitDuration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Calendar) ViewsPerVisit() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s Calendar) HasViewsPerVisit() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Calendar) SetViewsPerVisit(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewViewsPerVisit sets the viewsPerVisit field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Calendar) NewViewsPerVisit(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}

// Calendar_List is a list of Calendar.
type Calendar_List = capnp.StructList[Calendar]

// NewCalendar creates a new list of Calendar.
func NewCalendar_List(s *capnp.Segment, sz int32) (Calendar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return capnp.StructList[Calendar](l), err
}

// Calendar_Future is a wrapper for a Calendar promised by a client call.
type Calendar_Future struct{ *capnp.Future }

func (f Calendar_Future) Struct() (Calendar, error) {
	p, err := f.Future.Ptr()
	return Calendar(p.Struct()), err
}

const schema_da1eebf4d7c0f83e = "x\xdad\xcc?K\xf3P\x14\xc7\xf1\xdf\xef\xde$}" +
	"\x1e\xac\x7f.\xcd(V\xc1U\xa1NZD\x85:9" +
	"\xf5\x1aqp\x8b\xf5\x0e\x01IJ\x92\xb6/C\xdf\x81" +
	"\xbb\xb3\x8e\xa2\x8b`\x91\x82\x9b .\x82\x9b\x8b\x83B" +
	"\xb7\xc8\xed\x98n\x87\xcf\xf7\x9c\xb3\xf0\xbc\xe74f\xef" +
	"\x09\xa1}\xd7+\xc2\xabaK]\xde\x8d\xa1\xaa,v" +
	"\xc6\x0f\xaf?_Kop+\x15@=^\xabQ\x05" +
	"h\x0c/\x88\xb5\"\xcb\x93\xd4\xacwBv\xe3n\xb3" +
	"\x15\x9e\x9b\xf9\xf8,L\xdb\xa4^\x94\x0e\xe0\x10P\xb7" +
	"\x07\x80\xbe\x91\xd4/\x82\x8a\xf4iq\xb4\x01\xe8'I" +
	"\xfd)\xa8\x84\xf0)\x00\xf5\xd1\x04\xf4\xbb\xa4\x1e\x0b*" +
	")}J@\xfdZ\xfc\x96\x0c\xaa\x14T\x8e\xe3\xd3\x01" +
	"j\xffy\x02\x04\xff(\x19\xacZw]\x9f.P[" +
	"a\x0a\x04\xcb\xd6\xb7\xad{\x9eO\x0f\xa8mM|\xd3" +
	"\xfa\x11\x05\x8b~\x94Ey\x92f\x008\x07\xb6%9" +
	"\x03a\xc7z?2\x83\xac\x84\xbb\xa6o\xe2|J'" +
	"_\xcaZ\x9c&\xbd\xb8c\x0eC\xc8\xdc\x94\xdb\xe4b" +
	"\xbf\x97\xa2\x1e\xe6Q\x12Og3\xc8\xda&E\xfd\xd8" +
	".\x96\xf2_\x00\x00\x00\xff\xff9\xa7R\x01"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_da1eebf4d7c0f83e,
		Nodes: []uint64{
			0xf8bd901143c99f61,
		},
		Compressed: true,
	})
}
