// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: staples/v1/base.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Metric int32

const (
	Metric_pageviews      Metric = 0
	Metric_visitors       Metric = 1
	Metric_visits         Metric = 2
	Metric_bounce_rate    Metric = 3
	Metric_visit_duration Metric = 4
)

// Enum value maps for Metric.
var (
	Metric_name = map[int32]string{
		0: "pageviews",
		1: "visitors",
		2: "visits",
		3: "bounce_rate",
		4: "visit_duration",
	}
	Metric_value = map[string]int32{
		"pageviews":      0,
		"visitors":       1,
		"visits":         2,
		"bounce_rate":    3,
		"visit_duration": 4,
	}
)

func (x Metric) Enum() *Metric {
	p := new(Metric)
	*p = x
	return p
}

func (x Metric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metric) Descriptor() protoreflect.EnumDescriptor {
	return file_staples_v1_base_proto_enumTypes[0].Descriptor()
}

func (Metric) Type() protoreflect.EnumType {
	return &file_staples_v1_base_proto_enumTypes[0]
}

func (x Metric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metric.Descriptor instead.
func (Metric) EnumDescriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{0}
}

type Filters_Projection int32

const (
	Filters_Timestamp      Filters_Projection = 0
	Filters_ID             Filters_Projection = 1
	Filters_Bounce         Filters_Projection = 2
	Filters_Session        Filters_Projection = 3
	Filters_Duration       Filters_Projection = 4
	Filters_Browser        Filters_Projection = 5
	Filters_BrowserVersion Filters_Projection = 6
	Filters_City           Filters_Projection = 7
	Filters_Country        Filters_Projection = 8
	Filters_Domain         Filters_Projection = 9
	Filters_EntryPage      Filters_Projection = 10
	Filters_ExitPage       Filters_Projection = 11
	Filters_Host           Filters_Projection = 12
	Filters_Event          Filters_Projection = 13
	Filters_Os             Filters_Projection = 14
	Filters_OsVersion      Filters_Projection = 15
	Filters_Path           Filters_Projection = 16
	Filters_Referrer       Filters_Projection = 17
	Filters_ReferrerSource Filters_Projection = 18
	Filters_Region         Filters_Projection = 19
	Filters_Screen         Filters_Projection = 20
	Filters_UtmCampaign    Filters_Projection = 21
	Filters_UtmContent     Filters_Projection = 22
	Filters_UtmMedium      Filters_Projection = 23
	Filters_UtmSource      Filters_Projection = 24
	Filters_UtmTerm        Filters_Projection = 25
)

// Enum value maps for Filters_Projection.
var (
	Filters_Projection_name = map[int32]string{
		0:  "Timestamp",
		1:  "ID",
		2:  "Bounce",
		3:  "Session",
		4:  "Duration",
		5:  "Browser",
		6:  "BrowserVersion",
		7:  "City",
		8:  "Country",
		9:  "Domain",
		10: "EntryPage",
		11: "ExitPage",
		12: "Host",
		13: "Event",
		14: "Os",
		15: "OsVersion",
		16: "Path",
		17: "Referrer",
		18: "ReferrerSource",
		19: "Region",
		20: "Screen",
		21: "UtmCampaign",
		22: "UtmContent",
		23: "UtmMedium",
		24: "UtmSource",
		25: "UtmTerm",
	}
	Filters_Projection_value = map[string]int32{
		"Timestamp":      0,
		"ID":             1,
		"Bounce":         2,
		"Session":        3,
		"Duration":       4,
		"Browser":        5,
		"BrowserVersion": 6,
		"City":           7,
		"Country":        8,
		"Domain":         9,
		"EntryPage":      10,
		"ExitPage":       11,
		"Host":           12,
		"Event":          13,
		"Os":             14,
		"OsVersion":      15,
		"Path":           16,
		"Referrer":       17,
		"ReferrerSource": 18,
		"Region":         19,
		"Screen":         20,
		"UtmCampaign":    21,
		"UtmContent":     22,
		"UtmMedium":      23,
		"UtmSource":      24,
		"UtmTerm":        25,
	}
)

func (x Filters_Projection) Enum() *Filters_Projection {
	p := new(Filters_Projection)
	*p = x
	return p
}

func (x Filters_Projection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filters_Projection) Descriptor() protoreflect.EnumDescriptor {
	return file_staples_v1_base_proto_enumTypes[1].Descriptor()
}

func (Filters_Projection) Type() protoreflect.EnumType {
	return &file_staples_v1_base_proto_enumTypes[1]
}

func (x Filters_Projection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filters_Projection.Descriptor instead.
func (Filters_Projection) EnumDescriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{4, 0}
}

type Filter_Op int32

const (
	Filter_equal        Filter_Op = 0
	Filter_not_equal    Filter_Op = 2
	Filter_re_equal     Filter_Op = 3
	Filter_re_not_equal Filter_Op = 4
)

// Enum value maps for Filter_Op.
var (
	Filter_Op_name = map[int32]string{
		0: "equal",
		2: "not_equal",
		3: "re_equal",
		4: "re_not_equal",
	}
	Filter_Op_value = map[string]int32{
		"equal":        0,
		"not_equal":    2,
		"re_equal":     3,
		"re_not_equal": 4,
	}
)

func (x Filter_Op) Enum() *Filter_Op {
	p := new(Filter_Op)
	*p = x
	return p
}

func (x Filter_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filter_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_staples_v1_base_proto_enumTypes[2].Descriptor()
}

func (Filter_Op) Type() protoreflect.EnumType {
	return &file_staples_v1_base_proto_enumTypes[2]
}

func (x Filter_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filter_Op.Descriptor instead.
func (Filter_Op) EnumDescriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{5, 0}
}

type Filter_Column int32

const (
	Filter_Browser        Filter_Column = 0
	Filter_BrowserVersion Filter_Column = 6
	Filter_City           Filter_Column = 7
	Filter_Country        Filter_Column = 8
	Filter_Domain         Filter_Column = 9
	Filter_EntryPage      Filter_Column = 10
	Filter_ExitPage       Filter_Column = 11
	Filter_Host           Filter_Column = 12
	Filter_Event          Filter_Column = 13
	Filter_Os             Filter_Column = 14
	Filter_OsVersion      Filter_Column = 15
	Filter_Path           Filter_Column = 16
	Filter_Referrer       Filter_Column = 17
	Filter_ReferrerSource Filter_Column = 18
	Filter_Region         Filter_Column = 19
	Filter_Screen         Filter_Column = 20
	Filter_UtmCampaign    Filter_Column = 21
	Filter_UtmContent     Filter_Column = 22
	Filter_UtmMedium      Filter_Column = 23
	Filter_UtmSource      Filter_Column = 24
	Filter_UtmTerm        Filter_Column = 25
)

// Enum value maps for Filter_Column.
var (
	Filter_Column_name = map[int32]string{
		0:  "Browser",
		6:  "BrowserVersion",
		7:  "City",
		8:  "Country",
		9:  "Domain",
		10: "EntryPage",
		11: "ExitPage",
		12: "Host",
		13: "Event",
		14: "Os",
		15: "OsVersion",
		16: "Path",
		17: "Referrer",
		18: "ReferrerSource",
		19: "Region",
		20: "Screen",
		21: "UtmCampaign",
		22: "UtmContent",
		23: "UtmMedium",
		24: "UtmSource",
		25: "UtmTerm",
	}
	Filter_Column_value = map[string]int32{
		"Browser":        0,
		"BrowserVersion": 6,
		"City":           7,
		"Country":        8,
		"Domain":         9,
		"EntryPage":      10,
		"ExitPage":       11,
		"Host":           12,
		"Event":          13,
		"Os":             14,
		"OsVersion":      15,
		"Path":           16,
		"Referrer":       17,
		"ReferrerSource": 18,
		"Region":         19,
		"Screen":         20,
		"UtmCampaign":    21,
		"UtmContent":     22,
		"UtmMedium":      23,
		"UtmSource":      24,
		"UtmTerm":        25,
	}
)

func (x Filter_Column) Enum() *Filter_Column {
	p := new(Filter_Column)
	*p = x
	return p
}

func (x Filter_Column) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filter_Column) Descriptor() protoreflect.EnumDescriptor {
	return file_staples_v1_base_proto_enumTypes[3].Descriptor()
}

func (Filter_Column) Type() protoreflect.EnumType {
	return &file_staples_v1_base_proto_enumTypes[3]
}

func (x Filter_Column) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filter_Column.Descriptor instead.
func (Filter_Column) EnumDescriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{5, 1}
}

type ScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *TimeRange `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Filters   *Filters   `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ScanRequest) Reset() {
	*x = ScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staples_v1_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanRequest) ProtoMessage() {}

func (x *ScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staples_v1_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanRequest.ProtoReflect.Descriptor instead.
func (*ScanRequest) Descriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{0}
}

func (x *ScanRequest) GetTimestamp() *TimeRange {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ScanRequest) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record []byte `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *ScanResponse) Reset() {
	*x = ScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staples_v1_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResponse) ProtoMessage() {}

func (x *ScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staples_v1_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResponse.ProtoReflect.Descriptor instead.
func (*ScanResponse) Descriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{1}
}

func (x *ScanResponse) GetRecord() []byte {
	if x != nil {
		return x.Record
	}
	return nil
}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staples_v1_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_staples_v1_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{2}
}

func (x *TimeRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TimeRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staples_v1_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_staples_v1_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Filters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Filter `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// columns returned
	Projection []Filters_Projection `protobuf:"varint,2,rep,packed,name=projection,proto3,enum=v1.Filters_Projection" json:"projection,omitempty"`
}

func (x *Filters) Reset() {
	*x = Filters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staples_v1_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filters) ProtoMessage() {}

func (x *Filters) ProtoReflect() protoreflect.Message {
	mi := &file_staples_v1_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filters.ProtoReflect.Descriptor instead.
func (*Filters) Descriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{4}
}

func (x *Filters) GetList() []*Filter {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *Filters) GetProjection() []Filters_Projection {
	if x != nil {
		return x.Projection
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column Filter_Column `protobuf:"varint,1,opt,name=column,proto3,enum=v1.Filter_Column" json:"column,omitempty"`
	Op     Filter_Op     `protobuf:"varint,2,opt,name=op,proto3,enum=v1.Filter_Op" json:"op,omitempty"`
	Value  string        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staples_v1_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_staples_v1_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{5}
}

func (x *Filter) GetColumn() Filter_Column {
	if x != nil {
		return x.Column
	}
	return Filter_Browser
}

func (x *Filter) GetOp() Filter_Op {
	if x != nil {
		return x.Op
	}
	return Filter_equal
}

func (x *Filter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / EventName
	N   string `protobuf:"bytes,1,opt,name=n,proto3" json:"n,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Domain
	D string `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	// Screen width
	W int32 `protobuf:"varint,4,opt,name=w,proto3" json:"w,omitempty"`
	// Hash mode
	H  bool   `protobuf:"varint,5,opt,name=h,proto3" json:"h,omitempty"`
	Ip string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	// user agent
	Ua string `protobuf:"bytes,7,opt,name=ua,proto3" json:"ua,omitempty"`
	// Referrer
	R         string                 `protobuf:"bytes,8,opt,name=r,proto3" json:"r,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staples_v1_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_staples_v1_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_staples_v1_base_proto_rawDescGZIP(), []int{6}
}

func (x *Event) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

func (x *Event) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Event) GetD() string {
	if x != nil {
		return x.D
	}
	return ""
}

func (x *Event) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Event) GetH() bool {
	if x != nil {
		return x.H
	}
	return false
}

func (x *Event) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Event) GetUa() string {
	if x != nil {
		return x.Ua
	}
	return ""
}

func (x *Event) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_staples_v1_base_proto protoreflect.FileDescriptor

var file_staples_v1_base_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x61, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x0b, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x26, 0x0a, 0x0c,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x7b, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x02, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x10,
	0x07, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x08, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x69,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x10,
	0x0c, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0d, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x73, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x10, 0x10, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x12, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x74, 0x6d, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x74, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x74, 0x6d, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x74, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x74, 0x6d, 0x54, 0x65, 0x72,
	0x6d, 0x10, 0x19, 0x22, 0xd0, 0x03, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e,
	0x0a, 0x02, 0x4f, 0x70, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x72, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x04, 0x22, 0xa5,
	0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x69,
	0x74, 0x79, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10,
	0x08, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x10, 0x09, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x78, 0x69, 0x74, 0x50, 0x61, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f,
	0x73, 0x74, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0d, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x73, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x10, 0x10,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x10, 0x11, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x13, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x74,
	0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x74, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x74,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x74, 0x6d,
	0x54, 0x65, 0x72, 0x6d, 0x10, 0x19, 0x22, 0xe3, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x01, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x88, 0x01, 0x01,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x01, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x68, 0x01, 0x52, 0x01, 0x64, 0x12,
	0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a,
	0x01, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x68, 0x12, 0x17, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x70, 0x01,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x75, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x56, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x0d, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x69, 0x73, 0x69, 0x74, 0x73, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x04, 0x42, 0x6c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x09,
	0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x73, 0x75, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x73, 0x74, 0x61, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x56,
	0x58, 0x58, 0xaa, 0x02, 0x02, 0x56, 0x31, 0xca, 0x02, 0x02, 0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_staples_v1_base_proto_rawDescOnce sync.Once
	file_staples_v1_base_proto_rawDescData = file_staples_v1_base_proto_rawDesc
)

func file_staples_v1_base_proto_rawDescGZIP() []byte {
	file_staples_v1_base_proto_rawDescOnce.Do(func() {
		file_staples_v1_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_staples_v1_base_proto_rawDescData)
	})
	return file_staples_v1_base_proto_rawDescData
}

var file_staples_v1_base_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_staples_v1_base_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_staples_v1_base_proto_goTypes = []interface{}{
	(Metric)(0),                   // 0: v1.Metric
	(Filters_Projection)(0),       // 1: v1.Filters.Projection
	(Filter_Op)(0),                // 2: v1.Filter.Op
	(Filter_Column)(0),            // 3: v1.Filter.Column
	(*ScanRequest)(nil),           // 4: v1.ScanRequest
	(*ScanResponse)(nil),          // 5: v1.ScanResponse
	(*TimeRange)(nil),             // 6: v1.TimeRange
	(*KeyValue)(nil),              // 7: v1.KeyValue
	(*Filters)(nil),               // 8: v1.Filters
	(*Filter)(nil),                // 9: v1.Filter
	(*Event)(nil),                 // 10: v1.Event
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_staples_v1_base_proto_depIdxs = []int32{
	6,  // 0: v1.ScanRequest.timestamp:type_name -> v1.TimeRange
	8,  // 1: v1.ScanRequest.filters:type_name -> v1.Filters
	11, // 2: v1.TimeRange.start:type_name -> google.protobuf.Timestamp
	11, // 3: v1.TimeRange.end:type_name -> google.protobuf.Timestamp
	9,  // 4: v1.Filters.list:type_name -> v1.Filter
	1,  // 5: v1.Filters.projection:type_name -> v1.Filters.Projection
	3,  // 6: v1.Filter.column:type_name -> v1.Filter.Column
	2,  // 7: v1.Filter.op:type_name -> v1.Filter.Op
	11, // 8: v1.Event.timestamp:type_name -> google.protobuf.Timestamp
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_staples_v1_base_proto_init() }
func file_staples_v1_base_proto_init() {
	if File_staples_v1_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_staples_v1_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staples_v1_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staples_v1_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staples_v1_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staples_v1_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staples_v1_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staples_v1_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_staples_v1_base_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_staples_v1_base_proto_goTypes,
		DependencyIndexes: file_staples_v1_base_proto_depIdxs,
		EnumInfos:         file_staples_v1_base_proto_enumTypes,
		MessageInfos:      file_staples_v1_base_proto_msgTypes,
	}.Build()
	File_staples_v1_base_proto = out.File
	file_staples_v1_base_proto_rawDesc = nil
	file_staples_v1_base_proto_goTypes = nil
	file_staples_v1_base_proto_depIdxs = nil
}
