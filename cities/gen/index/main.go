package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"log"
	"os"
	"path/filepath"

	"github.com/gernest/vince/tools"
)

const (
	repo = "git@github.com:dr5hn/countries-states-cities-database.git"
	dir  = "countries-states-cities-database"
)

func main() {
	root := tools.RootVince()
	_, err := os.Stat(dir)
	if err != nil {
		if os.IsNotExist(err) {
			println(">  downloading " + dir)
			tools.ExecPlain("git", "clone", repo)
		} else {
			tools.Exit(err.Error())
		}
	} else {
		// make sure we are up to date
		println(">  updating " + dir)
		tools.ExecPlainWithWorkingPath(
			filepath.Join(root, "cities", dir),
			"git", "pull",
		)
	}
	make()
}

func make() {
	src := filepath.Join(dir, "countries+states+cities.json")
	f, err := os.Open(src)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	var cities []*Country
	err = json.NewDecoder(f).Decode(&cities)
	if err != nil {
		log.Fatal(err)
	}
	var codes []*KV
	for _, c := range cities {
		codes = append(codes, &KV{
			Key:   c.Code,
			Value: c.Name,
		})
		for _, r := range c.States {
			codes = append(codes, &KV{
				Key:   c.Code + "-" + r.Code,
				Value: r.Name,
			})
		}
	}

	var b bytes.Buffer
	b.WriteString(`
	// DO NOT EDIT Code generated by cities/index/main.go"
	package cities

	var isoCodes =map[string]uint16{
	`)
	for i, k := range codes {
		fmt.Fprintf(&b, "%q:%d,\n", k.Key, i)
	}
	b.WriteString("}\n")
	b.WriteString(`
	var countryAndRegions =[]string{
	`)
	for _, k := range codes {
		fmt.Fprintf(&b, "%q,\n", k.Value)
	}
	b.WriteString("}\n")
	b.WriteString(`
	var isoCodeList =[]string{
	`)
	for _, k := range codes {
		fmt.Fprintf(&b, "%q,\n", k.Key)
	}
	b.WriteString("}\n")
	x, err := format.Source(b.Bytes())
	if err != nil {
		tools.Exit("failed formatting go source ", err.Error())
	}
	tools.WriteFile("index.go", x)
}

type KV struct {
	Key, Value string
}

type Country struct {
	Name   string   `json:"name"`
	Code   string   `json:"iso2"`
	States []*State `json:"states"`
}

type State struct {
	Name string `json:"name"`
	Code string `json:"state_code"`
}
