// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config_Env int32

const (
	Config_dev      Config_Env = 0
	Config_stagging Config_Env = 1
	Config_prod     Config_Env = 2
)

// Enum value maps for Config_Env.
var (
	Config_Env_name = map[int32]string{
		0: "dev",
		1: "stagging",
		2: "prod",
	}
	Config_Env_value = map[string]int32{
		"dev":      0,
		"stagging": 1,
		"prod":     2,
	}
)

func (x Config_Env) Enum() *Config_Env {
	p := new(Config_Env)
	*p = x
	return p
}

func (x Config_Env) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_Env) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (Config_Env) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x Config_Env) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_Env.Descriptor instead.
func (Config_Env) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 0}
}

type Config_LogLevel int32

const (
	Config_debug Config_LogLevel = 0
	Config_info  Config_LogLevel = 1
	Config_warn  Config_LogLevel = 2
	Config_error Config_LogLevel = 3
	Config_fatal Config_LogLevel = 4
	Config_panic Config_LogLevel = 6
	// NoLevel defines an absent log level.
	Config_no Config_LogLevel = 7
	// Disabled disables the logger.
	Config_disabled Config_LogLevel = 8
	// TraceLevel defines trace log level.
	Config_trace Config_LogLevel = -1
)

// Enum value maps for Config_LogLevel.
var (
	Config_LogLevel_name = map[int32]string{
		0:  "debug",
		1:  "info",
		2:  "warn",
		3:  "error",
		4:  "fatal",
		6:  "panic",
		7:  "no",
		8:  "disabled",
		-1: "trace",
	}
	Config_LogLevel_value = map[string]int32{
		"debug":    0,
		"info":     1,
		"warn":     2,
		"error":    3,
		"fatal":    4,
		"panic":    6,
		"no":       7,
		"disabled": 8,
		"trace":    -1,
	}
)

func (x Config_LogLevel) Enum() *Config_LogLevel {
	p := new(Config_LogLevel)
	*p = x
	return p
}

func (x Config_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (Config_LogLevel) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x Config_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_LogLevel.Descriptor instead.
func (Config_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 1}
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listen                  string          `protobuf:"bytes,1,opt,name=listen,proto3" json:"listen,omitempty"`
	Env                     Config_Env      `protobuf:"varint,2,opt,name=env,proto3,enum=config.Config_Env" json:"env,omitempty"`
	Url                     string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Mailer                  *Config_Mailer  `protobuf:"bytes,4,opt,name=mailer,proto3" json:"mailer,omitempty"`
	DataPath                string          `protobuf:"bytes,5,opt,name=data_path,json=dataPath,proto3" json:"data_path,omitempty"`
	EnableEmailVerification bool            `protobuf:"varint,6,opt,name=enable_email_verification,json=enableEmailVerification,proto3" json:"enable_email_verification,omitempty"`
	LogLevel                Config_LogLevel `protobuf:"varint,8,opt,name=log_level,json=logLevel,proto3,enum=config.Config_LogLevel" json:"log_level,omitempty"`
	Secrets                 *Secrets        `protobuf:"bytes,9,opt,name=secrets,proto3" json:"secrets,omitempty"`
	Cors                    *Cors           `protobuf:"bytes,10,opt,name=cors,proto3" json:"cors,omitempty"`
	SuperUserId             []uint64        `protobuf:"varint,12,rep,packed,name=super_user_id,json=superUserId,proto3" json:"super_user_id,omitempty"`
	Firewall                *Firewall       `protobuf:"bytes,13,opt,name=firewall,proto3" json:"firewall,omitempty"`
	Intervals               *Intervals      `protobuf:"bytes,15,opt,name=intervals,proto3" json:"intervals,omitempty"`
	// Path where we store backups. Backups aren't incremental, we perfoem full
	// system storage backup.
	//
	// Only opearional data (sqlite) and timeseries data is backed up,
	BackupDir string `protobuf:"bytes,17,opt,name=backup_dir,json=backupDir,proto3" json:"backup_dir,omitempty"`
	// When true we system stats will be collected,persisted  and visualized.
	EnableSystemStats bool       `protobuf:"varint,18,opt,name=enable_system_stats,json=enableSystemStats,proto3" json:"enable_system_stats,omitempty"`
	EnableAutoTls     bool       `protobuf:"varint,19,opt,name=enable_auto_tls,json=enableAutoTls,proto3" json:"enable_auto_tls,omitempty"`
	Acme              *ACME      `protobuf:"bytes,20,opt,name=acme,proto3" json:"acme,omitempty"`
	EnableTls         bool       `protobuf:"varint,30,opt,name=enable_tls,json=enableTls,proto3" json:"enable_tls,omitempty"`
	Tls               *TLS       `protobuf:"bytes,31,opt,name=tls,proto3" json:"tls,omitempty"`
	EnableBootstrap   bool       `protobuf:"varint,34,opt,name=enable_bootstrap,json=enableBootstrap,proto3" json:"enable_bootstrap,omitempty"`
	Bootstrap         *Bootstrap `protobuf:"bytes,35,opt,name=bootstrap,proto3" json:"bootstrap,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetListen() string {
	if x != nil {
		return x.Listen
	}
	return ""
}

func (x *Config) GetEnv() Config_Env {
	if x != nil {
		return x.Env
	}
	return Config_dev
}

func (x *Config) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Config) GetMailer() *Config_Mailer {
	if x != nil {
		return x.Mailer
	}
	return nil
}

func (x *Config) GetDataPath() string {
	if x != nil {
		return x.DataPath
	}
	return ""
}

func (x *Config) GetEnableEmailVerification() bool {
	if x != nil {
		return x.EnableEmailVerification
	}
	return false
}

func (x *Config) GetLogLevel() Config_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return Config_debug
}

func (x *Config) GetSecrets() *Secrets {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Config) GetCors() *Cors {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *Config) GetSuperUserId() []uint64 {
	if x != nil {
		return x.SuperUserId
	}
	return nil
}

func (x *Config) GetFirewall() *Firewall {
	if x != nil {
		return x.Firewall
	}
	return nil
}

func (x *Config) GetIntervals() *Intervals {
	if x != nil {
		return x.Intervals
	}
	return nil
}

func (x *Config) GetBackupDir() string {
	if x != nil {
		return x.BackupDir
	}
	return ""
}

func (x *Config) GetEnableSystemStats() bool {
	if x != nil {
		return x.EnableSystemStats
	}
	return false
}

func (x *Config) GetEnableAutoTls() bool {
	if x != nil {
		return x.EnableAutoTls
	}
	return false
}

func (x *Config) GetAcme() *ACME {
	if x != nil {
		return x.Acme
	}
	return nil
}

func (x *Config) GetEnableTls() bool {
	if x != nil {
		return x.EnableTls
	}
	return false
}

func (x *Config) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Config) GetEnableBootstrap() bool {
	if x != nil {
		return x.EnableBootstrap
	}
	return false
}

func (x *Config) GetBootstrap() *Bootstrap {
	if x != nil {
		return x.Bootstrap
	}
	return nil
}

// Various intervals used by the system
type Intervals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration untill the next cache refreshes sites by domain. We use cache for
	// faster lookup during events ingestion. We periodically refresh the cache
	// using this interval.
	SitesByDomainCacheRefreshInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=sites_by_domain_cache_refresh_interval,json=sitesByDomainCacheRefreshInterval,proto3" json:"sites_by_domain_cache_refresh_interval,omitempty"`
	// How often do we check for log rotation. This is used to check if we need to
	// rotate logs. Logs are rotated by day.
	LogRotationCheckInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=log_rotation_check_interval,json=logRotationCheckInterval,proto3" json:"log_rotation_check_interval,omitempty"`
	// Duration for time series data is persisted in storage.
	SaveTimeseriesBufferInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=save_timeseries_buffer_interval,json=saveTimeseriesBufferInterval,proto3" json:"save_timeseries_buffer_interval,omitempty"`
	// Duration to collect system metrics. This includes counters, gauages and
	// histograms.
	SystemScrapeInterval *durationpb.Duration `protobuf:"bytes,5,opt,name=system_scrape_interval,json=systemScrapeInterval,proto3" json:"system_scrape_interval,omitempty"`
}

func (x *Intervals) Reset() {
	*x = Intervals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intervals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intervals) ProtoMessage() {}

func (x *Intervals) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intervals.ProtoReflect.Descriptor instead.
func (*Intervals) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *Intervals) GetSitesByDomainCacheRefreshInterval() *durationpb.Duration {
	if x != nil {
		return x.SitesByDomainCacheRefreshInterval
	}
	return nil
}

func (x *Intervals) GetLogRotationCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.LogRotationCheckInterval
	}
	return nil
}

func (x *Intervals) GetSaveTimeseriesBufferInterval() *durationpb.Duration {
	if x != nil {
		return x.SaveTimeseriesBufferInterval
	}
	return nil
}

func (x *Intervals) GetSystemScrapeInterval() *durationpb.Duration {
	if x != nil {
		return x.SystemScrapeInterval
	}
	return nil
}

type Secrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// used for any crypto functions
	Ed25519KeyPair *Secrets_KeyPair `protobuf:"bytes,1,opt,name=ed25519_key_pair,json=ed25519KeyPair,proto3" json:"ed25519_key_pair,omitempty"`
	// This is encryption keys used with the age tool/library
	Age *Secrets_KeyPair `protobuf:"bytes,2,opt,name=age,proto3" json:"age,omitempty"`
}

func (x *Secrets) Reset() {
	*x = Secrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secrets) ProtoMessage() {}

func (x *Secrets) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secrets.ProtoReflect.Descriptor instead.
func (*Secrets) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *Secrets) GetEd25519KeyPair() *Secrets_KeyPair {
	if x != nil {
		return x.Ed25519KeyPair
	}
	return nil
}

func (x *Secrets) GetAge() *Secrets_KeyPair {
	if x != nil {
		return x.Age
	}
	return nil
}

type Cors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin                string   `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Credentials           bool     `protobuf:"varint,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	MaxAge                int32    `protobuf:"varint,3,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	Headers               []string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	Expose                []string `protobuf:"bytes,5,rep,name=expose,proto3" json:"expose,omitempty"`
	Methods               []string `protobuf:"bytes,6,rep,name=methods,proto3" json:"methods,omitempty"`
	SendPreflightResponse bool     `protobuf:"varint,7,opt,name=send_preflight_response,json=sendPreflightResponse,proto3" json:"send_preflight_response,omitempty"`
}

func (x *Cors) Reset() {
	*x = Cors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cors) ProtoMessage() {}

func (x *Cors) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cors.ProtoReflect.Descriptor instead.
func (*Cors) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *Cors) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Cors) GetCredentials() bool {
	if x != nil {
		return x.Credentials
	}
	return false
}

func (x *Cors) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *Cors) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Cors) GetExpose() []string {
	if x != nil {
		return x.Expose
	}
	return nil
}

func (x *Cors) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Cors) GetSendPreflightResponse() bool {
	if x != nil {
		return x.SendPreflightResponse
	}
	return false
}

type Firewall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block []*Firewall_Match `protobuf:"bytes,1,rep,name=block,proto3" json:"block,omitempty"`
	Allow []*Firewall_Match `protobuf:"bytes,2,rep,name=allow,proto3" json:"allow,omitempty"`
}

func (x *Firewall) Reset() {
	*x = Firewall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firewall) ProtoMessage() {}

func (x *Firewall) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firewall.ProtoReflect.Descriptor instead.
func (*Firewall) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *Firewall) GetBlock() []*Firewall_Match {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Firewall) GetAllow() []*Firewall_Match {
	if x != nil {
		return x.Allow
	}
	return nil
}

type TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Cert    string `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (x *TLS) Reset() {
	*x = TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLS) ProtoMessage() {}

func (x *TLS) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLS.ProtoReflect.Descriptor instead.
func (*TLS) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *TLS) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TLS) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TLS) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

// Configures letsencrypt autotls
type ACME struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email  string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *ACME) Reset() {
	*x = ACME{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACME) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACME) ProtoMessage() {}

func (x *ACME) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACME.ProtoReflect.Descriptor instead.
func (*ACME) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

func (x *ACME) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ACME) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type Bootstrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Key      string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Bootstrap) Reset() {
	*x = Bootstrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bootstrap) ProtoMessage() {}

func (x *Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bootstrap.ProtoReflect.Descriptor instead.
func (*Bootstrap) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *Bootstrap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bootstrap) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Bootstrap) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Bootstrap) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Config_Mailer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Config_Address     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Smtp    *Config_Mailer_Smtp `protobuf:"bytes,2,opt,name=smtp,proto3" json:"smtp,omitempty"`
}

func (x *Config_Mailer) Reset() {
	*x = Config_Mailer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Mailer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Mailer) ProtoMessage() {}

func (x *Config_Mailer) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Mailer.ProtoReflect.Descriptor instead.
func (*Config_Mailer) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Config_Mailer) GetAddress() *Config_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Config_Mailer) GetSmtp() *Config_Mailer_Smtp {
	if x != nil {
		return x.Smtp
	}
	return nil
}

type Config_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Config_Address) Reset() {
	*x = Config_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Address) ProtoMessage() {}

func (x *Config_Address) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Address.ProtoReflect.Descriptor instead.
func (*Config_Address) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Config_Address) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config_Address) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Config_Mailer_Smtp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Types that are assignable to Auth:
	//
	//	*Config_Mailer_Smtp_Anonymous
	//	*Config_Mailer_Smtp_Plain
	//	*Config_Mailer_Smtp_OauthBearer
	Auth isConfig_Mailer_Smtp_Auth `protobuf_oneof:"auth"`
}

func (x *Config_Mailer_Smtp) Reset() {
	*x = Config_Mailer_Smtp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Mailer_Smtp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Mailer_Smtp) ProtoMessage() {}

func (x *Config_Mailer_Smtp) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Mailer_Smtp.ProtoReflect.Descriptor instead.
func (*Config_Mailer_Smtp) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Config_Mailer_Smtp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Config_Mailer_Smtp) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (m *Config_Mailer_Smtp) GetAuth() isConfig_Mailer_Smtp_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (x *Config_Mailer_Smtp) GetAnonymous() *Config_Mailer_Anonymous {
	if x, ok := x.GetAuth().(*Config_Mailer_Smtp_Anonymous); ok {
		return x.Anonymous
	}
	return nil
}

func (x *Config_Mailer_Smtp) GetPlain() *Config_Mailer_Plain {
	if x, ok := x.GetAuth().(*Config_Mailer_Smtp_Plain); ok {
		return x.Plain
	}
	return nil
}

func (x *Config_Mailer_Smtp) GetOauthBearer() *Config_Mailer_OauthBearer {
	if x, ok := x.GetAuth().(*Config_Mailer_Smtp_OauthBearer); ok {
		return x.OauthBearer
	}
	return nil
}

type isConfig_Mailer_Smtp_Auth interface {
	isConfig_Mailer_Smtp_Auth()
}

type Config_Mailer_Smtp_Anonymous struct {
	Anonymous *Config_Mailer_Anonymous `protobuf:"bytes,3,opt,name=anonymous,proto3,oneof"`
}

type Config_Mailer_Smtp_Plain struct {
	Plain *Config_Mailer_Plain `protobuf:"bytes,4,opt,name=plain,proto3,oneof"`
}

type Config_Mailer_Smtp_OauthBearer struct {
	OauthBearer *Config_Mailer_OauthBearer `protobuf:"bytes,5,opt,name=oauth_bearer,json=oauthBearer,proto3,oneof"`
}

func (*Config_Mailer_Smtp_Anonymous) isConfig_Mailer_Smtp_Auth() {}

func (*Config_Mailer_Smtp_Plain) isConfig_Mailer_Smtp_Auth() {}

func (*Config_Mailer_Smtp_OauthBearer) isConfig_Mailer_Smtp_Auth() {}

type Config_Mailer_Anonymous struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trace string `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
}

func (x *Config_Mailer_Anonymous) Reset() {
	*x = Config_Mailer_Anonymous{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Mailer_Anonymous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Mailer_Anonymous) ProtoMessage() {}

func (x *Config_Mailer_Anonymous) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Mailer_Anonymous.ProtoReflect.Descriptor instead.
func (*Config_Mailer_Anonymous) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Config_Mailer_Anonymous) GetTrace() string {
	if x != nil {
		return x.Trace
	}
	return ""
}

type Config_Mailer_Plain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Config_Mailer_Plain) Reset() {
	*x = Config_Mailer_Plain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Mailer_Plain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Mailer_Plain) ProtoMessage() {}

func (x *Config_Mailer_Plain) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Mailer_Plain.ProtoReflect.Descriptor instead.
func (*Config_Mailer_Plain) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Config_Mailer_Plain) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *Config_Mailer_Plain) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_Mailer_Plain) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Config_Mailer_OauthBearer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Config_Mailer_OauthBearer) Reset() {
	*x = Config_Mailer_OauthBearer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Mailer_OauthBearer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Mailer_OauthBearer) ProtoMessage() {}

func (x *Config_Mailer_OauthBearer) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Mailer_OauthBearer.ProtoReflect.Descriptor instead.
func (*Config_Mailer_OauthBearer) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Config_Mailer_OauthBearer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_Mailer_OauthBearer) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Config_Mailer_OauthBearer) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Config_Mailer_OauthBearer) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Secrets_KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey  string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *Secrets_KeyPair) Reset() {
	*x = Secrets_KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secrets_KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secrets_KeyPair) ProtoMessage() {}

func (x *Secrets_KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secrets_KeyPair.ProtoReflect.Descriptor instead.
func (*Secrets_KeyPair) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Secrets_KeyPair) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Secrets_KeyPair) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type Firewall_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//
	//	*Firewall_Match_Ip
	Match isFirewall_Match_Match `protobuf_oneof:"match"`
}

func (x *Firewall_Match) Reset() {
	*x = Firewall_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firewall_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firewall_Match) ProtoMessage() {}

func (x *Firewall_Match) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firewall_Match.ProtoReflect.Descriptor instead.
func (*Firewall_Match) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4, 0}
}

func (m *Firewall_Match) GetMatch() isFirewall_Match_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *Firewall_Match) GetIp() *Firewall_IP {
	if x, ok := x.GetMatch().(*Firewall_Match_Ip); ok {
		return x.Ip
	}
	return nil
}

type isFirewall_Match_Match interface {
	isFirewall_Match_Match()
}

type Firewall_Match_Ip struct {
	Ip *Firewall_IP `protobuf:"bytes,1,opt,name=ip,proto3,oneof"`
}

func (*Firewall_Match_Ip) isFirewall_Match_Match() {}

type Firewall_IP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Firewall_IP) Reset() {
	*x = Firewall_IP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firewall_IP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firewall_IP) ProtoMessage() {}

func (x *Firewall_IP) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firewall_IP.ProtoReflect.Descriptor instead.
func (*Firewall_IP) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Firewall_IP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x0c, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a,
	0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x29, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x2f,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x6c,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x54, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x61, 0x63, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x43,
	0x4d, 0x45, 0x52, 0x04, 0x61, 0x63, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c,
	0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x1a, 0xca, 0x04, 0x0a, 0x06, 0x4d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x73, 0x6d, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x6d, 0x74, 0x70, 0x52, 0x04, 0x73, 0x6d, 0x74, 0x70, 0x1a,
	0xf4, 0x01, 0x0a, 0x04, 0x53, 0x6d, 0x74, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3f, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x21, 0x0a, 0x09, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x1a, 0x5b, 0x0a, 0x05, 0x50, 0x6c, 0x61,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x67, 0x0a, 0x0b, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a,
	0x33, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x26, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x12, 0x07, 0x0a, 0x03, 0x64,
	0x65, 0x76, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x10, 0x02, 0x22, 0x74, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x77, 0x61, 0x72, 0x6e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x6e, 0x6f, 0x10, 0x07,
	0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x12, 0x12,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x22, 0x86, 0x03, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x12, 0x6c, 0x0a, 0x26, 0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x58,
	0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18,
	0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x1f, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x73, 0x61,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x16, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xc2, 0x01, 0x0a, 0x07,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x65, 0x64, 0x32, 0x35, 0x35,
	0x31, 0x39, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x65, 0x64, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x29, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x1a, 0x49, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x22, 0xdd, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xbf, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x05, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x1a, 0x37, 0x0a, 0x05, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x49, 0x50, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x1a, 0x1e, 0x0a, 0x02, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x45, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0x34, 0x0a, 0x04, 0x41, 0x43, 0x4d,
	0x45, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0x63, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_config_proto_goTypes = []interface{}{
	(Config_Env)(0),                   // 0: config.Config.Env
	(Config_LogLevel)(0),              // 1: config.Config.LogLevel
	(*Config)(nil),                    // 2: config.Config
	(*Intervals)(nil),                 // 3: config.Intervals
	(*Secrets)(nil),                   // 4: config.Secrets
	(*Cors)(nil),                      // 5: config.Cors
	(*Firewall)(nil),                  // 6: config.Firewall
	(*TLS)(nil),                       // 7: config.TLS
	(*ACME)(nil),                      // 8: config.ACME
	(*Bootstrap)(nil),                 // 9: config.Bootstrap
	(*Config_Mailer)(nil),             // 10: config.Config.Mailer
	(*Config_Address)(nil),            // 11: config.Config.Address
	(*Config_Mailer_Smtp)(nil),        // 12: config.Config.Mailer.Smtp
	(*Config_Mailer_Anonymous)(nil),   // 13: config.Config.Mailer.Anonymous
	(*Config_Mailer_Plain)(nil),       // 14: config.Config.Mailer.Plain
	(*Config_Mailer_OauthBearer)(nil), // 15: config.Config.Mailer.OauthBearer
	(*Secrets_KeyPair)(nil),           // 16: config.Secrets.KeyPair
	(*Firewall_Match)(nil),            // 17: config.Firewall.Match
	(*Firewall_IP)(nil),               // 18: config.Firewall.IP
	(*durationpb.Duration)(nil),       // 19: google.protobuf.Duration
}
var file_config_proto_depIdxs = []int32{
	0,  // 0: config.Config.env:type_name -> config.Config.Env
	10, // 1: config.Config.mailer:type_name -> config.Config.Mailer
	1,  // 2: config.Config.log_level:type_name -> config.Config.LogLevel
	4,  // 3: config.Config.secrets:type_name -> config.Secrets
	5,  // 4: config.Config.cors:type_name -> config.Cors
	6,  // 5: config.Config.firewall:type_name -> config.Firewall
	3,  // 6: config.Config.intervals:type_name -> config.Intervals
	8,  // 7: config.Config.acme:type_name -> config.ACME
	7,  // 8: config.Config.tls:type_name -> config.TLS
	9,  // 9: config.Config.bootstrap:type_name -> config.Bootstrap
	19, // 10: config.Intervals.sites_by_domain_cache_refresh_interval:type_name -> google.protobuf.Duration
	19, // 11: config.Intervals.log_rotation_check_interval:type_name -> google.protobuf.Duration
	19, // 12: config.Intervals.save_timeseries_buffer_interval:type_name -> google.protobuf.Duration
	19, // 13: config.Intervals.system_scrape_interval:type_name -> google.protobuf.Duration
	16, // 14: config.Secrets.ed25519_key_pair:type_name -> config.Secrets.KeyPair
	16, // 15: config.Secrets.age:type_name -> config.Secrets.KeyPair
	17, // 16: config.Firewall.block:type_name -> config.Firewall.Match
	17, // 17: config.Firewall.allow:type_name -> config.Firewall.Match
	11, // 18: config.Config.Mailer.address:type_name -> config.Config.Address
	12, // 19: config.Config.Mailer.smtp:type_name -> config.Config.Mailer.Smtp
	13, // 20: config.Config.Mailer.Smtp.anonymous:type_name -> config.Config.Mailer.Anonymous
	14, // 21: config.Config.Mailer.Smtp.plain:type_name -> config.Config.Mailer.Plain
	15, // 22: config.Config.Mailer.Smtp.oauth_bearer:type_name -> config.Config.Mailer.OauthBearer
	18, // 23: config.Firewall.Match.ip:type_name -> config.Firewall.IP
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intervals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firewall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACME); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bootstrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Mailer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Mailer_Smtp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Mailer_Anonymous); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Mailer_Plain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Mailer_OauthBearer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secrets_KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firewall_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firewall_IP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Config_Mailer_Smtp_Anonymous)(nil),
		(*Config_Mailer_Smtp_Plain)(nil),
		(*Config_Mailer_Smtp_OauthBearer)(nil),
	}
	file_config_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Firewall_Match_Ip)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
