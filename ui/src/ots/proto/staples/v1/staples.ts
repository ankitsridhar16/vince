// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "staples/v1/staples.proto" (package "v1", syntax proto3)
// tslint:disable
import { Event } from "./base";
import { Empty } from "../../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../google/protobuf/duration";
/**
 * @generated from protobuf message v1.Version
 */
export interface Version {
    /**
     * @generated from protobuf field: string version = 1;
     */
    version: string;
}
/**
 * @generated from protobuf message v1.Config
 */
export interface Config {
    /**
     * @generated from protobuf field: string data = 1;
     */
    data: string;
    /**
     * @generated from protobuf field: string listen = 2;
     */
    listen: string;
    /**
     * @generated from protobuf field: double rate_limit = 3;
     */
    rateLimit: number;
    /**
     * @generated from protobuf field: google.protobuf.Duration ttl = 4;
     */
    ttl?: Duration;
    /**
     * @generated from protobuf field: int64 granule_size = 5;
     */
    granuleSize: bigint;
    /**
     * @generated from protobuf field: int64 max_sample_size = 6;
     */
    maxSampleSize: bigint;
    /**
     * Path to the geoiip database used to set web analytics country attribute.
     *
     * @generated from protobuf field: string geoip_db_path = 8;
     */
    geoipDbPath: string;
}
/**
 * @generated from protobuf message v1.PrimaryIndex
 */
export interface PrimaryIndex {
    /**
     * @generated from protobuf field: map<string, v1.PrimaryIndex.Resource> resources = 1;
     */
    resources: {
        [key: string]: PrimaryIndex_Resource;
    };
}
/**
 * @generated from protobuf message v1.PrimaryIndex.Resource
 */
export interface PrimaryIndex_Resource {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: map<string, v1.Granule> granules = 2;
     */
    granules: {
        [key: string]: Granule;
    };
}
/**
 * @generated from protobuf message v1.Granule
 */
export interface Granule {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: uint64 min = 2;
     */
    min: bigint;
    /**
     * @generated from protobuf field: uint64 max = 3;
     */
    max: bigint;
    /**
     * @generated from protobuf field: uint64 size = 4;
     */
    size: bigint;
    /**
     * @generated from protobuf field: uint64 rows = 5;
     */
    rows: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Version$Type extends MessageType<Version> {
    constructor() {
        super("v1.Version", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Version>): Version {
        const message = { version: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Version>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Version): Version {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Version, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Version
 */
export const Version = new Version$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType<Config> {
    constructor() {
        super("v1.Config", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "listen", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true } } },
            { no: 3, name: "rate_limit", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/, options: { "buf.validate.field": { required: true } } },
            { no: 4, name: "ttl", kind: "message", T: () => Duration, options: { "buf.validate.field": { required: true } } },
            { no: 5, name: "granule_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "buf.validate.field": { required: true } } },
            { no: 6, name: "max_sample_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "buf.validate.field": { required: true } } },
            { no: 8, name: "geoip_db_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Config>): Config {
        const message = { data: "", listen: "", rateLimit: 0, granuleSize: 0n, maxSampleSize: 0n, geoipDbPath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config): Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data */ 1:
                    message.data = reader.string();
                    break;
                case /* string listen */ 2:
                    message.listen = reader.string();
                    break;
                case /* double rate_limit */ 3:
                    message.rateLimit = reader.double();
                    break;
                case /* google.protobuf.Duration ttl */ 4:
                    message.ttl = Duration.internalBinaryRead(reader, reader.uint32(), options, message.ttl);
                    break;
                case /* int64 granule_size */ 5:
                    message.granuleSize = reader.int64().toBigInt();
                    break;
                case /* int64 max_sample_size */ 6:
                    message.maxSampleSize = reader.int64().toBigInt();
                    break;
                case /* string geoip_db_path */ 8:
                    message.geoipDbPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data = 1; */
        if (message.data !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        /* string listen = 2; */
        if (message.listen !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.listen);
        /* double rate_limit = 3; */
        if (message.rateLimit !== 0)
            writer.tag(3, WireType.Bit64).double(message.rateLimit);
        /* google.protobuf.Duration ttl = 4; */
        if (message.ttl)
            Duration.internalBinaryWrite(message.ttl, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 granule_size = 5; */
        if (message.granuleSize !== 0n)
            writer.tag(5, WireType.Varint).int64(message.granuleSize);
        /* int64 max_sample_size = 6; */
        if (message.maxSampleSize !== 0n)
            writer.tag(6, WireType.Varint).int64(message.maxSampleSize);
        /* string geoip_db_path = 8; */
        if (message.geoipDbPath !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.geoipDbPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Config
 */
export const Config = new Config$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrimaryIndex$Type extends MessageType<PrimaryIndex> {
    constructor() {
        super("v1.PrimaryIndex", [
            { no: 1, name: "resources", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => PrimaryIndex_Resource } }
        ]);
    }
    create(value?: PartialMessage<PrimaryIndex>): PrimaryIndex {
        const message = { resources: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrimaryIndex>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrimaryIndex): PrimaryIndex {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, v1.PrimaryIndex.Resource> resources */ 1:
                    this.binaryReadMap1(message.resources, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: PrimaryIndex["resources"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PrimaryIndex["resources"] | undefined, val: PrimaryIndex["resources"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = PrimaryIndex_Resource.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field v1.PrimaryIndex.resources");
            }
        }
        map[key ?? ""] = val ?? PrimaryIndex_Resource.create();
    }
    internalBinaryWrite(message: PrimaryIndex, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, v1.PrimaryIndex.Resource> resources = 1; */
        for (let k of Object.keys(message.resources)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            PrimaryIndex_Resource.internalBinaryWrite(message.resources[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.PrimaryIndex
 */
export const PrimaryIndex = new PrimaryIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrimaryIndex_Resource$Type extends MessageType<PrimaryIndex_Resource> {
    constructor() {
        super("v1.PrimaryIndex.Resource", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "granules", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Granule } }
        ]);
    }
    create(value?: PartialMessage<PrimaryIndex_Resource>): PrimaryIndex_Resource {
        const message = { name: "", granules: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrimaryIndex_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrimaryIndex_Resource): PrimaryIndex_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* map<string, v1.Granule> granules */ 2:
                    this.binaryReadMap2(message.granules, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: PrimaryIndex_Resource["granules"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PrimaryIndex_Resource["granules"] | undefined, val: PrimaryIndex_Resource["granules"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Granule.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field v1.PrimaryIndex.Resource.granules");
            }
        }
        map[key ?? ""] = val ?? Granule.create();
    }
    internalBinaryWrite(message: PrimaryIndex_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* map<string, v1.Granule> granules = 2; */
        for (let k of Object.keys(message.granules)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Granule.internalBinaryWrite(message.granules[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.PrimaryIndex.Resource
 */
export const PrimaryIndex_Resource = new PrimaryIndex_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Granule$Type extends MessageType<Granule> {
    constructor() {
        super("v1.Granule", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "min", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "max", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "rows", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Granule>): Granule {
        const message = { id: "", min: 0n, max: 0n, size: 0n, rows: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Granule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Granule): Granule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* uint64 min */ 2:
                    message.min = reader.uint64().toBigInt();
                    break;
                case /* uint64 max */ 3:
                    message.max = reader.uint64().toBigInt();
                    break;
                case /* uint64 size */ 4:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* uint64 rows */ 5:
                    message.rows = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Granule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* uint64 min = 2; */
        if (message.min !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.min);
        /* uint64 max = 3; */
        if (message.max !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.max);
        /* uint64 size = 4; */
        if (message.size !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.size);
        /* uint64 rows = 5; */
        if (message.rows !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.rows);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Granule
 */
export const Granule = new Granule$Type();
/**
 * @generated ServiceType for protobuf service v1.Staples
 */
export const Staples = new ServiceType("v1.Staples", [
    { name: "Build", options: { "google.api.http": { get: "/api/v1/version" } }, I: Empty, O: Version },
    { name: "SendEvent", options: { "google.api.http": { post: "/api/event", body: "*" } }, I: Event, O: Empty }
]);
