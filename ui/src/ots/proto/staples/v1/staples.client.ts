// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "staples/v1/staples.proto" (package "v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Staples } from "./staples";
import type { Event } from "./base";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Version } from "./staples";
import type { Empty } from "../../google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service v1.Staples
 */
export interface IStaplesClient {
    /**
     * Build returns version details of the current ots binary.
     *
     * @generated from protobuf rpc: Build(google.protobuf.Empty) returns (v1.Version);
     */
    build(input: Empty, options?: RpcOptions): UnaryCall<Empty, Version>;
    /**
     * @generated from protobuf rpc: SendEvent(v1.Event) returns (google.protobuf.Empty);
     */
    sendEvent(input: Event, options?: RpcOptions): UnaryCall<Event, Empty>;
}
/**
 * @generated from protobuf service v1.Staples
 */
export class StaplesClient implements IStaplesClient, ServiceInfo {
    typeName = Staples.typeName;
    methods = Staples.methods;
    options = Staples.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Build returns version details of the current ots binary.
     *
     * @generated from protobuf rpc: Build(google.protobuf.Empty) returns (v1.Version);
     */
    build(input: Empty, options?: RpcOptions): UnaryCall<Empty, Version> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Version>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendEvent(v1.Event) returns (google.protobuf.Empty);
     */
    sendEvent(input: Event, options?: RpcOptions): UnaryCall<Event, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Event, Empty>("unary", this._transport, method, opt, input);
    }
}
