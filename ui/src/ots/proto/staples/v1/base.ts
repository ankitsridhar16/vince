// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "staples/v1/base.proto" (package "v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message v1.ScanRequest
 */
export interface ScanRequest {
    /**
     * @generated from protobuf field: v1.TimeRange timestamp = 1;
     */
    timestamp?: TimeRange;
    /**
     * @generated from protobuf field: v1.Filters filters = 2;
     */
    filters?: Filters;
}
/**
 * @generated from protobuf message v1.ScanResponse
 */
export interface ScanResponse {
    /**
     * @generated from protobuf field: bytes record = 1;
     */
    record: Uint8Array;
}
/**
 * @generated from protobuf message v1.TimeRange
 */
export interface TimeRange {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp start = 1;
     */
    start?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp end = 2;
     */
    end?: Timestamp;
}
/**
 * @generated from protobuf message v1.KeyValue
 */
export interface KeyValue {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message v1.Filters
 */
export interface Filters {
    /**
     * @generated from protobuf field: repeated v1.Filter list = 1;
     */
    list: Filter[];
    /**
     * columns returned
     *
     * @generated from protobuf field: repeated v1.Filters.Projection projection = 2;
     */
    projection: Filters_Projection[];
}
/**
 * @generated from protobuf enum v1.Filters.Projection
 */
export enum Filters_Projection {
    /**
     * common
     *
     * @generated from protobuf enum value: ResourceSchema = 0;
     */
    ResourceSchema = 0,
    /**
     * @generated from protobuf enum value: ResourceAttributes = 2;
     */
    ResourceAttributes = 2,
    /**
     * @generated from protobuf enum value: ScopeName = 3;
     */
    ScopeName = 3,
    /**
     * @generated from protobuf enum value: ScopeSchema = 4;
     */
    ScopeSchema = 4,
    /**
     * @generated from protobuf enum value: ScopeVersion = 5;
     */
    ScopeVersion = 5,
    /**
     * @generated from protobuf enum value: ScopeAttributes = 6;
     */
    ScopeAttributes = 6,
    /**
     * @generated from protobuf enum value: Flags = 14;
     */
    Flags = 14,
    /**
     * @generated from protobuf enum value: ResourceHash = 28;
     */
    ResourceHash = 28,
    /**
     * @generated from protobuf enum value: ScopeHash = 29;
     */
    ScopeHash = 29,
    /**
     * @generated from protobuf enum value: Hash = 30;
     */
    Hash = 30,
    /**
     * metrics
     *
     * @generated from protobuf enum value: Name = 7;
     */
    Name = 7,
    /**
     * @generated from protobuf enum value: Description = 8;
     */
    Description = 8,
    /**
     * @generated from protobuf enum value: Unit = 9;
     */
    Unit = 9,
    /**
     * @generated from protobuf enum value: StartTimeUnixNano = 10;
     */
    StartTimeUnixNano = 10,
    /**
     * @generated from protobuf enum value: TimeUnixNano = 11;
     */
    TimeUnixNano = 11,
    /**
     * @generated from protobuf enum value: Data = 12;
     */
    Data = 12,
    /**
     * @generated from protobuf enum value: Exemplars = 13;
     */
    Exemplars = 13,
    /**
     * logs
     *
     * @generated from protobuf enum value: ObservedTimeUnixNano = 15;
     */
    ObservedTimeUnixNano = 15,
    /**
     * @generated from protobuf enum value: SeverityNumber = 16;
     */
    SeverityNumber = 16,
    /**
     * @generated from protobuf enum value: SeverityText = 17;
     */
    SeverityText = 17,
    /**
     * @generated from protobuf enum value: Body = 18;
     */
    Body = 18,
    /**
     * @generated from protobuf enum value: TraceID = 19;
     */
    TraceID = 19,
    /**
     * @generated from protobuf enum value: SpanID = 20;
     */
    SpanID = 20,
    /**
     * trace
     *
     * @generated from protobuf enum value: TraceState = 21;
     */
    TraceState = 21,
    /**
     * @generated from protobuf enum value: ParentSpanID = 22;
     */
    ParentSpanID = 22,
    /**
     * @generated from protobuf enum value: Kind = 23;
     */
    Kind = 23,
    /**
     * @generated from protobuf enum value: EndTimeUnixNano = 24;
     */
    EndTimeUnixNano = 24,
    /**
     * @generated from protobuf enum value: Events = 25;
     */
    Events = 25,
    /**
     * @generated from protobuf enum value: Links = 26;
     */
    Links = 26,
    /**
     * @generated from protobuf enum value: Status = 27;
     */
    Status = 27
}
/**
 * @generated from protobuf message v1.Filter
 */
export interface Filter {
    /**
     * @generated from protobuf oneof: column
     */
    column: {
        oneofKind: "base";
        /**
         * @generated from protobuf field: v1.Filter.BaseColumn base = 1;
         */
        base: Filter_BaseColumn;
    } | {
        oneofKind: "resourceAttributes";
        /**
         * @generated from protobuf field: string resource_attributes = 2;
         */
        resourceAttributes: string;
    } | {
        oneofKind: "scopeAttributes";
        /**
         * @generated from protobuf field: string scope_attributes = 3;
         */
        scopeAttributes: string;
    } | {
        oneofKind: "attributes";
        /**
         * @generated from protobuf field: string attributes = 4;
         */
        attributes: string;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "equal";
        /**
         * @generated from protobuf field: bytes equal = 5;
         */
        equal: Uint8Array;
    } | {
        oneofKind: "notEqual";
        /**
         * @generated from protobuf field: bytes not_equal = 6;
         */
        notEqual: Uint8Array;
    } | {
        oneofKind: "reEqual";
        /**
         * @generated from protobuf field: bytes re_equal = 7;
         */
        reEqual: Uint8Array;
    } | {
        oneofKind: "reNotEqual";
        /**
         * @generated from protobuf field: bytes re_not_equal = 8;
         */
        reNotEqual: Uint8Array;
    } | {
        oneofKind: "latest";
        /**
         * @generated from protobuf field: v1.Filter.Latest latest = 9;
         */
        latest: Filter_Latest;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message v1.Filter.Latest
 */
export interface Filter_Latest {
}
/**
 * @generated from protobuf enum v1.Filter.BaseColumn
 */
export enum Filter_BaseColumn {
    /**
     * @generated from protobuf enum value: ResourceSchema = 0;
     */
    ResourceSchema = 0,
    /**
     * @generated from protobuf enum value: ScopeName = 1;
     */
    ScopeName = 1,
    /**
     * @generated from protobuf enum value: ScopeSchema = 2;
     */
    ScopeSchema = 2,
    /**
     * @generated from protobuf enum value: ScopeVersion = 3;
     */
    ScopeVersion = 3,
    /**
     * @generated from protobuf enum value: Name = 4;
     */
    Name = 4,
    /**
     * @generated from protobuf enum value: TraceID = 5;
     */
    TraceID = 5,
    /**
     * @generated from protobuf enum value: ResourceHash = 6;
     */
    ResourceHash = 6,
    /**
     * @generated from protobuf enum value: ScopeHash = 7;
     */
    ScopeHash = 7,
    /**
     * @generated from protobuf enum value: Hash = 8;
     */
    Hash = 8
}
/**
 * @generated from protobuf message v1.Event
 */
export interface Event {
    /**
     * / EventName
     *
     * @generated from protobuf field: string n = 1;
     */
    n: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * Domain
     *
     * @generated from protobuf field: string d = 3;
     */
    d: string;
    /**
     * Screen width
     *
     * @generated from protobuf field: int32 w = 4;
     */
    w: number;
    /**
     * Hash mode
     *
     * @generated from protobuf field: bool h = 5;
     */
    h: boolean;
    /**
     * @generated from protobuf field: string ip = 6;
     */
    ip: string;
    /**
     * user agent
     *
     * @generated from protobuf field: string ua = 7;
     */
    ua: string;
    /**
     * Referrer
     *
     * @generated from protobuf field: string r = 8;
     */
    r: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 9;
     */
    timestamp?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class ScanRequest$Type extends MessageType<ScanRequest> {
    constructor() {
        super("v1.ScanRequest", [
            { no: 1, name: "timestamp", kind: "message", T: () => TimeRange, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "filters", kind: "message", T: () => Filters, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<ScanRequest>): ScanRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScanRequest): ScanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.TimeRange timestamp */ 1:
                    message.timestamp = TimeRange.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* v1.Filters filters */ 2:
                    message.filters = Filters.internalBinaryRead(reader, reader.uint32(), options, message.filters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.TimeRange timestamp = 1; */
        if (message.timestamp)
            TimeRange.internalBinaryWrite(message.timestamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* v1.Filters filters = 2; */
        if (message.filters)
            Filters.internalBinaryWrite(message.filters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ScanRequest
 */
export const ScanRequest = new ScanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScanResponse$Type extends MessageType<ScanResponse> {
    constructor() {
        super("v1.ScanResponse", [
            { no: 1, name: "record", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ScanResponse>): ScanResponse {
        const message = { record: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScanResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScanResponse): ScanResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes record */ 1:
                    message.record = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScanResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes record = 1; */
        if (message.record.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.record);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ScanResponse
 */
export const ScanResponse = new ScanResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeRange$Type extends MessageType<TimeRange> {
    constructor() {
        super("v1.TimeRange", [
            { no: 1, name: "start", kind: "message", T: () => Timestamp, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "end", kind: "message", T: () => Timestamp, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<TimeRange>): TimeRange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TimeRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeRange): TimeRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp start */ 1:
                    message.start = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.start);
                    break;
                case /* google.protobuf.Timestamp end */ 2:
                    message.end = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.end);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp start = 1; */
        if (message.start)
            Timestamp.internalBinaryWrite(message.start, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end = 2; */
        if (message.end)
            Timestamp.internalBinaryWrite(message.end, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.TimeRange
 */
export const TimeRange = new TimeRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeyValue$Type extends MessageType<KeyValue> {
    constructor() {
        super("v1.KeyValue", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KeyValue>): KeyValue {
        const message = { key: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeyValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyValue): KeyValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeyValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.KeyValue
 */
export const KeyValue = new KeyValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Filters$Type extends MessageType<Filters> {
    constructor() {
        super("v1.Filters", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Filter },
            { no: 2, name: "projection", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["v1.Filters.Projection", Filters_Projection] }
        ]);
    }
    create(value?: PartialMessage<Filters>): Filters {
        const message = { list: [], projection: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Filters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filters): Filters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated v1.Filter list */ 1:
                    message.list.push(Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated v1.Filters.Projection projection */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.projection.push(reader.int32());
                    else
                        message.projection.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated v1.Filter list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Filter.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated v1.Filters.Projection projection = 2; */
        if (message.projection.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.projection.length; i++)
                writer.int32(message.projection[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Filters
 */
export const Filters = new Filters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Filter$Type extends MessageType<Filter> {
    constructor() {
        super("v1.Filter", [
            { no: 1, name: "base", kind: "enum", oneof: "column", T: () => ["v1.Filter.BaseColumn", Filter_BaseColumn] },
            { no: 2, name: "resource_attributes", kind: "scalar", oneof: "column", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "scope_attributes", kind: "scalar", oneof: "column", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "attributes", kind: "scalar", oneof: "column", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "equal", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "not_equal", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "re_equal", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "re_not_equal", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ },
            { no: 9, name: "latest", kind: "message", oneof: "value", T: () => Filter_Latest }
        ]);
    }
    create(value?: PartialMessage<Filter>): Filter {
        const message = { column: { oneofKind: undefined }, value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter): Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Filter.BaseColumn base */ 1:
                    message.column = {
                        oneofKind: "base",
                        base: reader.int32()
                    };
                    break;
                case /* string resource_attributes */ 2:
                    message.column = {
                        oneofKind: "resourceAttributes",
                        resourceAttributes: reader.string()
                    };
                    break;
                case /* string scope_attributes */ 3:
                    message.column = {
                        oneofKind: "scopeAttributes",
                        scopeAttributes: reader.string()
                    };
                    break;
                case /* string attributes */ 4:
                    message.column = {
                        oneofKind: "attributes",
                        attributes: reader.string()
                    };
                    break;
                case /* bytes equal */ 5:
                    message.value = {
                        oneofKind: "equal",
                        equal: reader.bytes()
                    };
                    break;
                case /* bytes not_equal */ 6:
                    message.value = {
                        oneofKind: "notEqual",
                        notEqual: reader.bytes()
                    };
                    break;
                case /* bytes re_equal */ 7:
                    message.value = {
                        oneofKind: "reEqual",
                        reEqual: reader.bytes()
                    };
                    break;
                case /* bytes re_not_equal */ 8:
                    message.value = {
                        oneofKind: "reNotEqual",
                        reNotEqual: reader.bytes()
                    };
                    break;
                case /* v1.Filter.Latest latest */ 9:
                    message.value = {
                        oneofKind: "latest",
                        latest: Filter_Latest.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).latest)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Filter.BaseColumn base = 1; */
        if (message.column.oneofKind === "base")
            writer.tag(1, WireType.Varint).int32(message.column.base);
        /* string resource_attributes = 2; */
        if (message.column.oneofKind === "resourceAttributes")
            writer.tag(2, WireType.LengthDelimited).string(message.column.resourceAttributes);
        /* string scope_attributes = 3; */
        if (message.column.oneofKind === "scopeAttributes")
            writer.tag(3, WireType.LengthDelimited).string(message.column.scopeAttributes);
        /* string attributes = 4; */
        if (message.column.oneofKind === "attributes")
            writer.tag(4, WireType.LengthDelimited).string(message.column.attributes);
        /* bytes equal = 5; */
        if (message.value.oneofKind === "equal")
            writer.tag(5, WireType.LengthDelimited).bytes(message.value.equal);
        /* bytes not_equal = 6; */
        if (message.value.oneofKind === "notEqual")
            writer.tag(6, WireType.LengthDelimited).bytes(message.value.notEqual);
        /* bytes re_equal = 7; */
        if (message.value.oneofKind === "reEqual")
            writer.tag(7, WireType.LengthDelimited).bytes(message.value.reEqual);
        /* bytes re_not_equal = 8; */
        if (message.value.oneofKind === "reNotEqual")
            writer.tag(8, WireType.LengthDelimited).bytes(message.value.reNotEqual);
        /* v1.Filter.Latest latest = 9; */
        if (message.value.oneofKind === "latest")
            Filter_Latest.internalBinaryWrite(message.value.latest, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Filter
 */
export const Filter = new Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Filter_Latest$Type extends MessageType<Filter_Latest> {
    constructor() {
        super("v1.Filter.Latest", []);
    }
    create(value?: PartialMessage<Filter_Latest>): Filter_Latest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Filter_Latest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter_Latest): Filter_Latest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Filter_Latest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Filter.Latest
 */
export const Filter_Latest = new Filter_Latest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("v1.Event", [
            { no: 1, name: "n", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { uri: true } } } },
            { no: 3, name: "d", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { hostname: true } } } },
            { no: 4, name: "w", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "h", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { ip: true } } } },
            { no: 7, name: "ua", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "r", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = { n: "", url: "", d: "", w: 0, h: false, ip: "", ua: "", r: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string n */ 1:
                    message.n = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string d */ 3:
                    message.d = reader.string();
                    break;
                case /* int32 w */ 4:
                    message.w = reader.int32();
                    break;
                case /* bool h */ 5:
                    message.h = reader.bool();
                    break;
                case /* string ip */ 6:
                    message.ip = reader.string();
                    break;
                case /* string ua */ 7:
                    message.ua = reader.string();
                    break;
                case /* string r */ 8:
                    message.r = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 9:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string n = 1; */
        if (message.n !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.n);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string d = 3; */
        if (message.d !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.d);
        /* int32 w = 4; */
        if (message.w !== 0)
            writer.tag(4, WireType.Varint).int32(message.w);
        /* bool h = 5; */
        if (message.h !== false)
            writer.tag(5, WireType.Varint).bool(message.h);
        /* string ip = 6; */
        if (message.ip !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.ip);
        /* string ua = 7; */
        if (message.ua !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.ua);
        /* string r = 8; */
        if (message.r !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.r);
        /* google.protobuf.Timestamp timestamp = 9; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Event
 */
export const Event = new Event$Type();
