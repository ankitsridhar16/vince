// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/store/v1/store.proto" (package "v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message v1.StoreKey
 */
export interface StoreKey {
    /**
     * @generated from protobuf field: string namespace = 1;
     */
    namespace: string;
    /**
     * @generated from protobuf field: v1.StorePrefix prefix = 2;
     */
    prefix: StorePrefix;
}
/**
 * StorePrefix defines different kind of data we are storing in the key value
 * store.
 *
 * @generated from protobuf enum v1.StorePrefix
 */
export enum StorePrefix {
    /**
     * @generated from protobuf enum value: SITES = 0;
     */
    SITES = 0,
    /**
     * @generated from protobuf enum value: ALERTS = 2;
     */
    ALERTS = 2,
    /**
     * @generated from protobuf enum value: ACCOUNT = 3;
     */
    ACCOUNT = 3,
    /**
     * @generated from protobuf enum value: TOKEN = 4;
     */
    TOKEN = 4,
    /**
     * @generated from protobuf enum value: CLUSTER = 8;
     */
    CLUSTER = 8,
    /**
     * @generated from protobuf enum value: BLOCK_METADATA = 9;
     */
    BLOCK_METADATA = 9,
    /**
     * @generated from protobuf enum value: BLOCK_INDEX = 10;
     */
    BLOCK_INDEX = 10,
    /**
     * @generated from protobuf enum value: OAUTH_CLIENT = 11;
     */
    OAUTH_CLIENT = 11,
    /**
     * @generated from protobuf enum value: OAUTH_AUTHORIZE = 12;
     */
    OAUTH_AUTHORIZE = 12,
    /**
     * @generated from protobuf enum value: OAUTH_ACCESS = 13;
     */
    OAUTH_ACCESS = 13,
    /**
     * @generated from protobuf enum value: OAUTH_REFRESH = 14;
     */
    OAUTH_REFRESH = 14,
    /**
     * @generated from protobuf enum value: SNIPPET = 15;
     */
    SNIPPET = 15,
    /**
     * @generated from protobuf enum value: IMPORT = 16;
     */
    IMPORT = 16,
    /**
     * @generated from protobuf enum value: BASE_STATS = 17;
     */
    BASE_STATS = 17
}
/**
 * Parquet fields used to store events. There are only two phisical data types
 * int64 and string.
 *
 * The columns are grouped by data types for easy access
 *
 * @generated from protobuf enum v1.Column
 */
export enum Column {
    /**
     * @generated from protobuf enum value: bounce = 0;
     */
    bounce = 0,
    /**
     * @generated from protobuf enum value: duration = 1;
     */
    duration = 1,
    /**
     * @generated from protobuf enum value: id = 2;
     */
    id = 2,
    /**
     * @generated from protobuf enum value: session = 3;
     */
    session = 3,
    /**
     * @generated from protobuf enum value: timestamp = 4;
     */
    timestamp = 4,
    /**
     * @generated from protobuf enum value: browser = 5;
     */
    browser = 5,
    /**
     * @generated from protobuf enum value: browser_version = 6;
     */
    browser_version = 6,
    /**
     * @generated from protobuf enum value: city = 7;
     */
    city = 7,
    /**
     * @generated from protobuf enum value: country = 8;
     */
    country = 8,
    /**
     * @generated from protobuf enum value: entry_page = 9;
     */
    entry_page = 9,
    /**
     * @generated from protobuf enum value: event = 10;
     */
    event = 10,
    /**
     * @generated from protobuf enum value: exit_page = 11;
     */
    exit_page = 11,
    /**
     * @generated from protobuf enum value: host = 12;
     */
    host = 12,
    /**
     * @generated from protobuf enum value: os = 13;
     */
    os = 13,
    /**
     * @generated from protobuf enum value: os_version = 14;
     */
    os_version = 14,
    /**
     * @generated from protobuf enum value: path = 15;
     */
    path = 15,
    /**
     * @generated from protobuf enum value: referrer = 16;
     */
    referrer = 16,
    /**
     * @generated from protobuf enum value: referrer_source = 17;
     */
    referrer_source = 17,
    /**
     * @generated from protobuf enum value: region = 18;
     */
    region = 18,
    /**
     * @generated from protobuf enum value: screen = 19;
     */
    screen = 19,
    /**
     * @generated from protobuf enum value: utm_campaign = 20;
     */
    utm_campaign = 20,
    /**
     * @generated from protobuf enum value: utm_content = 21;
     */
    utm_content = 21,
    /**
     * @generated from protobuf enum value: utm_medium = 22;
     */
    utm_medium = 22,
    /**
     * @generated from protobuf enum value: utm_source = 23;
     */
    utm_source = 23,
    /**
     * @generated from protobuf enum value: utm_term = 24;
     */
    utm_term = 24
}
// @generated message type with reflection information, may provide speed optimized methods
class StoreKey$Type extends MessageType<StoreKey> {
    constructor() {
        super("v1.StoreKey", [
            { no: 1, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "prefix", kind: "enum", T: () => ["v1.StorePrefix", StorePrefix] }
        ]);
    }
    create(value?: PartialMessage<StoreKey>): StoreKey {
        const message = { namespace: "", prefix: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoreKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreKey): StoreKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string namespace */ 1:
                    message.namespace = reader.string();
                    break;
                case /* v1.StorePrefix prefix */ 2:
                    message.prefix = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoreKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string namespace = 1; */
        if (message.namespace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namespace);
        /* v1.StorePrefix prefix = 2; */
        if (message.prefix !== 0)
            writer.tag(2, WireType.Varint).int32(message.prefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.StoreKey
 */
export const StoreKey = new StoreKey$Type();
