// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/snippets/v1/snippets.proto" (package "v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Snippets } from "./snippets";
import type { Empty } from "../../../google/protobuf/empty";
import type { DeleteSnippetRequest } from "./snippets";
import type { ListSnippetsResponse } from "./snippets";
import type { ListSnippetsRequest } from "./snippets";
import type { UpdateSnippetResposnes } from "./snippets";
import type { UpdateSnippetRequest } from "./snippets";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateSnippetResponse } from "./snippets";
import type { CreateSnippetRequest } from "./snippets";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service v1.Snippets
 */
export interface ISnippetsClient {
    /**
     * @generated from protobuf rpc: CreateSnippet(v1.CreateSnippetRequest) returns (v1.CreateSnippetResponse);
     */
    createSnippet(input: CreateSnippetRequest, options?: RpcOptions): UnaryCall<CreateSnippetRequest, CreateSnippetResponse>;
    /**
     * @generated from protobuf rpc: UpdateSnippet(v1.UpdateSnippetRequest) returns (v1.UpdateSnippetResposnes);
     */
    updateSnippet(input: UpdateSnippetRequest, options?: RpcOptions): UnaryCall<UpdateSnippetRequest, UpdateSnippetResposnes>;
    /**
     * @generated from protobuf rpc: ListSnippets(v1.ListSnippetsRequest) returns (v1.ListSnippetsResponse);
     */
    listSnippets(input: ListSnippetsRequest, options?: RpcOptions): UnaryCall<ListSnippetsRequest, ListSnippetsResponse>;
    /**
     * @generated from protobuf rpc: DeleteSnippet(v1.DeleteSnippetRequest) returns (google.protobuf.Empty);
     */
    deleteSnippet(input: DeleteSnippetRequest, options?: RpcOptions): UnaryCall<DeleteSnippetRequest, Empty>;
}
/**
 * @generated from protobuf service v1.Snippets
 */
export class SnippetsClient implements ISnippetsClient, ServiceInfo {
    typeName = Snippets.typeName;
    methods = Snippets.methods;
    options = Snippets.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateSnippet(v1.CreateSnippetRequest) returns (v1.CreateSnippetResponse);
     */
    createSnippet(input: CreateSnippetRequest, options?: RpcOptions): UnaryCall<CreateSnippetRequest, CreateSnippetResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateSnippetRequest, CreateSnippetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateSnippet(v1.UpdateSnippetRequest) returns (v1.UpdateSnippetResposnes);
     */
    updateSnippet(input: UpdateSnippetRequest, options?: RpcOptions): UnaryCall<UpdateSnippetRequest, UpdateSnippetResposnes> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateSnippetRequest, UpdateSnippetResposnes>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListSnippets(v1.ListSnippetsRequest) returns (v1.ListSnippetsResponse);
     */
    listSnippets(input: ListSnippetsRequest, options?: RpcOptions): UnaryCall<ListSnippetsRequest, ListSnippetsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListSnippetsRequest, ListSnippetsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteSnippet(v1.DeleteSnippetRequest) returns (google.protobuf.Empty);
     */
    deleteSnippet(input: DeleteSnippetRequest, options?: RpcOptions): UnaryCall<DeleteSnippetRequest, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteSnippetRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
