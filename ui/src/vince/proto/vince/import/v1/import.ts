// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/import/v1/import.proto" (package "v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message v1.ImportData
 */
export interface ImportData {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: string created_by = 2;
     */
    createdBy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
}
/**
 * @generated from protobuf message v1.ImportRequest
 */
export interface ImportRequest {
    /**
     * @generated from protobuf field: v1.Schema schema = 1;
     */
    schema?: Schema;
    /**
     * @generated from protobuf field: bytes csv = 2;
     */
    csv: Uint8Array;
}
/**
 * @generated from protobuf message v1.ImportResponse
 */
export interface ImportResponse {
}
/**
 * Schema defines the structure of a csv file. This maps directly to arrow
 * schema, we limit the datatypes of fields to reflect the datatypes supported
 * by the sites table schema.
 *
 * Sites schema doesn't have bool fields, bool is included due to its useful
 * nature when doing joins.
 *
 * @generated from protobuf message v1.Schema
 */
export interface Schema {
    /**
     * The name of the schema. This serves as database table name when querying
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated v1.Schema.Field fields = 2;
     */
    fields: Schema_Field[];
}
/**
 * @generated from protobuf message v1.Schema.Field
 */
export interface Schema_Field {
    /**
     * @generated from protobuf field: v1.Schema.FieldType type = 1;
     */
    type: Schema_FieldType;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf enum v1.Schema.FieldType
 */
export enum Schema_FieldType {
    /**
     * @generated from protobuf enum value: INT64 = 0;
     */
    INT64 = 0,
    /**
     * @generated from protobuf enum value: FLOAT64 = 1;
     */
    FLOAT64 = 1,
    /**
     * @generated from protobuf enum value: STRING = 2;
     */
    STRING = 2,
    /**
     * @generated from protobuf enum value: BOOL = 3;
     */
    BOOL = 3,
    /**
     * @generated from protobuf enum value: TIMESTAMP = 4;
     */
    TIMESTAMP = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class ImportData$Type extends MessageType<ImportData> {
    constructor() {
        super("v1.ImportData", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ImportData>): ImportData {
        const message = { data: new Uint8Array(0), createdBy: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImportData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportData): ImportData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                case /* string created_by */ 2:
                    message.createdBy = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* string created_by = 2; */
        if (message.createdBy !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.createdBy);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ImportData
 */
export const ImportData = new ImportData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportRequest$Type extends MessageType<ImportRequest> {
    constructor() {
        super("v1.ImportRequest", [
            { no: 1, name: "schema", kind: "message", T: () => Schema, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "csv", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<ImportRequest>): ImportRequest {
        const message = { csv: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportRequest): ImportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Schema schema */ 1:
                    message.schema = Schema.internalBinaryRead(reader, reader.uint32(), options, message.schema);
                    break;
                case /* bytes csv */ 2:
                    message.csv = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Schema schema = 1; */
        if (message.schema)
            Schema.internalBinaryWrite(message.schema, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes csv = 2; */
        if (message.csv.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.csv);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ImportRequest
 */
export const ImportRequest = new ImportRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportResponse$Type extends MessageType<ImportResponse> {
    constructor() {
        super("v1.ImportResponse", []);
    }
    create(value?: PartialMessage<ImportResponse>): ImportResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ImportResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportResponse): ImportResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ImportResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ImportResponse
 */
export const ImportResponse = new ImportResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Schema$Type extends MessageType<Schema> {
    constructor() {
        super("v1.Schema", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Schema_Field, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<Schema>): Schema {
        const message = { name: "", fields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Schema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Schema): Schema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated v1.Schema.Field fields */ 2:
                    message.fields.push(Schema_Field.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Schema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated v1.Schema.Field fields = 2; */
        for (let i = 0; i < message.fields.length; i++)
            Schema_Field.internalBinaryWrite(message.fields[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Schema
 */
export const Schema = new Schema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Schema_Field$Type extends MessageType<Schema_Field> {
    constructor() {
        super("v1.Schema.Field", [
            { no: 1, name: "type", kind: "enum", T: () => ["v1.Schema.FieldType", Schema_FieldType] },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Schema_Field>): Schema_Field {
        const message = { type: 0, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Schema_Field>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Schema_Field): Schema_Field {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Schema.FieldType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Schema_Field, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Schema.FieldType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Schema.Field
 */
export const Schema_Field = new Schema_Field$Type();
/**
 * @generated ServiceType for protobuf service v1.Import
 */
export const Import = new ServiceType("v1.Import", [
    { name: "Import", options: { "google.api.http": { post: "/v1/import" } }, I: ImportRequest, O: ImportResponse }
]);
