// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/events/v1/events.proto" (package "v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Events } from "./events";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "../../../google/protobuf/empty";
import type { Event } from "./events";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service v1.Events
 */
export interface IEventsClient {
    /**
     * @generated from protobuf rpc: SendEvent(v1.Event) returns (google.protobuf.Empty);
     */
    sendEvent(input: Event, options?: RpcOptions): UnaryCall<Event, Empty>;
}
/**
 * @generated from protobuf service v1.Events
 */
export class EventsClient implements IEventsClient, ServiceInfo {
    typeName = Events.typeName;
    methods = Events.methods;
    options = Events.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SendEvent(v1.Event) returns (google.protobuf.Empty);
     */
    sendEvent(input: Event, options?: RpcOptions): UnaryCall<Event, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Event, Empty>("unary", this._transport, method, opt, input);
    }
}
