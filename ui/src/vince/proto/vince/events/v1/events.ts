// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/events/v1/events.proto" (package "v1", syntax proto3)
// tslint:disable
import { Empty } from "../../../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message v1.Event
 */
export interface Event {
    /**
     * / EventName
     *
     * @generated from protobuf field: string n = 1;
     */
    n: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * Domain
     *
     * @generated from protobuf field: string d = 3;
     */
    d: string;
    /**
     * Screen width
     *
     * @generated from protobuf field: int32 w = 4;
     */
    w: number;
    /**
     * Hash mode
     *
     * @generated from protobuf field: bool h = 5;
     */
    h: boolean;
    /**
     * @generated from protobuf field: string ip = 6;
     */
    ip: string;
    /**
     * user agent
     *
     * @generated from protobuf field: string ua = 7;
     */
    ua: string;
    /**
     * Referrer
     *
     * @generated from protobuf field: string r = 8;
     */
    r: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("v1.Event", [
            { no: 1, name: "n", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { uri: true } } } },
            { no: 3, name: "d", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { hostname: true } } } },
            { no: 4, name: "w", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "h", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { ip: true } } } },
            { no: 7, name: "ua", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "r", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = { n: "", url: "", d: "", w: 0, h: false, ip: "", ua: "", r: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string n */ 1:
                    message.n = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string d */ 3:
                    message.d = reader.string();
                    break;
                case /* int32 w */ 4:
                    message.w = reader.int32();
                    break;
                case /* bool h */ 5:
                    message.h = reader.bool();
                    break;
                case /* string ip */ 6:
                    message.ip = reader.string();
                    break;
                case /* string ua */ 7:
                    message.ua = reader.string();
                    break;
                case /* string r */ 8:
                    message.r = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string n = 1; */
        if (message.n !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.n);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string d = 3; */
        if (message.d !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.d);
        /* int32 w = 4; */
        if (message.w !== 0)
            writer.tag(4, WireType.Varint).int32(message.w);
        /* bool h = 5; */
        if (message.h !== false)
            writer.tag(5, WireType.Varint).bool(message.h);
        /* string ip = 6; */
        if (message.ip !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.ip);
        /* string ua = 7; */
        if (message.ua !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.ua);
        /* string r = 8; */
        if (message.r !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.r);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Event
 */
export const Event = new Event$Type();
/**
 * @generated ServiceType for protobuf service v1.Events
 */
export const Events = new ServiceType("v1.Events", [
    { name: "SendEvent", options: { "google.api.http": { post: "/api/event" } }, I: Event, O: Empty }
]);
