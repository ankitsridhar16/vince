// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/api/v1/api.proto" (package "v1", syntax proto3)
// tslint:disable
import { Build } from "../../config/v1/config";
import { Empty } from "../../../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Cluster_Config } from "../../config/v1/config";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Client_Auth } from "../../config/v1/config";
import { Duration } from "../../../google/protobuf/duration";
/**
 * @generated from protobuf message v1.Token
 */
export interface Token {
    /**
     * @generated from protobuf field: bytes pub_key = 1;
     */
    pubKey: Uint8Array;
}
/**
 * @generated from protobuf enum v1.Token.Issuer
 */
export enum Token_Issuer {
    /**
     * @generated from protobuf enum value: SERVER = 0;
     */
    SERVER = 0,
    /**
     * @generated from protobuf enum value: CLIENT = 1;
     */
    CLIENT = 1
}
/**
 * Defines the resources that this token has access to
 *
 * @generated from protobuf enum v1.Token.Scope
 */
export enum Token_Scope {
    /**
     * Token has access to all vince resources
     *
     * @generated from protobuf enum value: ALL = 0;
     */
    ALL = 0,
    /**
     * Token  has access to only cluster resources.
     *
     * @generated from protobuf enum value: CLUSTER = 2;
     */
    CLUSTER = 2
}
/**
 * @generated from protobuf message v1.CreateTokenRequest
 */
export interface CreateTokenRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string token = 3;
     */
    token: string;
    /**
     * @generated from protobuf field: bytes public_key = 4;
     */
    publicKey: Uint8Array;
    /**
     * When true, the token will be generated by the server.
     *
     * @generated from protobuf field: bool generate = 5;
     */
    generate: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Duration ttl = 6;
     */
    ttl?: Duration;
}
/**
 * @generated from protobuf message v1.CreateTokenResponse
 */
export interface CreateTokenResponse {
    /**
     * @generated from protobuf field: v1.Client.Auth auth = 1;
     */
    auth?: Client_Auth;
}
/**
 * @generated from protobuf message v1.Site
 */
export interface Site {
    /**
     * @generated from protobuf field: string domain = 1;
     */
    domain: string;
}
/**
 * @generated from protobuf message v1.CreateSiteRequest
 */
export interface CreateSiteRequest {
    /**
     * @generated from protobuf field: string domain = 1;
     */
    domain: string;
}
/**
 * @generated from protobuf message v1.CreateSiteResponse
 */
export interface CreateSiteResponse {
    /**
     * @generated from protobuf field: v1.Site site = 1;
     */
    site?: Site;
}
/**
 * @generated from protobuf message v1.GetSiteRequest
 */
export interface GetSiteRequest {
}
/**
 * @generated from protobuf message v1.GetSiteResponse
 */
export interface GetSiteResponse {
    /**
     * @generated from protobuf field: v1.Site site = 1;
     */
    site?: Site;
}
/**
 * @generated from protobuf message v1.ListSitesRequest
 */
export interface ListSitesRequest {
}
/**
 * @generated from protobuf message v1.ListSitesResponse
 */
export interface ListSitesResponse {
    /**
     * @generated from protobuf field: repeated v1.Site list = 1;
     */
    list: Site[];
}
/**
 * @generated from protobuf message v1.DeleteSiteRequest
 */
export interface DeleteSiteRequest {
    /**
     * @generated from protobuf field: string domain = 1;
     */
    domain: string;
}
/**
 * @generated from protobuf message v1.DeleteSiteResponse
 */
export interface DeleteSiteResponse {
}
/**
 * @generated from protobuf message v1.Account
 */
export interface Account {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: bytes hashed_password = 2;
     */
    hashedPassword: Uint8Array;
}
/**
 * @generated from protobuf message v1.Error
 */
export interface Error {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
    /**
     * @generated from protobuf field: int32 code = 2;
     */
    code: number;
}
/**
 * @generated from protobuf message v1.Query
 */
export interface Query {
}
/**
 * @generated from protobuf message v1.Query.Value
 */
export interface Query_Value {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "number";
        /**
         * @generated from protobuf field: int64 number = 1;
         */
        number: bigint;
    } | {
        oneofKind: "double";
        /**
         * @generated from protobuf field: double double = 2;
         */
        double: number;
    } | {
        oneofKind: "string";
        /**
         * @generated from protobuf field: string string = 3;
         */
        string: string;
    } | {
        oneofKind: "bool";
        /**
         * @generated from protobuf field: bool bool = 4;
         */
        bool: boolean;
    } | {
        oneofKind: "timestamp";
        /**
         * @generated from protobuf field: google.protobuf.Timestamp timestamp = 5;
         */
        timestamp: Timestamp;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message v1.Query.Param
 */
export interface Query_Param {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: v1.Query.Value value = 2;
     */
    value?: Query_Value;
}
/**
 * @generated from protobuf message v1.Query.Colum
 */
export interface Query_Colum {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: v1.Query.Colum.DataType data_type = 2;
     */
    dataType: Query_Colum_DataType;
}
/**
 * @generated from protobuf enum v1.Query.Colum.DataType
 */
export enum Query_Colum_DataType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: NUMBER = 1;
     */
    NUMBER = 1,
    /**
     * @generated from protobuf enum value: DOUBLE = 2;
     */
    DOUBLE = 2,
    /**
     * @generated from protobuf enum value: STRING = 3;
     */
    STRING = 3,
    /**
     * @generated from protobuf enum value: BOOL = 4;
     */
    BOOL = 4,
    /**
     * @generated from protobuf enum value: TIMESTAMP = 5;
     */
    TIMESTAMP = 5
}
/**
 * @generated from protobuf message v1.Query.Row
 */
export interface Query_Row {
    /**
     * @generated from protobuf field: repeated v1.Query.Value values = 1;
     */
    values: Query_Value[];
}
/**
 * @generated from protobuf message v1.QueryRequest
 */
export interface QueryRequest {
    /**
     * @generated from protobuf field: string query = 1;
     */
    query: string;
    /**
     * @generated from protobuf field: repeated v1.Query.Param params = 2;
     */
    params: Query_Param[];
}
/**
 * @generated from protobuf message v1.QueryResponse
 */
export interface QueryResponse {
    /**
     * @generated from protobuf field: google.protobuf.Duration elapsed = 1;
     */
    elapsed?: Duration;
    /**
     * @generated from protobuf field: repeated v1.Query.Colum columns = 2;
     */
    columns: Query_Colum[];
    /**
     * @generated from protobuf field: repeated v1.Query.Row rows = 3;
     */
    rows: Query_Row[];
}
/**
 * @generated from protobuf message v1.ApplyClusterRequest
 */
export interface ApplyClusterRequest {
    /**
     * @generated from protobuf field: v1.Cluster.Config config = 1;
     */
    config?: Cluster_Config;
}
/**
 * @generated from protobuf message v1.ApplyClusterResponse
 */
export interface ApplyClusterResponse {
    /**
     * @generated from protobuf field: string ok = 1;
     */
    ok: string;
}
/**
 * @generated from protobuf message v1.GetClusterRequest
 */
export interface GetClusterRequest {
}
/**
 * @generated from protobuf message v1.GetClusterResponse
 */
export interface GetClusterResponse {
    /**
     * @generated from protobuf field: v1.Cluster.Config config = 1;
     */
    config?: Cluster_Config;
}
/**
 * @generated from protobuf message v1.Status
 */
export interface Status {
}
/**
 * @generated from protobuf message v1.Notice
 */
export interface Notice {
}
/**
 * @generated from protobuf message v1.Event
 */
export interface Event {
    /**
     * / EventName
     *
     * @generated from protobuf field: string n = 1;
     */
    n: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * Domain
     *
     * @generated from protobuf field: string d = 3;
     */
    d: string;
    /**
     * Screen width
     *
     * @generated from protobuf field: string w = 4;
     */
    w: string;
    /**
     * Hash mode
     *
     * @generated from protobuf field: bool h = 5;
     */
    h: boolean;
    /**
     * @generated from protobuf field: string ip = 6;
     */
    ip: string;
    /**
     * user agent
     *
     * @generated from protobuf field: string ua = 7;
     */
    ua: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Token$Type extends MessageType<Token> {
    constructor() {
        super("v1.Token", [
            { no: 1, name: "pub_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Token>): Token {
        const message = { pubKey: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Token>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Token): Token {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes pub_key */ 1:
                    message.pubKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Token, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes pub_key = 1; */
        if (message.pubKey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.pubKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Token
 */
export const Token = new Token$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTokenRequest$Type extends MessageType<CreateTokenRequest> {
    constructor() {
        super("v1.CreateTokenRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "public_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "generate", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "ttl", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<CreateTokenRequest>): CreateTokenRequest {
        const message = { name: "", password: "", token: "", publicKey: new Uint8Array(0), generate: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTokenRequest): CreateTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string token */ 3:
                    message.token = reader.string();
                    break;
                case /* bytes public_key */ 4:
                    message.publicKey = reader.bytes();
                    break;
                case /* bool generate */ 5:
                    message.generate = reader.bool();
                    break;
                case /* google.protobuf.Duration ttl */ 6:
                    message.ttl = Duration.internalBinaryRead(reader, reader.uint32(), options, message.ttl);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string token = 3; */
        if (message.token !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.token);
        /* bytes public_key = 4; */
        if (message.publicKey.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.publicKey);
        /* bool generate = 5; */
        if (message.generate !== false)
            writer.tag(5, WireType.Varint).bool(message.generate);
        /* google.protobuf.Duration ttl = 6; */
        if (message.ttl)
            Duration.internalBinaryWrite(message.ttl, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.CreateTokenRequest
 */
export const CreateTokenRequest = new CreateTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTokenResponse$Type extends MessageType<CreateTokenResponse> {
    constructor() {
        super("v1.CreateTokenResponse", [
            { no: 1, name: "auth", kind: "message", T: () => Client_Auth }
        ]);
    }
    create(value?: PartialMessage<CreateTokenResponse>): CreateTokenResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTokenResponse): CreateTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Client.Auth auth */ 1:
                    message.auth = Client_Auth.internalBinaryRead(reader, reader.uint32(), options, message.auth);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Client.Auth auth = 1; */
        if (message.auth)
            Client_Auth.internalBinaryWrite(message.auth, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.CreateTokenResponse
 */
export const CreateTokenResponse = new CreateTokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Site$Type extends MessageType<Site> {
    constructor() {
        super("v1.Site", [
            { no: 1, name: "domain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Site>): Site {
        const message = { domain: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Site>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Site): Site {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string domain */ 1:
                    message.domain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Site, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string domain = 1; */
        if (message.domain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.domain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Site
 */
export const Site = new Site$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSiteRequest$Type extends MessageType<CreateSiteRequest> {
    constructor() {
        super("v1.CreateSiteRequest", [
            { no: 1, name: "domain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { pattern: "^(?!-)[A-Za-z0-9-]+([-.]{1}[a-z0-9]+)*.[A-Za-z]{2,6}$" } } } }
        ]);
    }
    create(value?: PartialMessage<CreateSiteRequest>): CreateSiteRequest {
        const message = { domain: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateSiteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSiteRequest): CreateSiteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string domain */ 1:
                    message.domain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSiteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string domain = 1; */
        if (message.domain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.domain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.CreateSiteRequest
 */
export const CreateSiteRequest = new CreateSiteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSiteResponse$Type extends MessageType<CreateSiteResponse> {
    constructor() {
        super("v1.CreateSiteResponse", [
            { no: 1, name: "site", kind: "message", T: () => Site }
        ]);
    }
    create(value?: PartialMessage<CreateSiteResponse>): CreateSiteResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateSiteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSiteResponse): CreateSiteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Site site */ 1:
                    message.site = Site.internalBinaryRead(reader, reader.uint32(), options, message.site);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSiteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Site site = 1; */
        if (message.site)
            Site.internalBinaryWrite(message.site, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.CreateSiteResponse
 */
export const CreateSiteResponse = new CreateSiteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSiteRequest$Type extends MessageType<GetSiteRequest> {
    constructor() {
        super("v1.GetSiteRequest", []);
    }
    create(value?: PartialMessage<GetSiteRequest>): GetSiteRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSiteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSiteRequest): GetSiteRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetSiteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetSiteRequest
 */
export const GetSiteRequest = new GetSiteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSiteResponse$Type extends MessageType<GetSiteResponse> {
    constructor() {
        super("v1.GetSiteResponse", [
            { no: 1, name: "site", kind: "message", T: () => Site }
        ]);
    }
    create(value?: PartialMessage<GetSiteResponse>): GetSiteResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSiteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSiteResponse): GetSiteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Site site */ 1:
                    message.site = Site.internalBinaryRead(reader, reader.uint32(), options, message.site);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSiteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Site site = 1; */
        if (message.site)
            Site.internalBinaryWrite(message.site, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetSiteResponse
 */
export const GetSiteResponse = new GetSiteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSitesRequest$Type extends MessageType<ListSitesRequest> {
    constructor() {
        super("v1.ListSitesRequest", []);
    }
    create(value?: PartialMessage<ListSitesRequest>): ListSitesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListSitesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSitesRequest): ListSitesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListSitesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ListSitesRequest
 */
export const ListSitesRequest = new ListSitesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSitesResponse$Type extends MessageType<ListSitesResponse> {
    constructor() {
        super("v1.ListSitesResponse", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Site }
        ]);
    }
    create(value?: PartialMessage<ListSitesResponse>): ListSitesResponse {
        const message = { list: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListSitesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSitesResponse): ListSitesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated v1.Site list */ 1:
                    message.list.push(Site.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSitesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated v1.Site list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Site.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ListSitesResponse
 */
export const ListSitesResponse = new ListSitesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSiteRequest$Type extends MessageType<DeleteSiteRequest> {
    constructor() {
        super("v1.DeleteSiteRequest", [
            { no: 1, name: "domain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteSiteRequest>): DeleteSiteRequest {
        const message = { domain: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteSiteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSiteRequest): DeleteSiteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string domain */ 1:
                    message.domain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteSiteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string domain = 1; */
        if (message.domain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.domain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.DeleteSiteRequest
 */
export const DeleteSiteRequest = new DeleteSiteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSiteResponse$Type extends MessageType<DeleteSiteResponse> {
    constructor() {
        super("v1.DeleteSiteResponse", []);
    }
    create(value?: PartialMessage<DeleteSiteResponse>): DeleteSiteResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteSiteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSiteResponse): DeleteSiteResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteSiteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.DeleteSiteResponse
 */
export const DeleteSiteResponse = new DeleteSiteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Account$Type extends MessageType<Account> {
    constructor() {
        super("v1.Account", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hashed_password", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Account>): Account {
        const message = { name: "", hashedPassword: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Account>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Account): Account {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bytes hashed_password */ 2:
                    message.hashedPassword = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Account, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bytes hashed_password = 2; */
        if (message.hashedPassword.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.hashedPassword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Account
 */
export const Account = new Account$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Error$Type extends MessageType<Error> {
    constructor() {
        super("v1.Error", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Error>): Error {
        const message = { error: "", code: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Error>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Error): Error {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                case /* int32 code */ 2:
                    message.code = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        /* int32 code = 2; */
        if (message.code !== 0)
            writer.tag(2, WireType.Varint).int32(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Error
 */
export const Error = new Error$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Query$Type extends MessageType<Query> {
    constructor() {
        super("v1.Query", []);
    }
    create(value?: PartialMessage<Query>): Query {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Query>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Query): Query {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Query, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Query
 */
export const Query = new Query$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Query_Value$Type extends MessageType<Query_Value> {
    constructor() {
        super("v1.Query.Value", [
            { no: 1, name: "number", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "double", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "string", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bool", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "timestamp", kind: "message", oneof: "value", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Query_Value>): Query_Value {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Query_Value>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Query_Value): Query_Value {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 number */ 1:
                    message.value = {
                        oneofKind: "number",
                        number: reader.int64().toBigInt()
                    };
                    break;
                case /* double double */ 2:
                    message.value = {
                        oneofKind: "double",
                        double: reader.double()
                    };
                    break;
                case /* string string */ 3:
                    message.value = {
                        oneofKind: "string",
                        string: reader.string()
                    };
                    break;
                case /* bool bool */ 4:
                    message.value = {
                        oneofKind: "bool",
                        bool: reader.bool()
                    };
                    break;
                case /* google.protobuf.Timestamp timestamp */ 5:
                    message.value = {
                        oneofKind: "timestamp",
                        timestamp: Timestamp.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).timestamp)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Query_Value, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 number = 1; */
        if (message.value.oneofKind === "number")
            writer.tag(1, WireType.Varint).int64(message.value.number);
        /* double double = 2; */
        if (message.value.oneofKind === "double")
            writer.tag(2, WireType.Bit64).double(message.value.double);
        /* string string = 3; */
        if (message.value.oneofKind === "string")
            writer.tag(3, WireType.LengthDelimited).string(message.value.string);
        /* bool bool = 4; */
        if (message.value.oneofKind === "bool")
            writer.tag(4, WireType.Varint).bool(message.value.bool);
        /* google.protobuf.Timestamp timestamp = 5; */
        if (message.value.oneofKind === "timestamp")
            Timestamp.internalBinaryWrite(message.value.timestamp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Query.Value
 */
export const Query_Value = new Query_Value$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Query_Param$Type extends MessageType<Query_Param> {
    constructor() {
        super("v1.Query.Param", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "message", T: () => Query_Value }
        ]);
    }
    create(value?: PartialMessage<Query_Param>): Query_Param {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Query_Param>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Query_Param): Query_Param {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* v1.Query.Value value */ 2:
                    message.value = Query_Value.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Query_Param, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* v1.Query.Value value = 2; */
        if (message.value)
            Query_Value.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Query.Param
 */
export const Query_Param = new Query_Param$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Query_Colum$Type extends MessageType<Query_Colum> {
    constructor() {
        super("v1.Query.Colum", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data_type", kind: "enum", T: () => ["v1.Query.Colum.DataType", Query_Colum_DataType] }
        ]);
    }
    create(value?: PartialMessage<Query_Colum>): Query_Colum {
        const message = { name: "", dataType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Query_Colum>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Query_Colum): Query_Colum {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* v1.Query.Colum.DataType data_type */ 2:
                    message.dataType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Query_Colum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* v1.Query.Colum.DataType data_type = 2; */
        if (message.dataType !== 0)
            writer.tag(2, WireType.Varint).int32(message.dataType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Query.Colum
 */
export const Query_Colum = new Query_Colum$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Query_Row$Type extends MessageType<Query_Row> {
    constructor() {
        super("v1.Query.Row", [
            { no: 1, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Query_Value }
        ]);
    }
    create(value?: PartialMessage<Query_Row>): Query_Row {
        const message = { values: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Query_Row>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Query_Row): Query_Row {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated v1.Query.Value values */ 1:
                    message.values.push(Query_Value.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Query_Row, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated v1.Query.Value values = 1; */
        for (let i = 0; i < message.values.length; i++)
            Query_Value.internalBinaryWrite(message.values[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Query.Row
 */
export const Query_Row = new Query_Row$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryRequest$Type extends MessageType<QueryRequest> {
    constructor() {
        super("v1.QueryRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Query_Param }
        ]);
    }
    create(value?: PartialMessage<QueryRequest>): QueryRequest {
        const message = { query: "", params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryRequest): QueryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* repeated v1.Query.Param params */ 2:
                    message.params.push(Query_Param.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* repeated v1.Query.Param params = 2; */
        for (let i = 0; i < message.params.length; i++)
            Query_Param.internalBinaryWrite(message.params[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryRequest
 */
export const QueryRequest = new QueryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryResponse$Type extends MessageType<QueryResponse> {
    constructor() {
        super("v1.QueryResponse", [
            { no: 1, name: "elapsed", kind: "message", T: () => Duration },
            { no: 2, name: "columns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Query_Colum },
            { no: 3, name: "rows", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Query_Row }
        ]);
    }
    create(value?: PartialMessage<QueryResponse>): QueryResponse {
        const message = { columns: [], rows: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse): QueryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration elapsed */ 1:
                    message.elapsed = Duration.internalBinaryRead(reader, reader.uint32(), options, message.elapsed);
                    break;
                case /* repeated v1.Query.Colum columns */ 2:
                    message.columns.push(Query_Colum.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated v1.Query.Row rows */ 3:
                    message.rows.push(Query_Row.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration elapsed = 1; */
        if (message.elapsed)
            Duration.internalBinaryWrite(message.elapsed, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated v1.Query.Colum columns = 2; */
        for (let i = 0; i < message.columns.length; i++)
            Query_Colum.internalBinaryWrite(message.columns[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated v1.Query.Row rows = 3; */
        for (let i = 0; i < message.rows.length; i++)
            Query_Row.internalBinaryWrite(message.rows[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryResponse
 */
export const QueryResponse = new QueryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplyClusterRequest$Type extends MessageType<ApplyClusterRequest> {
    constructor() {
        super("v1.ApplyClusterRequest", [
            { no: 1, name: "config", kind: "message", T: () => Cluster_Config }
        ]);
    }
    create(value?: PartialMessage<ApplyClusterRequest>): ApplyClusterRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ApplyClusterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplyClusterRequest): ApplyClusterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Cluster.Config config */ 1:
                    message.config = Cluster_Config.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApplyClusterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Cluster.Config config = 1; */
        if (message.config)
            Cluster_Config.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ApplyClusterRequest
 */
export const ApplyClusterRequest = new ApplyClusterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplyClusterResponse$Type extends MessageType<ApplyClusterResponse> {
    constructor() {
        super("v1.ApplyClusterResponse", [
            { no: 1, name: "ok", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ApplyClusterResponse>): ApplyClusterResponse {
        const message = { ok: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ApplyClusterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplyClusterResponse): ApplyClusterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ok */ 1:
                    message.ok = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApplyClusterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ok = 1; */
        if (message.ok !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ok);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ApplyClusterResponse
 */
export const ApplyClusterResponse = new ApplyClusterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetClusterRequest$Type extends MessageType<GetClusterRequest> {
    constructor() {
        super("v1.GetClusterRequest", []);
    }
    create(value?: PartialMessage<GetClusterRequest>): GetClusterRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetClusterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClusterRequest): GetClusterRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetClusterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetClusterRequest
 */
export const GetClusterRequest = new GetClusterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetClusterResponse$Type extends MessageType<GetClusterResponse> {
    constructor() {
        super("v1.GetClusterResponse", [
            { no: 1, name: "config", kind: "message", T: () => Cluster_Config }
        ]);
    }
    create(value?: PartialMessage<GetClusterResponse>): GetClusterResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetClusterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClusterResponse): GetClusterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Cluster.Config config */ 1:
                    message.config = Cluster_Config.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetClusterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Cluster.Config config = 1; */
        if (message.config)
            Cluster_Config.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetClusterResponse
 */
export const GetClusterResponse = new GetClusterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Status$Type extends MessageType<Status> {
    constructor() {
        super("v1.Status", []);
    }
    create(value?: PartialMessage<Status>): Status {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Status>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Status): Status {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Status, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Status
 */
export const Status = new Status$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Notice$Type extends MessageType<Notice> {
    constructor() {
        super("v1.Notice", []);
    }
    create(value?: PartialMessage<Notice>): Notice {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Notice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Notice): Notice {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Notice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Notice
 */
export const Notice = new Notice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("v1.Event", [
            { no: 1, name: "n", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "d", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "w", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "h", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ua", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = { n: "", url: "", d: "", w: "", h: false, ip: "", ua: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string n */ 1:
                    message.n = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string d */ 3:
                    message.d = reader.string();
                    break;
                case /* string w */ 4:
                    message.w = reader.string();
                    break;
                case /* bool h */ 5:
                    message.h = reader.bool();
                    break;
                case /* string ip */ 6:
                    message.ip = reader.string();
                    break;
                case /* string ua */ 7:
                    message.ua = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string n = 1; */
        if (message.n !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.n);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string d = 3; */
        if (message.d !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.d);
        /* string w = 4; */
        if (message.w !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.w);
        /* bool h = 5; */
        if (message.h !== false)
            writer.tag(5, WireType.Varint).bool(message.h);
        /* string ip = 6; */
        if (message.ip !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.ip);
        /* string ua = 7; */
        if (message.ua !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.ua);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Event
 */
export const Event = new Event$Type();
/**
 * @generated ServiceType for protobuf service v1.Vince
 */
export const Vince = new ServiceType("v1.Vince", [
    { name: "CreateToken", options: { "google.api.http": { post: "/v1/tokens" } }, I: CreateTokenRequest, O: CreateTokenResponse },
    { name: "CreateSite", options: { "google.api.http": { post: "/v1/sites" } }, I: CreateSiteRequest, O: CreateSiteResponse },
    { name: "GetSite", options: { "google.api.http": { get: "/v1/site" } }, I: GetSiteRequest, O: GetSiteResponse },
    { name: "ListSites", options: { "google.api.http": { get: "/v1/sites" } }, I: ListSitesRequest, O: ListSitesResponse },
    { name: "DeleteSite", options: { "google.api.http": { delete: "/v1/site" } }, I: DeleteSiteRequest, O: DeleteSiteResponse },
    { name: "Query", options: { "google.api.http": { post: "/v1/query" } }, I: QueryRequest, O: QueryResponse },
    { name: "ApplyCluster", options: { "google.api.http": { post: "/v1/cluster/apply" } }, I: ApplyClusterRequest, O: ApplyClusterResponse },
    { name: "GetCluster", options: { "google.api.http": { get: "/v1/cluster" } }, I: GetClusterRequest, O: GetClusterResponse },
    { name: "Version", options: { "google.api.http": { get: "/v1/version" } }, I: Empty, O: Build },
    { name: "SendEvent", options: { "google.api.http": { post: "/api/event" } }, I: Event, O: Empty }
]);
