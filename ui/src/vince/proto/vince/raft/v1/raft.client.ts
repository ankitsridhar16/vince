// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/raft/v1/raft.proto" (package "v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Transport } from "./raft";
import type { InstallSnapshotResponse } from "./raft";
import type { InstallSnapshotRequest } from "./raft";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { TimeoutNowResponse } from "./raft";
import type { TimeoutNowRequest } from "./raft";
import type { RequestVoteResponse } from "./raft";
import type { RequestVoteRequest } from "./raft";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AppendEntriesResponse } from "./raft";
import type { AppendEntriesRequest } from "./raft";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service v1.Transport
 */
export interface ITransportClient {
    /**
     * @generated from protobuf rpc: AppendEntriesPipeline(stream v1.AppendEntriesRequest) returns (stream v1.AppendEntriesResponse);
     */
    appendEntriesPipeline(options?: RpcOptions): DuplexStreamingCall<AppendEntriesRequest, AppendEntriesResponse>;
    /**
     * @generated from protobuf rpc: AppendEntries(v1.AppendEntriesRequest) returns (v1.AppendEntriesResponse);
     */
    appendEntries(input: AppendEntriesRequest, options?: RpcOptions): UnaryCall<AppendEntriesRequest, AppendEntriesResponse>;
    /**
     * @generated from protobuf rpc: RequestVote(v1.RequestVoteRequest) returns (v1.RequestVoteResponse);
     */
    requestVote(input: RequestVoteRequest, options?: RpcOptions): UnaryCall<RequestVoteRequest, RequestVoteResponse>;
    /**
     * @generated from protobuf rpc: TimeoutNow(v1.TimeoutNowRequest) returns (v1.TimeoutNowResponse);
     */
    timeoutNow(input: TimeoutNowRequest, options?: RpcOptions): UnaryCall<TimeoutNowRequest, TimeoutNowResponse>;
    /**
     * @generated from protobuf rpc: InstallSnapshot(stream v1.InstallSnapshotRequest) returns (v1.InstallSnapshotResponse);
     */
    installSnapshot(options?: RpcOptions): ClientStreamingCall<InstallSnapshotRequest, InstallSnapshotResponse>;
}
/**
 * @generated from protobuf service v1.Transport
 */
export class TransportClient implements ITransportClient, ServiceInfo {
    typeName = Transport.typeName;
    methods = Transport.methods;
    options = Transport.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: AppendEntriesPipeline(stream v1.AppendEntriesRequest) returns (stream v1.AppendEntriesResponse);
     */
    appendEntriesPipeline(options?: RpcOptions): DuplexStreamingCall<AppendEntriesRequest, AppendEntriesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AppendEntriesRequest, AppendEntriesResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: AppendEntries(v1.AppendEntriesRequest) returns (v1.AppendEntriesResponse);
     */
    appendEntries(input: AppendEntriesRequest, options?: RpcOptions): UnaryCall<AppendEntriesRequest, AppendEntriesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AppendEntriesRequest, AppendEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RequestVote(v1.RequestVoteRequest) returns (v1.RequestVoteResponse);
     */
    requestVote(input: RequestVoteRequest, options?: RpcOptions): UnaryCall<RequestVoteRequest, RequestVoteResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestVoteRequest, RequestVoteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TimeoutNow(v1.TimeoutNowRequest) returns (v1.TimeoutNowResponse);
     */
    timeoutNow(input: TimeoutNowRequest, options?: RpcOptions): UnaryCall<TimeoutNowRequest, TimeoutNowResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<TimeoutNowRequest, TimeoutNowResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InstallSnapshot(stream v1.InstallSnapshotRequest) returns (v1.InstallSnapshotResponse);
     */
    installSnapshot(options?: RpcOptions): ClientStreamingCall<InstallSnapshotRequest, InstallSnapshotResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<InstallSnapshotRequest, InstallSnapshotResponse>("clientStreaming", this._transport, method, opt);
    }
}
