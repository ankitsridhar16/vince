// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/goals/v1/goals.proto" (package "v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../google/protobuf/duration";
/**
 * @generated from protobuf message v1.Goal
 */
export interface Goal {
    /**
     * @generated from protobuf field: v1.Goal.Type type = 1;
     */
    type: Goal_Type;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration created_at = 3;
     */
    createdAt?: Duration;
}
/**
 * @generated from protobuf enum v1.Goal.Type
 */
export enum Goal_Type {
    /**
     * @generated from protobuf enum value: EVENT = 0;
     */
    EVENT = 0,
    /**
     * @generated from protobuf enum value: PATH = 1;
     */
    PATH = 1
}
/**
 * @generated from protobuf message v1.CreateGoalRequest
 */
export interface CreateGoalRequest {
    /**
     * @generated from protobuf field: string domain = 1;
     */
    domain: string;
    /**
     * @generated from protobuf field: v1.Goal.Type type = 2;
     */
    type: Goal_Type;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf message v1.CreateGoalResponse
 */
export interface CreateGoalResponse {
    /**
     * @generated from protobuf field: v1.Goal goal = 1;
     */
    goal?: Goal;
}
/**
 * @generated from protobuf message v1.GetGoal
 */
export interface GetGoal {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message v1.ListGoalsRequest
 */
export interface ListGoalsRequest {
}
/**
 * @generated from protobuf message v1.ListGoalsResponse
 */
export interface ListGoalsResponse {
    /**
     * @generated from protobuf field: repeated v1.Goal goals = 1;
     */
    goals: Goal[];
}
/**
 * @generated from protobuf message v1.DeleteGoalRequest
 */
export interface DeleteGoalRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message v1.DeleteGoalResponse
 */
export interface DeleteGoalResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class Goal$Type extends MessageType<Goal> {
    constructor() {
        super("v1.Goal", [
            { no: 1, name: "type", kind: "enum", T: () => ["v1.Goal.Type", Goal_Type] },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<Goal>): Goal {
        const message = { type: 0, value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Goal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Goal): Goal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Goal.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                case /* google.protobuf.Duration created_at */ 3:
                    message.createdAt = Duration.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Goal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Goal.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        /* google.protobuf.Duration created_at = 3; */
        if (message.createdAt)
            Duration.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.Goal
 */
export const Goal = new Goal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGoalRequest$Type extends MessageType<CreateGoalRequest> {
    constructor() {
        super("v1.CreateGoalRequest", [
            { no: 1, name: "domain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { hostname: true } } } },
            { no: 2, name: "type", kind: "enum", T: () => ["v1.Goal.Type", Goal_Type], options: { "buf.validate.field": { required: true } } },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<CreateGoalRequest>): CreateGoalRequest {
        const message = { domain: "", type: 0, value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateGoalRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGoalRequest): CreateGoalRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string domain */ 1:
                    message.domain = reader.string();
                    break;
                case /* v1.Goal.Type type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGoalRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string domain = 1; */
        if (message.domain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.domain);
        /* v1.Goal.Type type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.CreateGoalRequest
 */
export const CreateGoalRequest = new CreateGoalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGoalResponse$Type extends MessageType<CreateGoalResponse> {
    constructor() {
        super("v1.CreateGoalResponse", [
            { no: 1, name: "goal", kind: "message", T: () => Goal }
        ]);
    }
    create(value?: PartialMessage<CreateGoalResponse>): CreateGoalResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateGoalResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGoalResponse): CreateGoalResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* v1.Goal goal */ 1:
                    message.goal = Goal.internalBinaryRead(reader, reader.uint32(), options, message.goal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGoalResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* v1.Goal goal = 1; */
        if (message.goal)
            Goal.internalBinaryWrite(message.goal, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.CreateGoalResponse
 */
export const CreateGoalResponse = new CreateGoalResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGoal$Type extends MessageType<GetGoal> {
    constructor() {
        super("v1.GetGoal", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGoal>): GetGoal {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGoal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGoal): GetGoal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGoal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetGoal
 */
export const GetGoal = new GetGoal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListGoalsRequest$Type extends MessageType<ListGoalsRequest> {
    constructor() {
        super("v1.ListGoalsRequest", []);
    }
    create(value?: PartialMessage<ListGoalsRequest>): ListGoalsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListGoalsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListGoalsRequest): ListGoalsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListGoalsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ListGoalsRequest
 */
export const ListGoalsRequest = new ListGoalsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListGoalsResponse$Type extends MessageType<ListGoalsResponse> {
    constructor() {
        super("v1.ListGoalsResponse", [
            { no: 1, name: "goals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Goal }
        ]);
    }
    create(value?: PartialMessage<ListGoalsResponse>): ListGoalsResponse {
        const message = { goals: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListGoalsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListGoalsResponse): ListGoalsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated v1.Goal goals */ 1:
                    message.goals.push(Goal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListGoalsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated v1.Goal goals = 1; */
        for (let i = 0; i < message.goals.length; i++)
            Goal.internalBinaryWrite(message.goals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ListGoalsResponse
 */
export const ListGoalsResponse = new ListGoalsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGoalRequest$Type extends MessageType<DeleteGoalRequest> {
    constructor() {
        super("v1.DeleteGoalRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteGoalRequest>): DeleteGoalRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteGoalRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGoalRequest): DeleteGoalRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGoalRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.DeleteGoalRequest
 */
export const DeleteGoalRequest = new DeleteGoalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGoalResponse$Type extends MessageType<DeleteGoalResponse> {
    constructor() {
        super("v1.DeleteGoalResponse", []);
    }
    create(value?: PartialMessage<DeleteGoalResponse>): DeleteGoalResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteGoalResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGoalResponse): DeleteGoalResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteGoalResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.DeleteGoalResponse
 */
export const DeleteGoalResponse = new DeleteGoalResponse$Type();
/**
 * @generated ServiceType for protobuf service v1.Goals
 */
export const Goals = new ServiceType("v1.Goals", [
    { name: "CreateGoal", options: { "google.api.http": { post: "/v1/goals" } }, I: CreateGoalRequest, O: CreateGoalResponse },
    { name: "GetGoal", options: { "google.api.http": { get: "/v1/goal" } }, I: ListGoalsRequest, O: Goal },
    { name: "ListGoals", options: { "google.api.http": { get: "/v1/goals" } }, I: ListGoalsRequest, O: ListGoalsResponse },
    { name: "DeleteGoal", options: { "google.api.http": { delete: "/v1/goal" } }, I: DeleteGoalRequest, O: DeleteGoalResponse }
]);
