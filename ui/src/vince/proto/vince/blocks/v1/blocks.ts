// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/blocks/v1/blocks.proto" (package "v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message v1.BlockIndex
 */
export interface BlockIndex {
    /**
     * A list of bitmaps each belonging to a row group. This allows us to select
     * row groups that might contain relevant data based on indexed columns.
     *
     * @generated from protobuf field: repeated bytes row_group_bitmap = 1;
     */
    rowGroupBitmap: Uint8Array[];
    /**
     * A list of min/max timestamp observed per row group
     *
     * @generated from protobuf field: repeated v1.BlockIndex.Range time_range = 2;
     */
    timeRange: BlockIndex_Range[];
}
/**
 * @generated from protobuf message v1.BlockIndex.Range
 */
export interface BlockIndex_Range {
    /**
     * The minimum timestamp value observed in a row group.
     *
     * @generated from protobuf field: google.protobuf.Timestamp min = 1;
     */
    min?: Timestamp;
    /**
     * The maximum timestamp value observed a row group.
     *
     * @generated from protobuf field: google.protobuf.Timestamp max = 2;
     */
    max?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class BlockIndex$Type extends MessageType<BlockIndex> {
    constructor() {
        super("v1.BlockIndex", [
            { no: 1, name: "row_group_bitmap", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "time_range", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockIndex_Range }
        ]);
    }
    create(value?: PartialMessage<BlockIndex>): BlockIndex {
        const message = { rowGroupBitmap: [], timeRange: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockIndex>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockIndex): BlockIndex {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes row_group_bitmap */ 1:
                    message.rowGroupBitmap.push(reader.bytes());
                    break;
                case /* repeated v1.BlockIndex.Range time_range */ 2:
                    message.timeRange.push(BlockIndex_Range.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockIndex, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes row_group_bitmap = 1; */
        for (let i = 0; i < message.rowGroupBitmap.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.rowGroupBitmap[i]);
        /* repeated v1.BlockIndex.Range time_range = 2; */
        for (let i = 0; i < message.timeRange.length; i++)
            BlockIndex_Range.internalBinaryWrite(message.timeRange[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.BlockIndex
 */
export const BlockIndex = new BlockIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockIndex_Range$Type extends MessageType<BlockIndex_Range> {
    constructor() {
        super("v1.BlockIndex.Range", [
            { no: 1, name: "min", kind: "message", T: () => Timestamp },
            { no: 2, name: "max", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<BlockIndex_Range>): BlockIndex_Range {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockIndex_Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockIndex_Range): BlockIndex_Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp min */ 1:
                    message.min = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.min);
                    break;
                case /* google.protobuf.Timestamp max */ 2:
                    message.max = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.max);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockIndex_Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp min = 1; */
        if (message.min)
            Timestamp.internalBinaryWrite(message.min, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp max = 2; */
        if (message.max)
            Timestamp.internalBinaryWrite(message.max, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.BlockIndex.Range
 */
export const BlockIndex_Range = new BlockIndex_Range$Type();
