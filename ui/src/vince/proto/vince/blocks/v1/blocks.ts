// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/blocks/v1/blocks.proto" (package "v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message v1.BlockInfo
 */
export interface BlockInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string domain = 2;
     */
    domain: string;
    /**
     * @generated from protobuf field: int64 min = 3;
     */
    min: bigint;
    /**
     * @generated from protobuf field: int64 max = 4;
     */
    max: bigint;
    /**
     * @generated from protobuf field: v1.BaseStats stats = 5;
     */
    stats?: BaseStats;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;
     */
    createdAt?: Timestamp;
}
/**
 * @generated from protobuf message v1.ColumnIndex
 */
export interface ColumnIndex {
    /**
     * @generated from protobuf field: repeated v1.ColumnIndex.RowGroup row_groups = 1;
     */
    rowGroups: ColumnIndex_RowGroup[];
    /**
     * @generated from protobuf field: int64 min = 2;
     */
    min: bigint;
    /**
     * @generated from protobuf field: int64 max = 3;
     */
    max: bigint;
}
/**
 * @generated from protobuf message v1.ColumnIndex.Page
 */
export interface ColumnIndex_Page {
    /**
     * @generated from protobuf field: int64 min = 1;
     */
    min: bigint;
    /**
     * @generated from protobuf field: int64 max = 2;
     */
    max: bigint;
}
/**
 * @generated from protobuf message v1.ColumnIndex.RowGroup
 */
export interface ColumnIndex_RowGroup {
    /**
     * @generated from protobuf field: int64 min = 1;
     */
    min: bigint;
    /**
     * @generated from protobuf field: int64 max = 2;
     */
    max: bigint;
    /**
     * @generated from protobuf field: bytes bloom_filter = 3;
     */
    bloomFilter: Uint8Array;
    /**
     * This will only be set for timestamp columns
     *
     * @generated from protobuf field: repeated v1.ColumnIndex.Page pages = 4;
     */
    pages: ColumnIndex_Page[];
}
/**
 * @generated from protobuf message v1.BaseStats
 */
export interface BaseStats {
    /**
     * @generated from protobuf field: int64 page_views = 1;
     */
    pageViews: bigint;
    /**
     * @generated from protobuf field: int64 visitors = 2;
     */
    visitors: bigint;
    /**
     * @generated from protobuf field: int64 visits = 3;
     */
    visits: bigint;
    /**
     * @generated from protobuf field: double duration = 4;
     */
    duration: number;
    /**
     * @generated from protobuf field: double bounce_rate = 5;
     */
    bounceRate: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class BlockInfo$Type extends MessageType<BlockInfo> {
    constructor() {
        super("v1.BlockInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "domain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "min", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "max", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "stats", kind: "message", T: () => BaseStats },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<BlockInfo>): BlockInfo {
        const message = { id: "", domain: "", min: 0n, max: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockInfo): BlockInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string domain */ 2:
                    message.domain = reader.string();
                    break;
                case /* int64 min */ 3:
                    message.min = reader.int64().toBigInt();
                    break;
                case /* int64 max */ 4:
                    message.max = reader.int64().toBigInt();
                    break;
                case /* v1.BaseStats stats */ 5:
                    message.stats = BaseStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string domain = 2; */
        if (message.domain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.domain);
        /* int64 min = 3; */
        if (message.min !== 0n)
            writer.tag(3, WireType.Varint).int64(message.min);
        /* int64 max = 4; */
        if (message.max !== 0n)
            writer.tag(4, WireType.Varint).int64(message.max);
        /* v1.BaseStats stats = 5; */
        if (message.stats)
            BaseStats.internalBinaryWrite(message.stats, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.BlockInfo
 */
export const BlockInfo = new BlockInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColumnIndex$Type extends MessageType<ColumnIndex> {
    constructor() {
        super("v1.ColumnIndex", [
            { no: 1, name: "row_groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ColumnIndex_RowGroup },
            { no: 2, name: "min", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "max", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ColumnIndex>): ColumnIndex {
        const message = { rowGroups: [], min: 0n, max: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ColumnIndex>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ColumnIndex): ColumnIndex {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated v1.ColumnIndex.RowGroup row_groups */ 1:
                    message.rowGroups.push(ColumnIndex_RowGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 min */ 2:
                    message.min = reader.int64().toBigInt();
                    break;
                case /* int64 max */ 3:
                    message.max = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ColumnIndex, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated v1.ColumnIndex.RowGroup row_groups = 1; */
        for (let i = 0; i < message.rowGroups.length; i++)
            ColumnIndex_RowGroup.internalBinaryWrite(message.rowGroups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 min = 2; */
        if (message.min !== 0n)
            writer.tag(2, WireType.Varint).int64(message.min);
        /* int64 max = 3; */
        if (message.max !== 0n)
            writer.tag(3, WireType.Varint).int64(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ColumnIndex
 */
export const ColumnIndex = new ColumnIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColumnIndex_Page$Type extends MessageType<ColumnIndex_Page> {
    constructor() {
        super("v1.ColumnIndex.Page", [
            { no: 1, name: "min", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "max", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ColumnIndex_Page>): ColumnIndex_Page {
        const message = { min: 0n, max: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ColumnIndex_Page>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ColumnIndex_Page): ColumnIndex_Page {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 min */ 1:
                    message.min = reader.int64().toBigInt();
                    break;
                case /* int64 max */ 2:
                    message.max = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ColumnIndex_Page, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 min = 1; */
        if (message.min !== 0n)
            writer.tag(1, WireType.Varint).int64(message.min);
        /* int64 max = 2; */
        if (message.max !== 0n)
            writer.tag(2, WireType.Varint).int64(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ColumnIndex.Page
 */
export const ColumnIndex_Page = new ColumnIndex_Page$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColumnIndex_RowGroup$Type extends MessageType<ColumnIndex_RowGroup> {
    constructor() {
        super("v1.ColumnIndex.RowGroup", [
            { no: 1, name: "min", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "max", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "bloom_filter", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ColumnIndex_Page }
        ]);
    }
    create(value?: PartialMessage<ColumnIndex_RowGroup>): ColumnIndex_RowGroup {
        const message = { min: 0n, max: 0n, bloomFilter: new Uint8Array(0), pages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ColumnIndex_RowGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ColumnIndex_RowGroup): ColumnIndex_RowGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 min */ 1:
                    message.min = reader.int64().toBigInt();
                    break;
                case /* int64 max */ 2:
                    message.max = reader.int64().toBigInt();
                    break;
                case /* bytes bloom_filter */ 3:
                    message.bloomFilter = reader.bytes();
                    break;
                case /* repeated v1.ColumnIndex.Page pages */ 4:
                    message.pages.push(ColumnIndex_Page.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ColumnIndex_RowGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 min = 1; */
        if (message.min !== 0n)
            writer.tag(1, WireType.Varint).int64(message.min);
        /* int64 max = 2; */
        if (message.max !== 0n)
            writer.tag(2, WireType.Varint).int64(message.max);
        /* bytes bloom_filter = 3; */
        if (message.bloomFilter.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.bloomFilter);
        /* repeated v1.ColumnIndex.Page pages = 4; */
        for (let i = 0; i < message.pages.length; i++)
            ColumnIndex_Page.internalBinaryWrite(message.pages[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.ColumnIndex.RowGroup
 */
export const ColumnIndex_RowGroup = new ColumnIndex_RowGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BaseStats$Type extends MessageType<BaseStats> {
    constructor() {
        super("v1.BaseStats", [
            { no: 1, name: "page_views", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "visitors", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "visits", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "duration", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "bounce_rate", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<BaseStats>): BaseStats {
        const message = { pageViews: 0n, visitors: 0n, visits: 0n, duration: 0, bounceRate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BaseStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BaseStats): BaseStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 page_views */ 1:
                    message.pageViews = reader.int64().toBigInt();
                    break;
                case /* int64 visitors */ 2:
                    message.visitors = reader.int64().toBigInt();
                    break;
                case /* int64 visits */ 3:
                    message.visits = reader.int64().toBigInt();
                    break;
                case /* double duration */ 4:
                    message.duration = reader.double();
                    break;
                case /* double bounce_rate */ 5:
                    message.bounceRate = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BaseStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 page_views = 1; */
        if (message.pageViews !== 0n)
            writer.tag(1, WireType.Varint).int64(message.pageViews);
        /* int64 visitors = 2; */
        if (message.visitors !== 0n)
            writer.tag(2, WireType.Varint).int64(message.visitors);
        /* int64 visits = 3; */
        if (message.visits !== 0n)
            writer.tag(3, WireType.Varint).int64(message.visits);
        /* double duration = 4; */
        if (message.duration !== 0)
            writer.tag(4, WireType.Bit64).double(message.duration);
        /* double bounce_rate = 5; */
        if (message.bounceRate !== 0)
            writer.tag(5, WireType.Bit64).double(message.bounceRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.BaseStats
 */
export const BaseStats = new BaseStats$Type();
