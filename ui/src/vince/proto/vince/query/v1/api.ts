// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "vince/query/v1/api.proto" (package "v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message v1.QueryValue
 */
export interface QueryValue {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "number";
        /**
         * @generated from protobuf field: int64 number = 1;
         */
        number: bigint;
    } | {
        oneofKind: "double";
        /**
         * @generated from protobuf field: double double = 2;
         */
        double: number;
    } | {
        oneofKind: "string";
        /**
         * @generated from protobuf field: string string = 3;
         */
        string: string;
    } | {
        oneofKind: "bool";
        /**
         * @generated from protobuf field: bool bool = 4;
         */
        bool: boolean;
    } | {
        oneofKind: "timestamp";
        /**
         * @generated from protobuf field: google.protobuf.Timestamp timestamp = 5;
         */
        timestamp: Timestamp;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message v1.QueryParam
 */
export interface QueryParam {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: v1.QueryValue value = 2;
     */
    value?: QueryValue;
}
/**
 * @generated from protobuf message v1.QueryColum
 */
export interface QueryColum {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: v1.QueryColum.DataType data_type = 2;
     */
    dataType: QueryColum_DataType;
}
/**
 * @generated from protobuf enum v1.QueryColum.DataType
 */
export enum QueryColum_DataType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: NUMBER = 1;
     */
    NUMBER = 1,
    /**
     * @generated from protobuf enum value: DOUBLE = 2;
     */
    DOUBLE = 2,
    /**
     * @generated from protobuf enum value: STRING = 3;
     */
    STRING = 3,
    /**
     * @generated from protobuf enum value: BOOL = 4;
     */
    BOOL = 4,
    /**
     * @generated from protobuf enum value: TIMESTAMP = 5;
     */
    TIMESTAMP = 5
}
/**
 * @generated from protobuf message v1.QueryRow
 */
export interface QueryRow {
    /**
     * @generated from protobuf field: repeated v1.QueryValue values = 1;
     */
    values: QueryValue[];
}
/**
 * @generated from protobuf message v1.QueryRequest
 */
export interface QueryRequest {
    /**
     * @generated from protobuf field: string query = 1;
     */
    query: string;
    /**
     * @generated from protobuf field: repeated v1.QueryParam params = 2;
     */
    params: QueryParam[];
}
/**
 * @generated from protobuf message v1.QueryResponse
 */
export interface QueryResponse {
    /**
     * @generated from protobuf field: google.protobuf.Duration elapsed = 1;
     */
    elapsed?: Duration;
    /**
     * @generated from protobuf field: repeated v1.QueryColum columns = 2;
     */
    columns: QueryColum[];
    /**
     * @generated from protobuf field: repeated v1.QueryRow rows = 3;
     */
    rows: QueryRow[];
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryValue$Type extends MessageType<QueryValue> {
    constructor() {
        super("v1.QueryValue", [
            { no: 1, name: "number", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "double", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "string", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bool", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "timestamp", kind: "message", oneof: "value", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<QueryValue>): QueryValue {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryValue): QueryValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 number */ 1:
                    message.value = {
                        oneofKind: "number",
                        number: reader.int64().toBigInt()
                    };
                    break;
                case /* double double */ 2:
                    message.value = {
                        oneofKind: "double",
                        double: reader.double()
                    };
                    break;
                case /* string string */ 3:
                    message.value = {
                        oneofKind: "string",
                        string: reader.string()
                    };
                    break;
                case /* bool bool */ 4:
                    message.value = {
                        oneofKind: "bool",
                        bool: reader.bool()
                    };
                    break;
                case /* google.protobuf.Timestamp timestamp */ 5:
                    message.value = {
                        oneofKind: "timestamp",
                        timestamp: Timestamp.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).timestamp)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 number = 1; */
        if (message.value.oneofKind === "number")
            writer.tag(1, WireType.Varint).int64(message.value.number);
        /* double double = 2; */
        if (message.value.oneofKind === "double")
            writer.tag(2, WireType.Bit64).double(message.value.double);
        /* string string = 3; */
        if (message.value.oneofKind === "string")
            writer.tag(3, WireType.LengthDelimited).string(message.value.string);
        /* bool bool = 4; */
        if (message.value.oneofKind === "bool")
            writer.tag(4, WireType.Varint).bool(message.value.bool);
        /* google.protobuf.Timestamp timestamp = 5; */
        if (message.value.oneofKind === "timestamp")
            Timestamp.internalBinaryWrite(message.value.timestamp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryValue
 */
export const QueryValue = new QueryValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParam$Type extends MessageType<QueryParam> {
    constructor() {
        super("v1.QueryParam", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "message", T: () => QueryValue }
        ]);
    }
    create(value?: PartialMessage<QueryParam>): QueryParam {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParam): QueryParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* v1.QueryValue value */ 2:
                    message.value = QueryValue.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* v1.QueryValue value = 2; */
        if (message.value)
            QueryValue.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryParam
 */
export const QueryParam = new QueryParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryColum$Type extends MessageType<QueryColum> {
    constructor() {
        super("v1.QueryColum", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data_type", kind: "enum", T: () => ["v1.QueryColum.DataType", QueryColum_DataType] }
        ]);
    }
    create(value?: PartialMessage<QueryColum>): QueryColum {
        const message = { name: "", dataType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryColum>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryColum): QueryColum {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* v1.QueryColum.DataType data_type */ 2:
                    message.dataType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryColum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* v1.QueryColum.DataType data_type = 2; */
        if (message.dataType !== 0)
            writer.tag(2, WireType.Varint).int32(message.dataType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryColum
 */
export const QueryColum = new QueryColum$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryRow$Type extends MessageType<QueryRow> {
    constructor() {
        super("v1.QueryRow", [
            { no: 1, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryValue }
        ]);
    }
    create(value?: PartialMessage<QueryRow>): QueryRow {
        const message = { values: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryRow>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryRow): QueryRow {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated v1.QueryValue values */ 1:
                    message.values.push(QueryValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryRow, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated v1.QueryValue values = 1; */
        for (let i = 0; i < message.values.length; i++)
            QueryValue.internalBinaryWrite(message.values[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryRow
 */
export const QueryRow = new QueryRow$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryRequest$Type extends MessageType<QueryRequest> {
    constructor() {
        super("v1.QueryRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryParam }
        ]);
    }
    create(value?: PartialMessage<QueryRequest>): QueryRequest {
        const message = { query: "", params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryRequest): QueryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* repeated v1.QueryParam params */ 2:
                    message.params.push(QueryParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* repeated v1.QueryParam params = 2; */
        for (let i = 0; i < message.params.length; i++)
            QueryParam.internalBinaryWrite(message.params[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryRequest
 */
export const QueryRequest = new QueryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryResponse$Type extends MessageType<QueryResponse> {
    constructor() {
        super("v1.QueryResponse", [
            { no: 1, name: "elapsed", kind: "message", T: () => Duration },
            { no: 2, name: "columns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryColum },
            { no: 3, name: "rows", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryRow }
        ]);
    }
    create(value?: PartialMessage<QueryResponse>): QueryResponse {
        const message = { columns: [], rows: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse): QueryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration elapsed */ 1:
                    message.elapsed = Duration.internalBinaryRead(reader, reader.uint32(), options, message.elapsed);
                    break;
                case /* repeated v1.QueryColum columns */ 2:
                    message.columns.push(QueryColum.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated v1.QueryRow rows */ 3:
                    message.rows.push(QueryRow.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration elapsed = 1; */
        if (message.elapsed)
            Duration.internalBinaryWrite(message.elapsed, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated v1.QueryColum columns = 2; */
        for (let i = 0; i < message.columns.length; i++)
            QueryColum.internalBinaryWrite(message.columns[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated v1.QueryRow rows = 3; */
        for (let i = 0; i < message.rows.length; i++)
            QueryRow.internalBinaryWrite(message.rows[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.QueryResponse
 */
export const QueryResponse = new QueryResponse$Type();
/**
 * @generated ServiceType for protobuf service v1.Query
 */
export const Query = new ServiceType("v1.Query", [
    { name: "Query", options: { "google.api.http": { post: "/v1/query" } }, I: QueryRequest, O: QueryResponse }
]);
