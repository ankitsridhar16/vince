// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vince_CreateSite_FullMethodName = "/v1.Vince/CreateSite"
)

// VinceClient is the client API for Vince service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VinceClient interface {
	CreateSite(ctx context.Context, in *Site_Create_Request, opts ...grpc.CallOption) (*Site_Create_Response, error)
}

type vinceClient struct {
	cc grpc.ClientConnInterface
}

func NewVinceClient(cc grpc.ClientConnInterface) VinceClient {
	return &vinceClient{cc}
}

func (c *vinceClient) CreateSite(ctx context.Context, in *Site_Create_Request, opts ...grpc.CallOption) (*Site_Create_Response, error) {
	out := new(Site_Create_Response)
	err := c.cc.Invoke(ctx, Vince_CreateSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VinceServer is the server API for Vince service.
// All implementations must embed UnimplementedVinceServer
// for forward compatibility
type VinceServer interface {
	CreateSite(context.Context, *Site_Create_Request) (*Site_Create_Response, error)
	mustEmbedUnimplementedVinceServer()
}

// UnimplementedVinceServer must be embedded to have forward compatible implementations.
type UnimplementedVinceServer struct {
}

func (UnimplementedVinceServer) CreateSite(context.Context, *Site_Create_Request) (*Site_Create_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSite not implemented")
}
func (UnimplementedVinceServer) mustEmbedUnimplementedVinceServer() {}

// UnsafeVinceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VinceServer will
// result in compilation errors.
type UnsafeVinceServer interface {
	mustEmbedUnimplementedVinceServer()
}

func RegisterVinceServer(s grpc.ServiceRegistrar, srv VinceServer) {
	s.RegisterService(&Vince_ServiceDesc, srv)
}

func _Vince_CreateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Site_Create_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VinceServer).CreateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vince_CreateSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VinceServer).CreateSite(ctx, req.(*Site_Create_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Vince_ServiceDesc is the grpc.ServiceDesc for Vince service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vince_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Vince",
	HandlerType: (*VinceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSite",
			Handler:    _Vince_CreateSite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
