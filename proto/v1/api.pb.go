// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: api.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StorePrefix defines different kind of data we are storing in the key value
// store.
type StorePrefix int32

const (
	StorePrefix_SITES         StorePrefix = 0
	StorePrefix_BLOCKS        StorePrefix = 1
	StorePrefix_ALERTS        StorePrefix = 2
	StorePrefix_ACCOUNT       StorePrefix = 3
	StorePrefix_TOKEN         StorePrefix = 4
	StorePrefix_RAFT_LOGS     StorePrefix = 5
	StorePrefix_RAFT_STABLE   StorePrefix = 6
	StorePrefix_RAFT_SNAPSHOT StorePrefix = 7
)

// Enum value maps for StorePrefix.
var (
	StorePrefix_name = map[int32]string{
		0: "SITES",
		1: "BLOCKS",
		2: "ALERTS",
		3: "ACCOUNT",
		4: "TOKEN",
		5: "RAFT_LOGS",
		6: "RAFT_STABLE",
		7: "RAFT_SNAPSHOT",
	}
	StorePrefix_value = map[string]int32{
		"SITES":         0,
		"BLOCKS":        1,
		"ALERTS":        2,
		"ACCOUNT":       3,
		"TOKEN":         4,
		"RAFT_LOGS":     5,
		"RAFT_STABLE":   6,
		"RAFT_SNAPSHOT": 7,
	}
)

func (x StorePrefix) Enum() *StorePrefix {
	p := new(StorePrefix)
	*p = x
	return p
}

func (x StorePrefix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorePrefix) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (StorePrefix) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x StorePrefix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorePrefix.Descriptor instead.
func (StorePrefix) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

// Parquet fields used to store events. There are only two phisical data types
// int64 and string.
//
// The columns are grouped by data types for easy access
type Column int32

const (
	Column_bounce          Column = 0
	Column_duration        Column = 1
	Column_id              Column = 2
	Column_session         Column = 3
	Column_timestamp       Column = 4
	Column_browser         Column = 5
	Column_browser_version Column = 6
	Column_city            Column = 7
	Column_country         Column = 8
	Column_entry_page      Column = 9
	Column_event           Column = 10
	Column_exit_page       Column = 11
	Column_host            Column = 12
	Column_os              Column = 13
	Column_os_version      Column = 14
	Column_path            Column = 15
	Column_referrer        Column = 16
	Column_referrer_source Column = 17
	Column_region          Column = 18
	Column_screen          Column = 19
	Column_utm_campaign    Column = 20
	Column_utm_content     Column = 21
	Column_utm_medium      Column = 22
	Column_utm_source      Column = 23
	Column_utm_term        Column = 24
)

// Enum value maps for Column.
var (
	Column_name = map[int32]string{
		0:  "bounce",
		1:  "duration",
		2:  "id",
		3:  "session",
		4:  "timestamp",
		5:  "browser",
		6:  "browser_version",
		7:  "city",
		8:  "country",
		9:  "entry_page",
		10: "event",
		11: "exit_page",
		12: "host",
		13: "os",
		14: "os_version",
		15: "path",
		16: "referrer",
		17: "referrer_source",
		18: "region",
		19: "screen",
		20: "utm_campaign",
		21: "utm_content",
		22: "utm_medium",
		23: "utm_source",
		24: "utm_term",
	}
	Column_value = map[string]int32{
		"bounce":          0,
		"duration":        1,
		"id":              2,
		"session":         3,
		"timestamp":       4,
		"browser":         5,
		"browser_version": 6,
		"city":            7,
		"country":         8,
		"entry_page":      9,
		"event":           10,
		"exit_page":       11,
		"host":            12,
		"os":              13,
		"os_version":      14,
		"path":            15,
		"referrer":        16,
		"referrer_source": 17,
		"region":          18,
		"screen":          19,
		"utm_campaign":    20,
		"utm_content":     21,
		"utm_medium":      22,
		"utm_source":      23,
		"utm_term":        24,
	}
)

func (x Column) Enum() *Column {
	p := new(Column)
	*p = x
	return p
}

func (x Column) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Column) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[1].Descriptor()
}

func (Column) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[1]
}

func (x Column) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Column.Descriptor instead.
func (Column) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

type Block_Key_Kind int32

const (
	Block_Key_METADATA Block_Key_Kind = 0
	Block_Key_INDEX    Block_Key_Kind = 1
)

// Enum value maps for Block_Key_Kind.
var (
	Block_Key_Kind_name = map[int32]string{
		0: "METADATA",
		1: "INDEX",
	}
	Block_Key_Kind_value = map[string]int32{
		"METADATA": 0,
		"INDEX":    1,
	}
)

func (x Block_Key_Kind) Enum() *Block_Key_Kind {
	p := new(Block_Key_Kind)
	*p = x
	return p
}

func (x Block_Key_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Block_Key_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[2].Descriptor()
}

func (Block_Key_Kind) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[2]
}

func (x Block_Key_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Block_Key_Kind.Descriptor instead.
func (Block_Key_Kind) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2, 0, 0}
}

type Config_Cluster_Version int32

const (
	Config_Cluster_Min Config_Cluster_Version = 0
	Config_Cluster_Max Config_Cluster_Version = 3
)

// Enum value maps for Config_Cluster_Version.
var (
	Config_Cluster_Version_name = map[int32]string{
		0: "Min",
		3: "Max",
	}
	Config_Cluster_Version_value = map[string]int32{
		"Min": 0,
		"Max": 3,
	}
)

func (x Config_Cluster_Version) Enum() *Config_Cluster_Version {
	p := new(Config_Cluster_Version)
	*p = x
	return p
}

func (x Config_Cluster_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_Cluster_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[3].Descriptor()
}

func (Config_Cluster_Version) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[3]
}

func (x Config_Cluster_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_Cluster_Version.Descriptor instead.
func (Config_Cluster_Version) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 0, 0}
}

type Token_Issuer int32

const (
	Token_SERVER Token_Issuer = 0
	Token_CLIENT Token_Issuer = 1
)

// Enum value maps for Token_Issuer.
var (
	Token_Issuer_name = map[int32]string{
		0: "SERVER",
		1: "CLIENT",
	}
	Token_Issuer_value = map[string]int32{
		"SERVER": 0,
		"CLIENT": 1,
	}
)

func (x Token_Issuer) Enum() *Token_Issuer {
	p := new(Token_Issuer)
	*p = x
	return p
}

func (x Token_Issuer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Token_Issuer) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[4].Descriptor()
}

func (Token_Issuer) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[4]
}

func (x Token_Issuer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Token_Issuer.Descriptor instead.
func (Token_Issuer) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8, 0}
}

type Query_Colum_DataType int32

const (
	Query_Colum_UNKNOWN   Query_Colum_DataType = 0
	Query_Colum_NUMBER    Query_Colum_DataType = 1
	Query_Colum_DOUBLE    Query_Colum_DataType = 2
	Query_Colum_STRING    Query_Colum_DataType = 3
	Query_Colum_BOOL      Query_Colum_DataType = 4
	Query_Colum_TIMESTAMP Query_Colum_DataType = 5
)

// Enum value maps for Query_Colum_DataType.
var (
	Query_Colum_DataType_name = map[int32]string{
		0: "UNKNOWN",
		1: "NUMBER",
		2: "DOUBLE",
		3: "STRING",
		4: "BOOL",
		5: "TIMESTAMP",
	}
	Query_Colum_DataType_value = map[string]int32{
		"UNKNOWN":   0,
		"NUMBER":    1,
		"DOUBLE":    2,
		"STRING":    3,
		"BOOL":      4,
		"TIMESTAMP": 5,
	}
)

func (x Query_Colum_DataType) Enum() *Query_Colum_DataType {
	p := new(Query_Colum_DataType)
	*p = x
	return p
}

func (x Query_Colum_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_Colum_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[5].Descriptor()
}

func (Query_Colum_DataType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[5]
}

func (x Query_Colum_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_Colum_DataType.Descriptor instead.
func (Query_Colum_DataType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10, 3, 0}
}

type Raft_Log_Type int32

const (
	Raft_Log_Command              Raft_Log_Type = 0
	Raft_Log_Noop                 Raft_Log_Type = 1
	Raft_Log_AddPeerDeprecated    Raft_Log_Type = 2
	Raft_Log_RemovePeerDeprecated Raft_Log_Type = 3
	Raft_Log_Barrier              Raft_Log_Type = 4
	Raft_Log_Configuration        Raft_Log_Type = 5
)

// Enum value maps for Raft_Log_Type.
var (
	Raft_Log_Type_name = map[int32]string{
		0: "Command",
		1: "Noop",
		2: "AddPeerDeprecated",
		3: "RemovePeerDeprecated",
		4: "Barrier",
		5: "Configuration",
	}
	Raft_Log_Type_value = map[string]int32{
		"Command":              0,
		"Noop":                 1,
		"AddPeerDeprecated":    2,
		"RemovePeerDeprecated": 3,
		"Barrier":              4,
		"Configuration":        5,
	}
)

func (x Raft_Log_Type) Enum() *Raft_Log_Type {
	p := new(Raft_Log_Type)
	*p = x
	return p
}

func (x Raft_Log_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Raft_Log_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[6].Descriptor()
}

func (Raft_Log_Type) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[6]
}

func (x Raft_Log_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Raft_Log_Type.Descriptor instead.
func (Raft_Log_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 0, 0}
}

type Raft_Snapshot_Version int32

const (
	Raft_Snapshot_Min Raft_Snapshot_Version = 0
	Raft_Snapshot_Max Raft_Snapshot_Version = 1
)

// Enum value maps for Raft_Snapshot_Version.
var (
	Raft_Snapshot_Version_name = map[int32]string{
		0: "Min",
		1: "Max",
	}
	Raft_Snapshot_Version_value = map[string]int32{
		"Min": 0,
		"Max": 1,
	}
)

func (x Raft_Snapshot_Version) Enum() *Raft_Snapshot_Version {
	p := new(Raft_Snapshot_Version)
	*p = x
	return p
}

func (x Raft_Snapshot_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Raft_Snapshot_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[7].Descriptor()
}

func (Raft_Snapshot_Version) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[7]
}

func (x Raft_Snapshot_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Raft_Snapshot_Version.Descriptor instead.
func (Raft_Snapshot_Version) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 2, 0}
}

type Raft_Snapshot_Key_Mode int32

const (
	Raft_Snapshot_Key_META Raft_Snapshot_Key_Mode = 0
	Raft_Snapshot_Key_DATA Raft_Snapshot_Key_Mode = 1
)

// Enum value maps for Raft_Snapshot_Key_Mode.
var (
	Raft_Snapshot_Key_Mode_name = map[int32]string{
		0: "META",
		1: "DATA",
	}
	Raft_Snapshot_Key_Mode_value = map[string]int32{
		"META": 0,
		"DATA": 1,
	}
)

func (x Raft_Snapshot_Key_Mode) Enum() *Raft_Snapshot_Key_Mode {
	p := new(Raft_Snapshot_Key_Mode)
	*p = x
	return p
}

func (x Raft_Snapshot_Key_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Raft_Snapshot_Key_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[8].Descriptor()
}

func (Raft_Snapshot_Key_Mode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[8]
}

func (x Raft_Snapshot_Key_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Raft_Snapshot_Key_Mode.Descriptor instead.
func (Raft_Snapshot_Key_Mode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 2, 0, 0}
}

type Raft_Config_Server_Suffrage int32

const (
	Raft_Config_Server_Voter    Raft_Config_Server_Suffrage = 0
	Raft_Config_Server_Nonvoter Raft_Config_Server_Suffrage = 1
	Raft_Config_Server_Staging  Raft_Config_Server_Suffrage = 2
)

// Enum value maps for Raft_Config_Server_Suffrage.
var (
	Raft_Config_Server_Suffrage_name = map[int32]string{
		0: "Voter",
		1: "Nonvoter",
		2: "Staging",
	}
	Raft_Config_Server_Suffrage_value = map[string]int32{
		"Voter":    0,
		"Nonvoter": 1,
		"Staging":  2,
	}
)

func (x Raft_Config_Server_Suffrage) Enum() *Raft_Config_Server_Suffrage {
	p := new(Raft_Config_Server_Suffrage)
	*p = x
	return p
}

func (x Raft_Config_Server_Suffrage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Raft_Config_Server_Suffrage) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[9].Descriptor()
}

func (Raft_Config_Server_Suffrage) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[9]
}

func (x Raft_Config_Server_Suffrage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Raft_Config_Server_Suffrage.Descriptor instead.
func (Raft_Config_Server_Suffrage) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 3, 0, 0}
}

type Raft_RPC_Command_Header_Version int32

const (
	Raft_RPC_Command_Header_Min Raft_RPC_Command_Header_Version = 0
	Raft_RPC_Command_Header_Max Raft_RPC_Command_Header_Version = 1
)

// Enum value maps for Raft_RPC_Command_Header_Version.
var (
	Raft_RPC_Command_Header_Version_name = map[int32]string{
		0: "Min",
		1: "Max",
	}
	Raft_RPC_Command_Header_Version_value = map[string]int32{
		"Min": 0,
		"Max": 1,
	}
)

func (x Raft_RPC_Command_Header_Version) Enum() *Raft_RPC_Command_Header_Version {
	p := new(Raft_RPC_Command_Header_Version)
	*p = x
	return p
}

func (x Raft_RPC_Command_Header_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Raft_RPC_Command_Header_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[10].Descriptor()
}

func (Raft_RPC_Command_Header_Version) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[10]
}

func (x Raft_RPC_Command_Header_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Raft_RPC_Command_Header_Version.Descriptor instead.
func (Raft_RPC_Command_Header_Version) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 4, 0}
}

type StoreKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string      `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Prefix    StorePrefix `protobuf:"varint,2,opt,name=prefix,proto3,enum=v1.StorePrefix" json:"prefix,omitempty"`
}

func (x *StoreKey) Reset() {
	*x = StoreKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreKey) ProtoMessage() {}

func (x *StoreKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreKey.ProtoReflect.Descriptor instead.
func (*StoreKey) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *StoreKey) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StoreKey) GetPrefix() StorePrefix {
	if x != nil {
		return x.Prefix
	}
	return StorePrefix_SITES
}

type Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *Site) Reset() {
	*x = Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *Site) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *Build) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Configuration object for vince instance
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the main badger database.
	DbPath string `protobuf:"bytes,1,opt,name=db_path,json=dbPath,proto3" json:"db_path,omitempty"`
	// Path to where block files are stored. Blocks are stored as files with ULID
	// as filenames
	BlocksPath string `protobuf:"bytes,2,opt,name=blocks_path,json=blocksPath,proto3" json:"blocks_path,omitempty"`
	// host:port to bind for http api. This is used by serve command. The server
	// serves ui console
	ListenAddress string `protobuf:"bytes,3,opt,name=listen_address,json=listenAddress,proto3" json:"listen_address,omitempty"`
	// Control how much is logged options are
	// trace,debug,info,warn,error,fatal,panic
	LogLevel string `protobuf:"bytes,4,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// Interval for syncing buffered entries. By default events are buffered and
	// periodically saved.
	SyncInterval *durationpb.Duration `protobuf:"bytes,5,opt,name=sync_interval,json=syncInterval,proto3" json:"sync_interval,omitempty"`
	// Expose /debug/pprof endpoint when serving
	EnableProfile bool `protobuf:"varint,6,opt,name=enable_profile,json=enableProfile,proto3" json:"enable_profile,omitempty"`
	// host:port to bind myslq server. Serves web analytics via MySQL compliant
	// wire protocol.
	MysqlListenAddress string             `protobuf:"bytes,7,opt,name=mysql_listen_address,json=mysqlListenAddress,proto3" json:"mysql_listen_address,omitempty"`
	TlsCertFile        string             `protobuf:"bytes,8,opt,name=tls_cert_file,json=tlsCertFile,proto3" json:"tls_cert_file,omitempty"`
	TlsKeyFile         string             `protobuf:"bytes,9,opt,name=tls_key_file,json=tlsKeyFile,proto3" json:"tls_key_file,omitempty"`
	EventsBufferSize   int64              `protobuf:"varint,10,opt,name=events_buffer_size,json=eventsBufferSize,proto3" json:"events_buffer_size,omitempty"`
	Notifiers          []*Config_Notifier `protobuf:"bytes,11,rep,name=notifiers,proto3" json:"notifiers,omitempty"`
	ServerId           string             `protobuf:"bytes,12,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	RaftPath           string             `protobuf:"bytes,13,opt,name=raft_path,json=raftPath,proto3" json:"raft_path,omitempty"`
	Cluster            *Config_Cluster    `protobuf:"bytes,14,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *Config) GetDbPath() string {
	if x != nil {
		return x.DbPath
	}
	return ""
}

func (x *Config) GetBlocksPath() string {
	if x != nil {
		return x.BlocksPath
	}
	return ""
}

func (x *Config) GetListenAddress() string {
	if x != nil {
		return x.ListenAddress
	}
	return ""
}

func (x *Config) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Config) GetSyncInterval() *durationpb.Duration {
	if x != nil {
		return x.SyncInterval
	}
	return nil
}

func (x *Config) GetEnableProfile() bool {
	if x != nil {
		return x.EnableProfile
	}
	return false
}

func (x *Config) GetMysqlListenAddress() string {
	if x != nil {
		return x.MysqlListenAddress
	}
	return ""
}

func (x *Config) GetTlsCertFile() string {
	if x != nil {
		return x.TlsCertFile
	}
	return ""
}

func (x *Config) GetTlsKeyFile() string {
	if x != nil {
		return x.TlsKeyFile
	}
	return ""
}

func (x *Config) GetEventsBufferSize() int64 {
	if x != nil {
		return x.EventsBufferSize
	}
	return 0
}

func (x *Config) GetNotifiers() []*Config_Notifier {
	if x != nil {
		return x.Notifiers
	}
	return nil
}

func (x *Config) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *Config) GetRaftPath() string {
	if x != nil {
		return x.RaftPath
	}
	return ""
}

func (x *Config) GetCluster() *Config_Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	HashedPassword []byte `protobuf:"bytes,2,opt,name=hashed_password,json=hashedPassword,proto3" json:"hashed_password,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetHashedPassword() []byte {
	if x != nil {
		return x.HashedPassword
	}
	return nil
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Authentication details of vince instances
	Instance map[string]*Client_Instance `protobuf:"bytes,2,rep,name=instance,proto3" json:"instance,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The default auth name to use.
	Active *Client_Active `protobuf:"bytes,4,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *Client) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *Client) GetInstance() map[string]*Client_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *Client) GetActive() *Client_Active {
	if x != nil {
		return x.Active
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *Token) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Code  int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

type Notice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Notice) Reset() {
	*x = Notice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notice) ProtoMessage() {}

func (x *Notice) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notice.ProtoReflect.Descriptor instead.
func (*Notice) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

type Raft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft) Reset() {
	*x = Raft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft) ProtoMessage() {}

func (x *Raft) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft.ProtoReflect.Descriptor instead.
func (*Raft) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

type Site_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store  *StoreKey `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Domain string    `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *Site_Key) Reset() {
	*x = Site_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site_Key) ProtoMessage() {}

func (x *Site_Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site_Key.ProtoReflect.Descriptor instead.
func (*Site_Key) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Site_Key) GetStore() *StoreKey {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *Site_Key) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type Site_GetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Site_GetOptions) Reset() {
	*x = Site_GetOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site_GetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site_GetOptions) ProtoMessage() {}

func (x *Site_GetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site_GetOptions.ProtoReflect.Descriptor instead.
func (*Site_GetOptions) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1, 1}
}

type Site_CreateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *Site_CreateOptions) Reset() {
	*x = Site_CreateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site_CreateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site_CreateOptions) ProtoMessage() {}

func (x *Site_CreateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site_CreateOptions.ProtoReflect.Descriptor instead.
func (*Site_CreateOptions) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Site_CreateOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type Site_ListOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Site_ListOptions) Reset() {
	*x = Site_ListOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site_ListOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site_ListOptions) ProtoMessage() {}

func (x *Site_ListOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site_ListOptions.ProtoReflect.Descriptor instead.
func (*Site_ListOptions) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1, 3}
}

type Site_DeleteOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *Site_DeleteOptions) Reset() {
	*x = Site_DeleteOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site_DeleteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site_DeleteOptions) ProtoMessage() {}

func (x *Site_DeleteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site_DeleteOptions.ProtoReflect.Descriptor instead.
func (*Site_DeleteOptions) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Site_DeleteOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type Site_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Site `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Site_List) Reset() {
	*x = Site_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site_List) ProtoMessage() {}

func (x *Site_List) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site_List.ProtoReflect.Descriptor instead.
func (*Site_List) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Site_List) GetList() []*Site {
	if x != nil {
		return x.List
	}
	return nil
}

type Block_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store  *StoreKey      `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Kind   Block_Key_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=v1.Block_Key_Kind" json:"kind,omitempty"`
	Domain string         `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Uid    string         `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Block_Key) Reset() {
	*x = Block_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Key) ProtoMessage() {}

func (x *Block_Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Key.ProtoReflect.Descriptor instead.
func (*Block_Key) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Block_Key) GetStore() *StoreKey {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *Block_Key) GetKind() Block_Key_Kind {
	if x != nil {
		return x.Kind
	}
	return Block_Key_METADATA
}

func (x *Block_Key) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Block_Key) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type Block_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of bitmaps each belonging to a row group. This allows us to select
	// row groups that might contain relevant data based on indexed columns.
	RowGroupBitmap [][]byte `protobuf:"bytes,1,rep,name=row_group_bitmap,json=rowGroupBitmap,proto3" json:"row_group_bitmap,omitempty"`
	// A list of min/max timestamp observed per row group
	TimeRange []*Block_Index_Range `protobuf:"bytes,2,rep,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *Block_Index) Reset() {
	*x = Block_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Index) ProtoMessage() {}

func (x *Block_Index) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Index.ProtoReflect.Descriptor instead.
func (*Block_Index) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Block_Index) GetRowGroupBitmap() [][]byte {
	if x != nil {
		return x.RowGroupBitmap
	}
	return nil
}

func (x *Block_Index) GetTimeRange() []*Block_Index_Range {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

type Block_Index_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum timestamp value observed in a row group.
	Min *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum timestamp value observed a row group.
	Max *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Block_Index_Range) Reset() {
	*x = Block_Index_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Index_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Index_Range) ProtoMessage() {}

func (x *Block_Index_Range) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Index_Range.ProtoReflect.Descriptor instead.
func (*Block_Index_Range) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *Block_Index_Range) GetMin() *timestamppb.Timestamp {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Block_Index_Range) GetMax() *timestamppb.Timestamp {
	if x != nil {
		return x.Max
	}
	return nil
}

type Config_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            Config_Cluster_Version `protobuf:"varint,1,opt,name=version,proto3,enum=v1.Config_Cluster_Version" json:"version,omitempty"`
	HeartbeatTimeout   *durationpb.Duration   `protobuf:"bytes,2,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	ElectionTimeout    *durationpb.Duration   `protobuf:"bytes,3,opt,name=election_timeout,json=electionTimeout,proto3" json:"election_timeout,omitempty"`
	CommitTimeout      *durationpb.Duration   `protobuf:"bytes,4,opt,name=commit_timeout,json=commitTimeout,proto3" json:"commit_timeout,omitempty"`
	MaxAppendEntries   int32                  `protobuf:"varint,5,opt,name=max_append_entries,json=maxAppendEntries,proto3" json:"max_append_entries,omitempty"`
	BatchAcpply        bool                   `protobuf:"varint,6,opt,name=batch_acpply,json=batchAcpply,proto3" json:"batch_acpply,omitempty"`
	ShutdowmOnRemove   bool                   `protobuf:"varint,7,opt,name=shutdowm_on_remove,json=shutdowmOnRemove,proto3" json:"shutdowm_on_remove,omitempty"`
	TrailingLogs       uint64                 `protobuf:"varint,8,opt,name=trailing_logs,json=trailingLogs,proto3" json:"trailing_logs,omitempty"`
	SnapshotInterval   *durationpb.Duration   `protobuf:"bytes,9,opt,name=snapshot_interval,json=snapshotInterval,proto3" json:"snapshot_interval,omitempty"`
	SnapshotThreshold  uint64                 `protobuf:"varint,10,opt,name=snapshot_threshold,json=snapshotThreshold,proto3" json:"snapshot_threshold,omitempty"`
	LeaderLeaseTimeout *durationpb.Duration   `protobuf:"bytes,11,opt,name=leader_lease_timeout,json=leaderLeaseTimeout,proto3" json:"leader_lease_timeout,omitempty"`
	LocalId            string                 `protobuf:"bytes,12,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
}

func (x *Config_Cluster) Reset() {
	*x = Config_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Cluster) ProtoMessage() {}

func (x *Config_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Cluster.ProtoReflect.Descriptor instead.
func (*Config_Cluster) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Config_Cluster) GetVersion() Config_Cluster_Version {
	if x != nil {
		return x.Version
	}
	return Config_Cluster_Min
}

func (x *Config_Cluster) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *Config_Cluster) GetElectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ElectionTimeout
	}
	return nil
}

func (x *Config_Cluster) GetCommitTimeout() *durationpb.Duration {
	if x != nil {
		return x.CommitTimeout
	}
	return nil
}

func (x *Config_Cluster) GetMaxAppendEntries() int32 {
	if x != nil {
		return x.MaxAppendEntries
	}
	return 0
}

func (x *Config_Cluster) GetBatchAcpply() bool {
	if x != nil {
		return x.BatchAcpply
	}
	return false
}

func (x *Config_Cluster) GetShutdowmOnRemove() bool {
	if x != nil {
		return x.ShutdowmOnRemove
	}
	return false
}

func (x *Config_Cluster) GetTrailingLogs() uint64 {
	if x != nil {
		return x.TrailingLogs
	}
	return 0
}

func (x *Config_Cluster) GetSnapshotInterval() *durationpb.Duration {
	if x != nil {
		return x.SnapshotInterval
	}
	return nil
}

func (x *Config_Cluster) GetSnapshotThreshold() uint64 {
	if x != nil {
		return x.SnapshotThreshold
	}
	return 0
}

func (x *Config_Cluster) GetLeaderLeaseTimeout() *durationpb.Duration {
	if x != nil {
		return x.LeaderLeaseTimeout
	}
	return nil
}

func (x *Config_Cluster) GetLocalId() string {
	if x != nil {
		return x.LocalId
	}
	return ""
}

type Config_Notifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Provider:
	//
	//	*Config_Notifier_Email
	//	*Config_Notifier_Webhook
	Provider isConfig_Notifier_Provider `protobuf_oneof:"provider"`
}

func (x *Config_Notifier) Reset() {
	*x = Config_Notifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Notifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Notifier) ProtoMessage() {}

func (x *Config_Notifier) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Notifier.ProtoReflect.Descriptor instead.
func (*Config_Notifier) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Config_Notifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Config_Notifier) GetProvider() isConfig_Notifier_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *Config_Notifier) GetEmail() *Config_Email {
	if x, ok := x.GetProvider().(*Config_Notifier_Email); ok {
		return x.Email
	}
	return nil
}

func (x *Config_Notifier) GetWebhook() *Config_Webhook {
	if x, ok := x.GetProvider().(*Config_Notifier_Webhook); ok {
		return x.Webhook
	}
	return nil
}

type isConfig_Notifier_Provider interface {
	isConfig_Notifier_Provider()
}

type Config_Notifier_Email struct {
	Email *Config_Email `protobuf:"bytes,2,opt,name=email,proto3,oneof"`
}

type Config_Notifier_Webhook struct {
	Webhook *Config_Webhook `protobuf:"bytes,3,opt,name=webhook,proto3,oneof"`
}

func (*Config_Notifier_Email) isConfig_Notifier_Provider() {}

func (*Config_Notifier_Webhook) isConfig_Notifier_Provider() {}

type Config_Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To           string                 `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	From         string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Hello        string                 `protobuf:"bytes,3,opt,name=hello,proto3" json:"hello,omitempty"`
	HostPort     string                 `protobuf:"bytes,4,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
	AuthUsername string                 `protobuf:"bytes,5,opt,name=auth_username,json=authUsername,proto3" json:"auth_username,omitempty"`
	AuthPassword string                 `protobuf:"bytes,6,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	AuthSecret   string                 `protobuf:"bytes,7,opt,name=auth_secret,json=authSecret,proto3" json:"auth_secret,omitempty"`
	AuthIdentity string                 `protobuf:"bytes,8,opt,name=auth_identity,json=authIdentity,proto3" json:"auth_identity,omitempty"`
	Headers      map[string]string      `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Html         string                 `protobuf:"bytes,10,opt,name=html,proto3" json:"html,omitempty"`
	Text         string                 `protobuf:"bytes,11,opt,name=text,proto3" json:"text,omitempty"`
	RequireTls   bool                   `protobuf:"varint,12,opt,name=require_tls,json=requireTls,proto3" json:"require_tls,omitempty"`
	TlsConfig    *Config_HTTP_TLSConfig `protobuf:"bytes,13,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
}

func (x *Config_Email) Reset() {
	*x = Config_Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Email) ProtoMessage() {}

func (x *Config_Email) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Email.ProtoReflect.Descriptor instead.
func (*Config_Email) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Config_Email) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Config_Email) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Config_Email) GetHello() string {
	if x != nil {
		return x.Hello
	}
	return ""
}

func (x *Config_Email) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *Config_Email) GetAuthUsername() string {
	if x != nil {
		return x.AuthUsername
	}
	return ""
}

func (x *Config_Email) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *Config_Email) GetAuthSecret() string {
	if x != nil {
		return x.AuthSecret
	}
	return ""
}

func (x *Config_Email) GetAuthIdentity() string {
	if x != nil {
		return x.AuthIdentity
	}
	return ""
}

func (x *Config_Email) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Config_Email) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *Config_Email) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Config_Email) GetRequireTls() bool {
	if x != nil {
		return x.RequireTls
	}
	return false
}

func (x *Config_Email) GetTlsConfig() *Config_HTTP_TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

type Config_Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpConfig *Config_HTTP `protobuf:"bytes,1,opt,name=http_config,json=httpConfig,proto3" json:"http_config,omitempty"`
	Url        string       `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Config_Webhook) Reset() {
	*x = Config_Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Webhook) ProtoMessage() {}

func (x *Config_Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Webhook.ProtoReflect.Descriptor instead.
func (*Config_Webhook) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 3}
}

func (x *Config_Webhook) GetHttpConfig() *Config_HTTP {
	if x != nil {
		return x.HttpConfig
	}
	return nil
}

func (x *Config_Webhook) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Config_HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicAuth     *Config_HTTP_BasicAuth     `protobuf:"bytes,1,opt,name=basic_auth,json=basicAuth,proto3" json:"basic_auth,omitempty"`
	Authorization *Config_HTTP_Authorization `protobuf:"bytes,2,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Pauth2        *Config_HTTP_OAuth2        `protobuf:"bytes,3,opt,name=pauth2,proto3" json:"pauth2,omitempty"`
	TlsConfig     *Config_HTTP_TLSConfig     `protobuf:"bytes,4,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
}

func (x *Config_HTTP) Reset() {
	*x = Config_HTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP) ProtoMessage() {}

func (x *Config_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP.ProtoReflect.Descriptor instead.
func (*Config_HTTP) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 4}
}

func (x *Config_HTTP) GetBasicAuth() *Config_HTTP_BasicAuth {
	if x != nil {
		return x.BasicAuth
	}
	return nil
}

func (x *Config_HTTP) GetAuthorization() *Config_HTTP_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Config_HTTP) GetPauth2() *Config_HTTP_OAuth2 {
	if x != nil {
		return x.Pauth2
	}
	return nil
}

func (x *Config_HTTP) GetTlsConfig() *Config_HTTP_TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

type Config_HTTP_BasicAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Config_HTTP_BasicAuth) Reset() {
	*x = Config_HTTP_BasicAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP_BasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP_BasicAuth) ProtoMessage() {}

func (x *Config_HTTP_BasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP_BasicAuth.ProtoReflect.Descriptor instead.
func (*Config_HTTP_BasicAuth) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 4, 0}
}

func (x *Config_HTTP_BasicAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Config_HTTP_BasicAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Config_HTTP_Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Credentials string `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *Config_HTTP_Authorization) Reset() {
	*x = Config_HTTP_Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP_Authorization) ProtoMessage() {}

func (x *Config_HTTP_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP_Authorization.ProtoReflect.Descriptor instead.
func (*Config_HTTP_Authorization) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 4, 1}
}

func (x *Config_HTTP_Authorization) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Config_HTTP_Authorization) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

type Config_HTTP_OAuth2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId       string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret   string                 `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	ClientScopes   []string               `protobuf:"bytes,3,rep,name=client_scopes,json=clientScopes,proto3" json:"client_scopes,omitempty"`
	TokenUrl       string                 `protobuf:"bytes,4,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	EndpointParams map[string]string      `protobuf:"bytes,5,rep,name=endpoint_params,json=endpointParams,proto3" json:"endpoint_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TlsConfig      *Config_HTTP_TLSConfig `protobuf:"bytes,6,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
}

func (x *Config_HTTP_OAuth2) Reset() {
	*x = Config_HTTP_OAuth2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP_OAuth2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP_OAuth2) ProtoMessage() {}

func (x *Config_HTTP_OAuth2) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP_OAuth2.ProtoReflect.Descriptor instead.
func (*Config_HTTP_OAuth2) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 4, 2}
}

func (x *Config_HTTP_OAuth2) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Config_HTTP_OAuth2) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *Config_HTTP_OAuth2) GetClientScopes() []string {
	if x != nil {
		return x.ClientScopes
	}
	return nil
}

func (x *Config_HTTP_OAuth2) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *Config_HTTP_OAuth2) GetEndpointParams() map[string]string {
	if x != nil {
		return x.EndpointParams
	}
	return nil
}

func (x *Config_HTTP_OAuth2) GetTlsConfig() *Config_HTTP_TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

type Config_HTTP_TLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyFile            string `protobuf:"bytes,1,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	CertFile           string `protobuf:"bytes,2,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	InsecureSkipVerify bool   `protobuf:"varint,3,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
}

func (x *Config_HTTP_TLSConfig) Reset() {
	*x = Config_HTTP_TLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_HTTP_TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_HTTP_TLSConfig) ProtoMessage() {}

func (x *Config_HTTP_TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_HTTP_TLSConfig.ProtoReflect.Descriptor instead.
func (*Config_HTTP_TLSConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5, 4, 3}
}

func (x *Config_HTTP_TLSConfig) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *Config_HTTP_TLSConfig) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *Config_HTTP_TLSConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

type Account_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store *StoreKey `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Name  string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Account_Key) Reset() {
	*x = Account_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_Key) ProtoMessage() {}

func (x *Account_Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_Key.ProtoReflect.Descriptor instead.
func (*Account_Key) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Account_Key) GetStore() *StoreKey {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *Account_Key) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Client_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts map[string]*Client_Auth `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Client_Instance) Reset() {
	*x = Client_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client_Instance) ProtoMessage() {}

func (x *Client_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client_Instance.ProtoReflect.Descriptor instead.
func (*Client_Instance) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Client_Instance) GetAccounts() map[string]*Client_Auth {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type Client_Active struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Account  string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *Client_Active) Reset() {
	*x = Client_Active{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client_Active) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client_Active) ProtoMessage() {}

func (x *Client_Active) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client_Active.ProtoReflect.Descriptor instead.
func (*Client_Active) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Client_Active) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Client_Active) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type Client_Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Api   string `protobuf:"bytes,3,opt,name=api,proto3" json:"api,omitempty"`
	Mysql string `protobuf:"bytes,4,opt,name=mysql,proto3" json:"mysql,omitempty"`
	Tls   bool   `protobuf:"varint,5,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Client_Auth) Reset() {
	*x = Client_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client_Auth) ProtoMessage() {}

func (x *Client_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client_Auth.ProtoReflect.Descriptor instead.
func (*Client_Auth) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7, 3}
}

func (x *Client_Auth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client_Auth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Client_Auth) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *Client_Auth) GetMysql() string {
	if x != nil {
		return x.Mysql
	}
	return ""
}

func (x *Client_Auth) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

type Token_CreateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// When true, the token will be generated by the server.
	Generate bool                 `protobuf:"varint,5,opt,name=generate,proto3" json:"generate,omitempty"`
	Ttl      *durationpb.Duration `protobuf:"bytes,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Token_CreateOptions) Reset() {
	*x = Token_CreateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token_CreateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token_CreateOptions) ProtoMessage() {}

func (x *Token_CreateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token_CreateOptions.ProtoReflect.Descriptor instead.
func (*Token_CreateOptions) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Token_CreateOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Token_CreateOptions) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Token_CreateOptions) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Token_CreateOptions) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Token_CreateOptions) GetGenerate() bool {
	if x != nil {
		return x.Generate
	}
	return false
}

func (x *Token_CreateOptions) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type Token_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store *StoreKey `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Hash  int64     `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Token_Key) Reset() {
	*x = Token_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token_Key) ProtoMessage() {}

func (x *Token_Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token_Key.ProtoReflect.Descriptor instead.
func (*Token_Key) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Token_Key) GetStore() *StoreKey {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *Token_Key) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type Query_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Query_Value_Number
	//	*Query_Value_Double
	//	*Query_Value_String_
	//	*Query_Value_Bool
	//	*Query_Value_Timestamp
	Value isQuery_Value_Value `protobuf_oneof:"value"`
}

func (x *Query_Value) Reset() {
	*x = Query_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Value) ProtoMessage() {}

func (x *Query_Value) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Value.ProtoReflect.Descriptor instead.
func (*Query_Value) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10, 0}
}

func (m *Query_Value) GetValue() isQuery_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Query_Value) GetNumber() int64 {
	if x, ok := x.GetValue().(*Query_Value_Number); ok {
		return x.Number
	}
	return 0
}

func (x *Query_Value) GetDouble() float64 {
	if x, ok := x.GetValue().(*Query_Value_Double); ok {
		return x.Double
	}
	return 0
}

func (x *Query_Value) GetString_() string {
	if x, ok := x.GetValue().(*Query_Value_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Query_Value) GetBool() bool {
	if x, ok := x.GetValue().(*Query_Value_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *Query_Value) GetTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*Query_Value_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

type isQuery_Value_Value interface {
	isQuery_Value_Value()
}

type Query_Value_Number struct {
	Number int64 `protobuf:"varint,1,opt,name=number,proto3,oneof"`
}

type Query_Value_Double struct {
	Double float64 `protobuf:"fixed64,2,opt,name=double,proto3,oneof"`
}

type Query_Value_String_ struct {
	String_ string `protobuf:"bytes,3,opt,name=string,proto3,oneof"`
}

type Query_Value_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,proto3,oneof"`
}

type Query_Value_Timestamp struct {
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof"`
}

func (*Query_Value_Number) isQuery_Value_Value() {}

func (*Query_Value_Double) isQuery_Value_Value() {}

func (*Query_Value_String_) isQuery_Value_Value() {}

func (*Query_Value_Bool) isQuery_Value_Value() {}

func (*Query_Value_Timestamp) isQuery_Value_Value() {}

type Query_RequestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string         `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Params []*Query_Param `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *Query_RequestOptions) Reset() {
	*x = Query_RequestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_RequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_RequestOptions) ProtoMessage() {}

func (x *Query_RequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_RequestOptions.ProtoReflect.Descriptor instead.
func (*Query_RequestOptions) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Query_RequestOptions) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Query_RequestOptions) GetParams() []*Query_Param {
	if x != nil {
		return x.Params
	}
	return nil
}

type Query_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Query_Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Query_Param) Reset() {
	*x = Query_Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Param) ProtoMessage() {}

func (x *Query_Param) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Param.ProtoReflect.Descriptor instead.
func (*Query_Param) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10, 2}
}

func (x *Query_Param) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Query_Param) GetValue() *Query_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Query_Colum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType Query_Colum_DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=v1.Query_Colum_DataType" json:"data_type,omitempty"`
}

func (x *Query_Colum) Reset() {
	*x = Query_Colum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Colum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Colum) ProtoMessage() {}

func (x *Query_Colum) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Colum.ProtoReflect.Descriptor instead.
func (*Query_Colum) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10, 3}
}

func (x *Query_Colum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Query_Colum) GetDataType() Query_Colum_DataType {
	if x != nil {
		return x.DataType
	}
	return Query_Colum_UNKNOWN
}

type Query_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Query_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Query_Row) Reset() {
	*x = Query_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Row) ProtoMessage() {}

func (x *Query_Row) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Row.ProtoReflect.Descriptor instead.
func (*Query_Row) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10, 4}
}

func (x *Query_Row) GetValues() []*Query_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Query_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elapsed *durationpb.Duration `protobuf:"bytes,1,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	Columns []*Query_Colum       `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	Rows    []*Query_Row         `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *Query_Result) Reset() {
	*x = Query_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Result) ProtoMessage() {}

func (x *Query_Result) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Result.ProtoReflect.Descriptor instead.
func (*Query_Result) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10, 5}
}

func (x *Query_Result) GetElapsed() *durationpb.Duration {
	if x != nil {
		return x.Elapsed
	}
	return nil
}

func (x *Query_Result) GetColumns() []*Query_Colum {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Query_Result) GetRows() []*Query_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type Raft_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      uint64                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term       uint64                 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Type       Raft_Log_Type          `protobuf:"varint,3,opt,name=type,proto3,enum=v1.Raft_Log_Type" json:"type,omitempty"`
	Data       []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Extensions []byte                 `protobuf:"bytes,5,opt,name=extensions,proto3" json:"extensions,omitempty"`
	AppendedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=appended_at,json=appendedAt,proto3" json:"appended_at,omitempty"`
}

func (x *Raft_Log) Reset() {
	*x = Raft_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_Log) ProtoMessage() {}

func (x *Raft_Log) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_Log.ProtoReflect.Descriptor instead.
func (*Raft_Log) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Raft_Log) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Raft_Log) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Raft_Log) GetType() Raft_Log_Type {
	if x != nil {
		return x.Type
	}
	return Raft_Log_Command
}

func (x *Raft_Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Raft_Log) GetExtensions() []byte {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Raft_Log) GetAppendedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AppendedAt
	}
	return nil
}

type Raft_Stable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft_Stable) Reset() {
	*x = Raft_Stable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_Stable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_Stable) ProtoMessage() {}

func (x *Raft_Stable) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_Stable.ProtoReflect.Descriptor instead.
func (*Raft_Stable) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 1}
}

type Raft_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     Raft_Snapshot_Version `protobuf:"varint,1,opt,name=version,proto3,enum=v1.Raft_Snapshot_Version" json:"version,omitempty"`
	Id          string                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Index       uint64                `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Term        uint64                `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Peers       []byte                `protobuf:"bytes,5,opt,name=peers,proto3" json:"peers,omitempty"`
	Config      *Raft_Config          `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	ConfigIndex uint64                `protobuf:"varint,7,opt,name=config_index,json=configIndex,proto3" json:"config_index,omitempty"`
	Size        int64                 `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Raft_Snapshot) Reset() {
	*x = Raft_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_Snapshot) ProtoMessage() {}

func (x *Raft_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_Snapshot.ProtoReflect.Descriptor instead.
func (*Raft_Snapshot) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 2}
}

func (x *Raft_Snapshot) GetVersion() Raft_Snapshot_Version {
	if x != nil {
		return x.Version
	}
	return Raft_Snapshot_Min
}

func (x *Raft_Snapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Raft_Snapshot) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Raft_Snapshot) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Raft_Snapshot) GetPeers() []byte {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Raft_Snapshot) GetConfig() *Raft_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Raft_Snapshot) GetConfigIndex() uint64 {
	if x != nil {
		return x.ConfigIndex
	}
	return 0
}

func (x *Raft_Snapshot) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Raft_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Raft_Config_Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *Raft_Config) Reset() {
	*x = Raft_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_Config) ProtoMessage() {}

func (x *Raft_Config) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_Config.ProtoReflect.Descriptor instead.
func (*Raft_Config) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 3}
}

func (x *Raft_Config) GetServers() []*Raft_Config_Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type Raft_RPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft_RPC) Reset() {
	*x = Raft_RPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC) ProtoMessage() {}

func (x *Raft_RPC) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC.ProtoReflect.Descriptor instead.
func (*Raft_RPC) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4}
}

type Raft_Log_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store *StoreKey `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Index int64     `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Raft_Log_Key) Reset() {
	*x = Raft_Log_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_Log_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_Log_Key) ProtoMessage() {}

func (x *Raft_Log_Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_Log_Key.ProtoReflect.Descriptor instead.
func (*Raft_Log_Key) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *Raft_Log_Key) GetStore() *StoreKey {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *Raft_Log_Key) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Raft_Stable_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store *StoreKey `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Key   []byte    `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Raft_Stable_Key) Reset() {
	*x = Raft_Stable_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_Stable_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_Stable_Key) ProtoMessage() {}

func (x *Raft_Stable_Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_Stable_Key.ProtoReflect.Descriptor instead.
func (*Raft_Stable_Key) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 1, 0}
}

func (x *Raft_Stable_Key) GetStore() *StoreKey {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *Raft_Stable_Key) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Raft_Snapshot_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store *StoreKey              `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Mode  Raft_Snapshot_Key_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=v1.Raft_Snapshot_Key_Mode" json:"mode,omitempty"`
	Id    string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Raft_Snapshot_Key) Reset() {
	*x = Raft_Snapshot_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_Snapshot_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_Snapshot_Key) ProtoMessage() {}

func (x *Raft_Snapshot_Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_Snapshot_Key.ProtoReflect.Descriptor instead.
func (*Raft_Snapshot_Key) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 2, 0}
}

func (x *Raft_Snapshot_Key) GetStore() *StoreKey {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *Raft_Snapshot_Key) GetMode() Raft_Snapshot_Key_Mode {
	if x != nil {
		return x.Mode
	}
	return Raft_Snapshot_Key_META
}

func (x *Raft_Snapshot_Key) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Raft_Config_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suffrage Raft_Config_Server_Suffrage `protobuf:"varint,1,opt,name=suffrage,proto3,enum=v1.Raft_Config_Server_Suffrage" json:"suffrage,omitempty"`
	Id       string                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Address  string                      `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Raft_Config_Server) Reset() {
	*x = Raft_Config_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_Config_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_Config_Server) ProtoMessage() {}

func (x *Raft_Config_Server) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_Config_Server.ProtoReflect.Descriptor instead.
func (*Raft_Config_Server) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 3, 0}
}

func (x *Raft_Config_Server) GetSuffrage() Raft_Config_Server_Suffrage {
	if x != nil {
		return x.Suffrage
	}
	return Raft_Config_Server_Voter
}

func (x *Raft_Config_Server) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Raft_Config_Server) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Raft_RPC_Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft_RPC_Call) Reset() {
	*x = Raft_RPC_Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Call) ProtoMessage() {}

func (x *Raft_RPC_Call) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Call.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Call) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 0}
}

type Raft_RPC_Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft_RPC_Command) Reset() {
	*x = Raft_RPC_Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command) ProtoMessage() {}

func (x *Raft_RPC_Command) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1}
}

type Raft_RPC_Call_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Raft_RPC_Call_Request_AppendEntries
	//	*Raft_RPC_Call_Request_Vote
	//	*Raft_RPC_Call_Request_InstallSnapshot
	//	*Raft_RPC_Call_Request_TimeoutNow
	Kind isRaft_RPC_Call_Request_Kind `protobuf_oneof:"kind"`
}

func (x *Raft_RPC_Call_Request) Reset() {
	*x = Raft_RPC_Call_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Call_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Call_Request) ProtoMessage() {}

func (x *Raft_RPC_Call_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Call_Request.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Call_Request) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 0, 0}
}

func (m *Raft_RPC_Call_Request) GetKind() isRaft_RPC_Call_Request_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Raft_RPC_Call_Request) GetAppendEntries() *Raft_RPC_Command_AppendEntries_Request {
	if x, ok := x.GetKind().(*Raft_RPC_Call_Request_AppendEntries); ok {
		return x.AppendEntries
	}
	return nil
}

func (x *Raft_RPC_Call_Request) GetVote() *Raft_RPC_Command_Vote_Request {
	if x, ok := x.GetKind().(*Raft_RPC_Call_Request_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *Raft_RPC_Call_Request) GetInstallSnapshot() *Raft_RPC_Command_InstallSnapshot_Request {
	if x, ok := x.GetKind().(*Raft_RPC_Call_Request_InstallSnapshot); ok {
		return x.InstallSnapshot
	}
	return nil
}

func (x *Raft_RPC_Call_Request) GetTimeoutNow() *Raft_RPC_Command_TimeoutNow_Request {
	if x, ok := x.GetKind().(*Raft_RPC_Call_Request_TimeoutNow); ok {
		return x.TimeoutNow
	}
	return nil
}

type isRaft_RPC_Call_Request_Kind interface {
	isRaft_RPC_Call_Request_Kind()
}

type Raft_RPC_Call_Request_AppendEntries struct {
	AppendEntries *Raft_RPC_Command_AppendEntries_Request `protobuf:"bytes,1,opt,name=append_entries,json=appendEntries,proto3,oneof"`
}

type Raft_RPC_Call_Request_Vote struct {
	Vote *Raft_RPC_Command_Vote_Request `protobuf:"bytes,2,opt,name=vote,proto3,oneof"`
}

type Raft_RPC_Call_Request_InstallSnapshot struct {
	InstallSnapshot *Raft_RPC_Command_InstallSnapshot_Request `protobuf:"bytes,3,opt,name=install_snapshot,json=installSnapshot,proto3,oneof"`
}

type Raft_RPC_Call_Request_TimeoutNow struct {
	TimeoutNow *Raft_RPC_Command_TimeoutNow_Request `protobuf:"bytes,4,opt,name=timeout_now,json=timeoutNow,proto3,oneof"`
}

func (*Raft_RPC_Call_Request_AppendEntries) isRaft_RPC_Call_Request_Kind() {}

func (*Raft_RPC_Call_Request_Vote) isRaft_RPC_Call_Request_Kind() {}

func (*Raft_RPC_Call_Request_InstallSnapshot) isRaft_RPC_Call_Request_Kind() {}

func (*Raft_RPC_Call_Request_TimeoutNow) isRaft_RPC_Call_Request_Kind() {}

type Raft_RPC_Call_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Raft_RPC_Call_Response_AppendEntries
	//	*Raft_RPC_Call_Response_Vote
	//	*Raft_RPC_Call_Response_InstallSnapshot
	//	*Raft_RPC_Call_Response_TimeoutNow
	Kind  isRaft_RPC_Call_Response_Kind `protobuf_oneof:"kind"`
	Error string                        `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Raft_RPC_Call_Response) Reset() {
	*x = Raft_RPC_Call_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Call_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Call_Response) ProtoMessage() {}

func (x *Raft_RPC_Call_Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Call_Response.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Call_Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 0, 1}
}

func (m *Raft_RPC_Call_Response) GetKind() isRaft_RPC_Call_Response_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Raft_RPC_Call_Response) GetAppendEntries() *Raft_RPC_Command_AppendEntries_Response {
	if x, ok := x.GetKind().(*Raft_RPC_Call_Response_AppendEntries); ok {
		return x.AppendEntries
	}
	return nil
}

func (x *Raft_RPC_Call_Response) GetVote() *Raft_RPC_Command_Vote_Response {
	if x, ok := x.GetKind().(*Raft_RPC_Call_Response_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *Raft_RPC_Call_Response) GetInstallSnapshot() *Raft_RPC_Command_InstallSnapshot_Response {
	if x, ok := x.GetKind().(*Raft_RPC_Call_Response_InstallSnapshot); ok {
		return x.InstallSnapshot
	}
	return nil
}

func (x *Raft_RPC_Call_Response) GetTimeoutNow() *Raft_RPC_Command_TimeoutNow_Response {
	if x, ok := x.GetKind().(*Raft_RPC_Call_Response_TimeoutNow); ok {
		return x.TimeoutNow
	}
	return nil
}

func (x *Raft_RPC_Call_Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type isRaft_RPC_Call_Response_Kind interface {
	isRaft_RPC_Call_Response_Kind()
}

type Raft_RPC_Call_Response_AppendEntries struct {
	AppendEntries *Raft_RPC_Command_AppendEntries_Response `protobuf:"bytes,1,opt,name=append_entries,json=appendEntries,proto3,oneof"`
}

type Raft_RPC_Call_Response_Vote struct {
	Vote *Raft_RPC_Command_Vote_Response `protobuf:"bytes,2,opt,name=vote,proto3,oneof"`
}

type Raft_RPC_Call_Response_InstallSnapshot struct {
	InstallSnapshot *Raft_RPC_Command_InstallSnapshot_Response `protobuf:"bytes,3,opt,name=install_snapshot,json=installSnapshot,proto3,oneof"`
}

type Raft_RPC_Call_Response_TimeoutNow struct {
	TimeoutNow *Raft_RPC_Command_TimeoutNow_Response `protobuf:"bytes,4,opt,name=timeout_now,json=timeoutNow,proto3,oneof"`
}

func (*Raft_RPC_Call_Response_AppendEntries) isRaft_RPC_Call_Response_Kind() {}

func (*Raft_RPC_Call_Response_Vote) isRaft_RPC_Call_Response_Kind() {}

func (*Raft_RPC_Call_Response_InstallSnapshot) isRaft_RPC_Call_Response_Kind() {}

func (*Raft_RPC_Call_Response_TimeoutNow) isRaft_RPC_Call_Response_Kind() {}

type Raft_RPC_Command_AppendEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft_RPC_Command_AppendEntries) Reset() {
	*x = Raft_RPC_Command_AppendEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_AppendEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_AppendEntries) ProtoMessage() {}

func (x *Raft_RPC_Command_AppendEntries) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_AppendEntries.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_AppendEntries) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 0}
}

type Raft_RPC_Command_Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft_RPC_Command_Vote) Reset() {
	*x = Raft_RPC_Command_Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_Vote) ProtoMessage() {}

func (x *Raft_RPC_Command_Vote) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_Vote.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_Vote) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 1}
}

type Raft_RPC_Command_InstallSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft_RPC_Command_InstallSnapshot) Reset() {
	*x = Raft_RPC_Command_InstallSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_InstallSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_InstallSnapshot) ProtoMessage() {}

func (x *Raft_RPC_Command_InstallSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_InstallSnapshot.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_InstallSnapshot) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 2}
}

type Raft_RPC_Command_TimeoutNow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft_RPC_Command_TimeoutNow) Reset() {
	*x = Raft_RPC_Command_TimeoutNow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_TimeoutNow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_TimeoutNow) ProtoMessage() {}

func (x *Raft_RPC_Command_TimeoutNow) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_TimeoutNow.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_TimeoutNow) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 3}
}

type Raft_RPC_Command_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version Raft_RPC_Command_Header_Version `protobuf:"varint,1,opt,name=version,proto3,enum=v1.Raft_RPC_Command_Header_Version" json:"version,omitempty"`
	Id      []byte                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Addr    []byte                          `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *Raft_RPC_Command_Header) Reset() {
	*x = Raft_RPC_Command_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_Header) ProtoMessage() {}

func (x *Raft_RPC_Command_Header) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_Header.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_Header) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 4}
}

func (x *Raft_RPC_Command_Header) GetVersion() Raft_RPC_Command_Header_Version {
	if x != nil {
		return x.Version
	}
	return Raft_RPC_Command_Header_Min
}

func (x *Raft_RPC_Command_Header) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Raft_RPC_Command_Header) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

type Raft_RPC_Command_AppendEntries_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            *Raft_RPC_Command_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Term              uint64                   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	PrevLogEntry      uint64                   `protobuf:"varint,4,opt,name=prev_log_entry,json=prevLogEntry,proto3" json:"prev_log_entry,omitempty"`
	PrevLogTerm       uint64                   `protobuf:"varint,5,opt,name=prev_log_term,json=prevLogTerm,proto3" json:"prev_log_term,omitempty"`
	Entries           []*Raft_Log              `protobuf:"bytes,6,rep,name=entries,proto3" json:"entries,omitempty"`
	LeaderCommitIndex uint64                   `protobuf:"varint,7,opt,name=leader_commit_index,json=leaderCommitIndex,proto3" json:"leader_commit_index,omitempty"`
}

func (x *Raft_RPC_Command_AppendEntries_Request) Reset() {
	*x = Raft_RPC_Command_AppendEntries_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_AppendEntries_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_AppendEntries_Request) ProtoMessage() {}

func (x *Raft_RPC_Command_AppendEntries_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_AppendEntries_Request.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_AppendEntries_Request) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 0, 0}
}

func (x *Raft_RPC_Command_AppendEntries_Request) GetHeader() *Raft_RPC_Command_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Raft_RPC_Command_AppendEntries_Request) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Raft_RPC_Command_AppendEntries_Request) GetPrevLogEntry() uint64 {
	if x != nil {
		return x.PrevLogEntry
	}
	return 0
}

func (x *Raft_RPC_Command_AppendEntries_Request) GetPrevLogTerm() uint64 {
	if x != nil {
		return x.PrevLogTerm
	}
	return 0
}

func (x *Raft_RPC_Command_AppendEntries_Request) GetEntries() []*Raft_Log {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *Raft_RPC_Command_AppendEntries_Request) GetLeaderCommitIndex() uint64 {
	if x != nil {
		return x.LeaderCommitIndex
	}
	return 0
}

type Raft_RPC_Command_AppendEntries_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *Raft_RPC_Command_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Term           uint64                   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	LastLog        uint64                   `protobuf:"varint,3,opt,name=last_log,json=lastLog,proto3" json:"last_log,omitempty"`
	Success        bool                     `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	NoRetryBackoff bool                     `protobuf:"varint,5,opt,name=no_retry_backoff,json=noRetryBackoff,proto3" json:"no_retry_backoff,omitempty"`
}

func (x *Raft_RPC_Command_AppendEntries_Response) Reset() {
	*x = Raft_RPC_Command_AppendEntries_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_AppendEntries_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_AppendEntries_Response) ProtoMessage() {}

func (x *Raft_RPC_Command_AppendEntries_Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_AppendEntries_Response.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_AppendEntries_Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 0, 1}
}

func (x *Raft_RPC_Command_AppendEntries_Response) GetHeader() *Raft_RPC_Command_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Raft_RPC_Command_AppendEntries_Response) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Raft_RPC_Command_AppendEntries_Response) GetLastLog() uint64 {
	if x != nil {
		return x.LastLog
	}
	return 0
}

func (x *Raft_RPC_Command_AppendEntries_Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Raft_RPC_Command_AppendEntries_Response) GetNoRetryBackoff() bool {
	if x != nil {
		return x.NoRetryBackoff
	}
	return false
}

type Raft_RPC_Command_Vote_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *Raft_RPC_Command_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Term               uint64                   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	LastLogIndex       uint64                   `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	LastLogTerm        uint64                   `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm,proto3" json:"last_log_term,omitempty"`
	LeadershipTransfer bool                     `protobuf:"varint,5,opt,name=leadership_transfer,json=leadershipTransfer,proto3" json:"leadership_transfer,omitempty"`
}

func (x *Raft_RPC_Command_Vote_Request) Reset() {
	*x = Raft_RPC_Command_Vote_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_Vote_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_Vote_Request) ProtoMessage() {}

func (x *Raft_RPC_Command_Vote_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_Vote_Request.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_Vote_Request) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 1, 0}
}

func (x *Raft_RPC_Command_Vote_Request) GetHeader() *Raft_RPC_Command_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Raft_RPC_Command_Vote_Request) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Raft_RPC_Command_Vote_Request) GetLastLogIndex() uint64 {
	if x != nil {
		return x.LastLogIndex
	}
	return 0
}

func (x *Raft_RPC_Command_Vote_Request) GetLastLogTerm() uint64 {
	if x != nil {
		return x.LastLogTerm
	}
	return 0
}

func (x *Raft_RPC_Command_Vote_Request) GetLeadershipTransfer() bool {
	if x != nil {
		return x.LeadershipTransfer
	}
	return false
}

type Raft_RPC_Command_Vote_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Raft_RPC_Command_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Term    uint64                   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Granted bool                     `protobuf:"varint,3,opt,name=granted,proto3" json:"granted,omitempty"`
}

func (x *Raft_RPC_Command_Vote_Response) Reset() {
	*x = Raft_RPC_Command_Vote_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_Vote_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_Vote_Response) ProtoMessage() {}

func (x *Raft_RPC_Command_Vote_Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_Vote_Response.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_Vote_Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 1, 1}
}

func (x *Raft_RPC_Command_Vote_Response) GetHeader() *Raft_RPC_Command_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Raft_RPC_Command_Vote_Response) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Raft_RPC_Command_Vote_Response) GetGranted() bool {
	if x != nil {
		return x.Granted
	}
	return false
}

type Raft_RPC_Command_InstallSnapshot_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *Raft_RPC_Command_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SnapshotVersion    Raft_Snapshot_Version    `protobuf:"varint,2,opt,name=snapshot_version,json=snapshotVersion,proto3,enum=v1.Raft_Snapshot_Version" json:"snapshot_version,omitempty"`
	Term               uint64                   `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Leader             []byte                   `protobuf:"bytes,4,opt,name=leader,proto3" json:"leader,omitempty"`
	LastLogIndex       uint64                   `protobuf:"varint,5,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	LastLogTerm        uint64                   `protobuf:"varint,6,opt,name=last_log_term,json=lastLogTerm,proto3" json:"last_log_term,omitempty"`
	Configuration      []byte                   `protobuf:"bytes,7,opt,name=configuration,proto3" json:"configuration,omitempty"`
	ConfigurationIndex uint64                   `protobuf:"varint,8,opt,name=configuration_index,json=configurationIndex,proto3" json:"configuration_index,omitempty"`
	Size               int64                    `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) Reset() {
	*x = Raft_RPC_Command_InstallSnapshot_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_InstallSnapshot_Request) ProtoMessage() {}

func (x *Raft_RPC_Command_InstallSnapshot_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_InstallSnapshot_Request.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_InstallSnapshot_Request) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 2, 0}
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) GetHeader() *Raft_RPC_Command_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) GetSnapshotVersion() Raft_Snapshot_Version {
	if x != nil {
		return x.SnapshotVersion
	}
	return Raft_Snapshot_Min
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) GetLeader() []byte {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) GetLastLogIndex() uint64 {
	if x != nil {
		return x.LastLogIndex
	}
	return 0
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) GetLastLogTerm() uint64 {
	if x != nil {
		return x.LastLogTerm
	}
	return 0
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) GetConfigurationIndex() uint64 {
	if x != nil {
		return x.ConfigurationIndex
	}
	return 0
}

func (x *Raft_RPC_Command_InstallSnapshot_Request) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Raft_RPC_Command_InstallSnapshot_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Raft_RPC_Command_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Term    uint64                   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Success bool                     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Raft_RPC_Command_InstallSnapshot_Response) Reset() {
	*x = Raft_RPC_Command_InstallSnapshot_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_InstallSnapshot_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_InstallSnapshot_Response) ProtoMessage() {}

func (x *Raft_RPC_Command_InstallSnapshot_Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_InstallSnapshot_Response.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_InstallSnapshot_Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 2, 1}
}

func (x *Raft_RPC_Command_InstallSnapshot_Response) GetHeader() *Raft_RPC_Command_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Raft_RPC_Command_InstallSnapshot_Response) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Raft_RPC_Command_InstallSnapshot_Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Raft_RPC_Command_TimeoutNow_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Raft_RPC_Command_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *Raft_RPC_Command_TimeoutNow_Request) Reset() {
	*x = Raft_RPC_Command_TimeoutNow_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_TimeoutNow_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_TimeoutNow_Request) ProtoMessage() {}

func (x *Raft_RPC_Command_TimeoutNow_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_TimeoutNow_Request.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_TimeoutNow_Request) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 3, 0}
}

func (x *Raft_RPC_Command_TimeoutNow_Request) GetHeader() *Raft_RPC_Command_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type Raft_RPC_Command_TimeoutNow_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Raft_RPC_Command_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *Raft_RPC_Command_TimeoutNow_Response) Reset() {
	*x = Raft_RPC_Command_TimeoutNow_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_RPC_Command_TimeoutNow_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_RPC_Command_TimeoutNow_Response) ProtoMessage() {}

func (x *Raft_RPC_Command_TimeoutNow_Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_RPC_Command_TimeoutNow_Response.ProtoReflect.Descriptor instead.
func (*Raft_RPC_Command_TimeoutNow_Response) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12, 4, 1, 3, 1}
}

func (x *Raft_RPC_Command_TimeoutNow_Response) GetHeader() *Raft_RPC_Command_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x51, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x22, 0xf6, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x41, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x0c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x27, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x0d,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x27, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x24, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf5, 0x02, 0x0a,
	0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x9c, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4b, 0x65, 0x79, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x10, 0x01, 0x1a, 0xcc, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0x63, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x22, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x21,
	0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xf5, 0x15, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x79,
	0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6c, 0x73, 0x43,
	0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6c, 0x73, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x66, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x1a, 0xaf, 0x05, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x10,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x63, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6d, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6d, 0x4f, 0x6e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x4b, 0x0a, 0x14, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x61, 0x78, 0x10, 0x03, 0x1a, 0x84, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x2e, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x42,
	0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0xe6, 0x03, 0x0a, 0x05,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x38,
	0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74,
	0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12,
	0x30, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x1a, 0xd3, 0x06, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x38, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x70,
	0x61, 0x75, 0x74, 0x68, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x52, 0x06, 0x70, 0x61, 0x75, 0x74, 0x68, 0x32, 0x12, 0x38, 0x0a, 0x0a, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x43, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x45, 0x0a, 0x0d, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x1a, 0xde, 0x02, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x53, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x41, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x75, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x1a, 0x3d, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xa2, 0x04, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x50,
	0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x97, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x4c, 0x0a, 0x0d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x6a, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x1a, 0xbd, 0x01, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a, 0x3d, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x20, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x31, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x05,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0xb0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4f, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x42, 0x0a, 0x05, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xa8, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x05, 0x1a, 0x2e, 0x0a, 0x03, 0x52, 0x6f,
	0x77, 0x12, 0x27, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x08, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x22, 0x96, 0x1a, 0x0a, 0x04, 0x52, 0x61, 0x66, 0x74, 0x1a, 0xf8, 0x02, 0x0a, 0x03,
	0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3f, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x6e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6f, 0x70, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x1a, 0x45, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0x3b, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x94, 0x03,
	0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x27, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a,
	0x85, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4b, 0x65, 0x79,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x22, 0x1b, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x61, 0x78, 0x10, 0x01, 0x1a, 0xde, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x30, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08,
	0x73, 0x75, 0x66, 0x66, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x66, 0x66, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x73, 0x75, 0x66, 0x66, 0x72, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x08, 0x53, 0x75, 0x66, 0x66, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f,
	0x6e, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x1a, 0xd3, 0x11, 0x0a, 0x03, 0x52, 0x50, 0x43, 0x1a, 0xb3, 0x05,
	0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0xc6, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x53, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e,
	0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65,
	0x12, 0x59, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f,
	0x77, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a,
	0xe1, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52,
	0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x10,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74,
	0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4e, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x1a, 0x95, 0x0c, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a,
	0xbb, 0x03, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d,
	0x12, 0x26, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xb2, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e,
	0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e,
	0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x1a, 0xc5, 0x02,
	0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x1a, 0xcd, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x6d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x1a, 0xe8, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0xe5, 0x02, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e,
	0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x1a, 0x6d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x1a, 0x8d, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x77, 0x1a,
	0x3e, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a,
	0x3f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x1a, 0x88, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x1b,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x69, 0x6e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x10, 0x01, 0x2a, 0x7b, 0x0a, 0x0b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x49,
	0x54, 0x45, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x4c, 0x4f,
	0x47, 0x53, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x4e,
	0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x07, 0x2a, 0xe1, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x69, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x10, 0x07, 0x12, 0x0b, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x10, 0x0c, 0x12, 0x06,
	0x0a, 0x02, 0x6f, 0x73, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x10, 0x0f,
	0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x10, 0x10, 0x12, 0x13,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x12, 0x12,
	0x0a, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x75,
	0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x10, 0x14, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x15, 0x12, 0x0e,
	0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x16, 0x12, 0x0e,
	0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x17, 0x12, 0x0c,
	0x0a, 0x08, 0x75, 0x74, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x10, 0x18, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x72, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 73)
var file_api_proto_goTypes = []interface{}{
	(StorePrefix)(0),                                  // 0: v1.StorePrefix
	(Column)(0),                                       // 1: v1.Column
	(Block_Key_Kind)(0),                               // 2: v1.Block.Key.Kind
	(Config_Cluster_Version)(0),                       // 3: v1.Config.Cluster.Version
	(Token_Issuer)(0),                                 // 4: v1.Token.Issuer
	(Query_Colum_DataType)(0),                         // 5: v1.Query.Colum.DataType
	(Raft_Log_Type)(0),                                // 6: v1.Raft.Log.Type
	(Raft_Snapshot_Version)(0),                        // 7: v1.Raft.Snapshot.Version
	(Raft_Snapshot_Key_Mode)(0),                       // 8: v1.Raft.Snapshot.Key.Mode
	(Raft_Config_Server_Suffrage)(0),                  // 9: v1.Raft.Config.Server.Suffrage
	(Raft_RPC_Command_Header_Version)(0),              // 10: v1.Raft.RPC.Command.Header.Version
	(*StoreKey)(nil),                                  // 11: v1.StoreKey
	(*Site)(nil),                                      // 12: v1.Site
	(*Block)(nil),                                     // 13: v1.Block
	(*Status)(nil),                                    // 14: v1.Status
	(*Build)(nil),                                     // 15: v1.Build
	(*Config)(nil),                                    // 16: v1.Config
	(*Account)(nil),                                   // 17: v1.Account
	(*Client)(nil),                                    // 18: v1.Client
	(*Token)(nil),                                     // 19: v1.Token
	(*Error)(nil),                                     // 20: v1.Error
	(*Query)(nil),                                     // 21: v1.Query
	(*Notice)(nil),                                    // 22: v1.Notice
	(*Raft)(nil),                                      // 23: v1.Raft
	(*Site_Key)(nil),                                  // 24: v1.Site.Key
	(*Site_GetOptions)(nil),                           // 25: v1.Site.GetOptions
	(*Site_CreateOptions)(nil),                        // 26: v1.Site.CreateOptions
	(*Site_ListOptions)(nil),                          // 27: v1.Site.ListOptions
	(*Site_DeleteOptions)(nil),                        // 28: v1.Site.DeleteOptions
	(*Site_List)(nil),                                 // 29: v1.Site.List
	(*Block_Key)(nil),                                 // 30: v1.Block.Key
	(*Block_Index)(nil),                               // 31: v1.Block.Index
	(*Block_Index_Range)(nil),                         // 32: v1.Block.Index.Range
	(*Config_Cluster)(nil),                            // 33: v1.Config.Cluster
	(*Config_Notifier)(nil),                           // 34: v1.Config.Notifier
	(*Config_Email)(nil),                              // 35: v1.Config.Email
	(*Config_Webhook)(nil),                            // 36: v1.Config.Webhook
	(*Config_HTTP)(nil),                               // 37: v1.Config.HTTP
	nil,                                               // 38: v1.Config.Email.HeadersEntry
	(*Config_HTTP_BasicAuth)(nil),                     // 39: v1.Config.HTTP.BasicAuth
	(*Config_HTTP_Authorization)(nil),                 // 40: v1.Config.HTTP.Authorization
	(*Config_HTTP_OAuth2)(nil),                        // 41: v1.Config.HTTP.OAuth2
	(*Config_HTTP_TLSConfig)(nil),                     // 42: v1.Config.HTTP.TLSConfig
	nil,                                               // 43: v1.Config.HTTP.OAuth2.EndpointParamsEntry
	(*Account_Key)(nil),                               // 44: v1.Account.Key
	nil,                                               // 45: v1.Client.InstanceEntry
	(*Client_Instance)(nil),                           // 46: v1.Client.Instance
	(*Client_Active)(nil),                             // 47: v1.Client.Active
	(*Client_Auth)(nil),                               // 48: v1.Client.Auth
	nil,                                               // 49: v1.Client.Instance.AccountsEntry
	(*Token_CreateOptions)(nil),                       // 50: v1.Token.CreateOptions
	(*Token_Key)(nil),                                 // 51: v1.Token.Key
	(*Query_Value)(nil),                               // 52: v1.Query.Value
	(*Query_RequestOptions)(nil),                      // 53: v1.Query.RequestOptions
	(*Query_Param)(nil),                               // 54: v1.Query.Param
	(*Query_Colum)(nil),                               // 55: v1.Query.Colum
	(*Query_Row)(nil),                                 // 56: v1.Query.Row
	(*Query_Result)(nil),                              // 57: v1.Query.Result
	(*Raft_Log)(nil),                                  // 58: v1.Raft.Log
	(*Raft_Stable)(nil),                               // 59: v1.Raft.Stable
	(*Raft_Snapshot)(nil),                             // 60: v1.Raft.Snapshot
	(*Raft_Config)(nil),                               // 61: v1.Raft.Config
	(*Raft_RPC)(nil),                                  // 62: v1.Raft.RPC
	(*Raft_Log_Key)(nil),                              // 63: v1.Raft.Log.Key
	(*Raft_Stable_Key)(nil),                           // 64: v1.Raft.Stable.Key
	(*Raft_Snapshot_Key)(nil),                         // 65: v1.Raft.Snapshot.Key
	(*Raft_Config_Server)(nil),                        // 66: v1.Raft.Config.Server
	(*Raft_RPC_Call)(nil),                             // 67: v1.Raft.RPC.Call
	(*Raft_RPC_Command)(nil),                          // 68: v1.Raft.RPC.Command
	(*Raft_RPC_Call_Request)(nil),                     // 69: v1.Raft.RPC.Call.Request
	(*Raft_RPC_Call_Response)(nil),                    // 70: v1.Raft.RPC.Call.Response
	(*Raft_RPC_Command_AppendEntries)(nil),            // 71: v1.Raft.RPC.Command.AppendEntries
	(*Raft_RPC_Command_Vote)(nil),                     // 72: v1.Raft.RPC.Command.Vote
	(*Raft_RPC_Command_InstallSnapshot)(nil),          // 73: v1.Raft.RPC.Command.InstallSnapshot
	(*Raft_RPC_Command_TimeoutNow)(nil),               // 74: v1.Raft.RPC.Command.TimeoutNow
	(*Raft_RPC_Command_Header)(nil),                   // 75: v1.Raft.RPC.Command.Header
	(*Raft_RPC_Command_AppendEntries_Request)(nil),    // 76: v1.Raft.RPC.Command.AppendEntries.Request
	(*Raft_RPC_Command_AppendEntries_Response)(nil),   // 77: v1.Raft.RPC.Command.AppendEntries.Response
	(*Raft_RPC_Command_Vote_Request)(nil),             // 78: v1.Raft.RPC.Command.Vote.Request
	(*Raft_RPC_Command_Vote_Response)(nil),            // 79: v1.Raft.RPC.Command.Vote.Response
	(*Raft_RPC_Command_InstallSnapshot_Request)(nil),  // 80: v1.Raft.RPC.Command.InstallSnapshot.Request
	(*Raft_RPC_Command_InstallSnapshot_Response)(nil), // 81: v1.Raft.RPC.Command.InstallSnapshot.Response
	(*Raft_RPC_Command_TimeoutNow_Request)(nil),       // 82: v1.Raft.RPC.Command.TimeoutNow.Request
	(*Raft_RPC_Command_TimeoutNow_Response)(nil),      // 83: v1.Raft.RPC.Command.TimeoutNow.Response
	(*durationpb.Duration)(nil),                       // 84: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                     // 85: google.protobuf.Timestamp
}
var file_api_proto_depIdxs = []int32{
	0,  // 0: v1.StoreKey.prefix:type_name -> v1.StorePrefix
	84, // 1: v1.Config.sync_interval:type_name -> google.protobuf.Duration
	34, // 2: v1.Config.notifiers:type_name -> v1.Config.Notifier
	33, // 3: v1.Config.cluster:type_name -> v1.Config.Cluster
	45, // 4: v1.Client.instance:type_name -> v1.Client.InstanceEntry
	47, // 5: v1.Client.active:type_name -> v1.Client.Active
	11, // 6: v1.Site.Key.store:type_name -> v1.StoreKey
	12, // 7: v1.Site.List.list:type_name -> v1.Site
	11, // 8: v1.Block.Key.store:type_name -> v1.StoreKey
	2,  // 9: v1.Block.Key.kind:type_name -> v1.Block.Key.Kind
	32, // 10: v1.Block.Index.time_range:type_name -> v1.Block.Index.Range
	85, // 11: v1.Block.Index.Range.min:type_name -> google.protobuf.Timestamp
	85, // 12: v1.Block.Index.Range.max:type_name -> google.protobuf.Timestamp
	3,  // 13: v1.Config.Cluster.version:type_name -> v1.Config.Cluster.Version
	84, // 14: v1.Config.Cluster.heartbeat_timeout:type_name -> google.protobuf.Duration
	84, // 15: v1.Config.Cluster.election_timeout:type_name -> google.protobuf.Duration
	84, // 16: v1.Config.Cluster.commit_timeout:type_name -> google.protobuf.Duration
	84, // 17: v1.Config.Cluster.snapshot_interval:type_name -> google.protobuf.Duration
	84, // 18: v1.Config.Cluster.leader_lease_timeout:type_name -> google.protobuf.Duration
	35, // 19: v1.Config.Notifier.email:type_name -> v1.Config.Email
	36, // 20: v1.Config.Notifier.webhook:type_name -> v1.Config.Webhook
	38, // 21: v1.Config.Email.headers:type_name -> v1.Config.Email.HeadersEntry
	42, // 22: v1.Config.Email.tls_config:type_name -> v1.Config.HTTP.TLSConfig
	37, // 23: v1.Config.Webhook.http_config:type_name -> v1.Config.HTTP
	39, // 24: v1.Config.HTTP.basic_auth:type_name -> v1.Config.HTTP.BasicAuth
	40, // 25: v1.Config.HTTP.authorization:type_name -> v1.Config.HTTP.Authorization
	41, // 26: v1.Config.HTTP.pauth2:type_name -> v1.Config.HTTP.OAuth2
	42, // 27: v1.Config.HTTP.tls_config:type_name -> v1.Config.HTTP.TLSConfig
	43, // 28: v1.Config.HTTP.OAuth2.endpoint_params:type_name -> v1.Config.HTTP.OAuth2.EndpointParamsEntry
	42, // 29: v1.Config.HTTP.OAuth2.tls_config:type_name -> v1.Config.HTTP.TLSConfig
	11, // 30: v1.Account.Key.store:type_name -> v1.StoreKey
	46, // 31: v1.Client.InstanceEntry.value:type_name -> v1.Client.Instance
	49, // 32: v1.Client.Instance.accounts:type_name -> v1.Client.Instance.AccountsEntry
	48, // 33: v1.Client.Instance.AccountsEntry.value:type_name -> v1.Client.Auth
	84, // 34: v1.Token.CreateOptions.ttl:type_name -> google.protobuf.Duration
	11, // 35: v1.Token.Key.store:type_name -> v1.StoreKey
	85, // 36: v1.Query.Value.timestamp:type_name -> google.protobuf.Timestamp
	54, // 37: v1.Query.RequestOptions.params:type_name -> v1.Query.Param
	52, // 38: v1.Query.Param.value:type_name -> v1.Query.Value
	5,  // 39: v1.Query.Colum.data_type:type_name -> v1.Query.Colum.DataType
	52, // 40: v1.Query.Row.values:type_name -> v1.Query.Value
	84, // 41: v1.Query.Result.elapsed:type_name -> google.protobuf.Duration
	55, // 42: v1.Query.Result.columns:type_name -> v1.Query.Colum
	56, // 43: v1.Query.Result.rows:type_name -> v1.Query.Row
	6,  // 44: v1.Raft.Log.type:type_name -> v1.Raft.Log.Type
	85, // 45: v1.Raft.Log.appended_at:type_name -> google.protobuf.Timestamp
	7,  // 46: v1.Raft.Snapshot.version:type_name -> v1.Raft.Snapshot.Version
	61, // 47: v1.Raft.Snapshot.config:type_name -> v1.Raft.Config
	66, // 48: v1.Raft.Config.servers:type_name -> v1.Raft.Config.Server
	11, // 49: v1.Raft.Log.Key.store:type_name -> v1.StoreKey
	11, // 50: v1.Raft.Stable.Key.store:type_name -> v1.StoreKey
	11, // 51: v1.Raft.Snapshot.Key.store:type_name -> v1.StoreKey
	8,  // 52: v1.Raft.Snapshot.Key.mode:type_name -> v1.Raft.Snapshot.Key.Mode
	9,  // 53: v1.Raft.Config.Server.suffrage:type_name -> v1.Raft.Config.Server.Suffrage
	76, // 54: v1.Raft.RPC.Call.Request.append_entries:type_name -> v1.Raft.RPC.Command.AppendEntries.Request
	78, // 55: v1.Raft.RPC.Call.Request.vote:type_name -> v1.Raft.RPC.Command.Vote.Request
	80, // 56: v1.Raft.RPC.Call.Request.install_snapshot:type_name -> v1.Raft.RPC.Command.InstallSnapshot.Request
	82, // 57: v1.Raft.RPC.Call.Request.timeout_now:type_name -> v1.Raft.RPC.Command.TimeoutNow.Request
	77, // 58: v1.Raft.RPC.Call.Response.append_entries:type_name -> v1.Raft.RPC.Command.AppendEntries.Response
	79, // 59: v1.Raft.RPC.Call.Response.vote:type_name -> v1.Raft.RPC.Command.Vote.Response
	81, // 60: v1.Raft.RPC.Call.Response.install_snapshot:type_name -> v1.Raft.RPC.Command.InstallSnapshot.Response
	83, // 61: v1.Raft.RPC.Call.Response.timeout_now:type_name -> v1.Raft.RPC.Command.TimeoutNow.Response
	10, // 62: v1.Raft.RPC.Command.Header.version:type_name -> v1.Raft.RPC.Command.Header.Version
	75, // 63: v1.Raft.RPC.Command.AppendEntries.Request.header:type_name -> v1.Raft.RPC.Command.Header
	58, // 64: v1.Raft.RPC.Command.AppendEntries.Request.entries:type_name -> v1.Raft.Log
	75, // 65: v1.Raft.RPC.Command.AppendEntries.Response.header:type_name -> v1.Raft.RPC.Command.Header
	75, // 66: v1.Raft.RPC.Command.Vote.Request.header:type_name -> v1.Raft.RPC.Command.Header
	75, // 67: v1.Raft.RPC.Command.Vote.Response.header:type_name -> v1.Raft.RPC.Command.Header
	75, // 68: v1.Raft.RPC.Command.InstallSnapshot.Request.header:type_name -> v1.Raft.RPC.Command.Header
	7,  // 69: v1.Raft.RPC.Command.InstallSnapshot.Request.snapshot_version:type_name -> v1.Raft.Snapshot.Version
	75, // 70: v1.Raft.RPC.Command.InstallSnapshot.Response.header:type_name -> v1.Raft.RPC.Command.Header
	75, // 71: v1.Raft.RPC.Command.TimeoutNow.Request.header:type_name -> v1.Raft.RPC.Command.Header
	75, // 72: v1.Raft.RPC.Command.TimeoutNow.Response.header:type_name -> v1.Raft.RPC.Command.Header
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site_GetOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site_CreateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site_ListOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site_DeleteOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Index_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Notifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP_BasicAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP_Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP_OAuth2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_HTTP_TLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client_Active); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token_CreateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_RequestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Colum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_Stable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_Log_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_Stable_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_Snapshot_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_Config_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Call_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Call_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_AppendEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_InstallSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_TimeoutNow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_AppendEntries_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_AppendEntries_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_Vote_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_Vote_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_InstallSnapshot_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_InstallSnapshot_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_TimeoutNow_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_RPC_Command_TimeoutNow_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Config_Notifier_Email)(nil),
		(*Config_Notifier_Webhook)(nil),
	}
	file_api_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*Query_Value_Number)(nil),
		(*Query_Value_Double)(nil),
		(*Query_Value_String_)(nil),
		(*Query_Value_Bool)(nil),
		(*Query_Value_Timestamp)(nil),
	}
	file_api_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*Raft_RPC_Call_Request_AppendEntries)(nil),
		(*Raft_RPC_Call_Request_Vote)(nil),
		(*Raft_RPC_Call_Request_InstallSnapshot)(nil),
		(*Raft_RPC_Call_Request_TimeoutNow)(nil),
	}
	file_api_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*Raft_RPC_Call_Response_AppendEntries)(nil),
		(*Raft_RPC_Call_Response_Vote)(nil),
		(*Raft_RPC_Call_Response_InstallSnapshot)(nil),
		(*Raft_RPC_Call_Response_TimeoutNow)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   73,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
