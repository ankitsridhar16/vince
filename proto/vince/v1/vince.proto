syntax = "proto3";
package v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "vince/store/v1/store.proto";

message Site {
  string domain = 1;

  message Key {
    StoreKey store = 1;
    string domain = 2;
  }

  message Create {
    message Request { string domain = 1; }
    message Response { Site site = 1; }
  }

  message Get {
    message Request {}
    message Response { Site site = 1; }
  }

  message List {
    message Request {}
    message Response { repeated Site list = 1; }
  }

  message Delete {
    message Request { string domain = 1; }
    message Response {}
  }
}

message Status {}

message Build { string version = 1; }

// Configuration object for vince instance
message Config {
  // Path to the main badger database.
  string db_path = 1;

  // Path to where block files are stored. Blocks are stored as files with ULID
  // as filenames
  string blocks_path = 2;

  // host:port to bind for http api. This is used by serve command. The server
  // serves ui console
  string listen_address = 3;

  // Control how much is logged options are
  // trace,debug,info,warn,error,fatal,panic
  string log_level = 4;

  // Interval for syncing buffered entries. By default events are buffered and
  // periodically saved.
  google.protobuf.Duration sync_interval = 5;

  // Expose /debug/pprof endpoint when serving
  bool enable_profile = 6;

  // host:port to bind myslq server. Serves web analytics via MySQL compliant
  // wire protocol.
  string mysql_listen_address = 7;

  string tls_cert_file = 8;
  string tls_key_file = 9;

  int64 events_buffer_size = 10;

  repeated Notifier notifiers = 11;

  string server_id = 12;
  string raft_path = 13;

  message Notifier {
    string name = 1;
    oneof provider {
      Email email = 2;
      Webhook webhook = 3;
    }
  }

  message Email {
    string to = 1;
    string from = 2;
    string hello = 3;
    string host_port = 4;
    string auth_username = 5;
    string auth_password = 6;
    string auth_secret = 7;
    string auth_identity = 8;
    map<string, string> headers = 9;
    string html = 10;
    string text = 11;
    bool require_tls = 12;
    HTTP.TLSConfig tls_config = 13;
  }

  message Webhook {
    HTTP http_config = 1;
    string url = 2;
  }

  message HTTP {
    BasicAuth basic_auth = 1;
    Authorization authorization = 2;
    OAuth2 pauth2 = 3;
    TLSConfig tls_config = 4;

    message BasicAuth {
      string username = 1;
      string password = 2;
    }
    message Authorization {
      string type = 1;
      string credentials = 2;
    }
    message OAuth2 {
      string client_id = 1;
      string client_secret = 2;
      repeated string client_scopes = 3;
      string token_url = 4;
      map<string, string> endpoint_params = 5;
      TLSConfig tls_config = 6;
    }

    message TLSConfig {
      string key_file = 1;
      string cert_file = 2;
      bool insecure_skip_verify = 3;
    }
  }
}

message Account {
  string name = 1;
  bytes hashed_password = 2;

  message Key {
    StoreKey store = 1;
    string name = 2;
  }
}

message Client {
  bytes private_key = 1;

  // Authentication details of vince instances
  map<string, Instance> instance = 2;

  // Map of server_id to instance
  map<string, string> server_id = 3;

  // The default auth name to use.
  Active active = 4;

  map<string, Cluster.Config> clusters = 5;

  message Instance { map<string, Auth> accounts = 1; }

  message Active {
    string instance = 1;
    string account = 2;
  }
  message Auth {
    string name = 1;
    string token = 2;
    string server_id = 3;
  }
}

message Token {
  bytes pub_key = 1;

  message Create {
    message Request {
      string name = 1;
      string password = 2;
      string token = 3;
      bytes public_key = 4;
      // When true, the token will be generated by the server.
      bool generate = 5;
      google.protobuf.Duration ttl = 6;
    }

    message Response { Client.Auth auth = 1; }
  }

  message Key {
    StoreKey store = 1;
    int64 hash = 2;
  }

  enum Issuer {
    SERVER = 0;
    CLIENT = 1;
  }
}

message Error {
  string error = 1;
  int32 code = 2;
}

message Query {
  message Value {
    oneof value {
      int64 number = 1;
      double double = 2;
      string string = 3;
      bool bool = 4;
      google.protobuf.Timestamp timestamp = 5;
    }
  }

  message Request {
    string query = 1;
    repeated Param params = 2;
  }

  message Response {
    google.protobuf.Duration elapsed = 1;
    repeated Colum columns = 2;
    repeated Row rows = 3;
  }

  message Param {
    string name = 1;
    Value value = 2;
  }

  message Colum {
    string name = 1;
    DataType data_type = 2;

    enum DataType {
      UNKNOWN = 0;
      NUMBER = 1;
      DOUBLE = 2;
      STRING = 3;
      BOOL = 4;
      TIMESTAMP = 5;
    }
  }

  message Row { repeated Value values = 1; }
}

// Parquet fields used to store events. There are only two phisical data types
// int64 and string.
//
// The columns are grouped by data types for easy access
enum Column {
  bounce = 0;
  duration = 1;
  id = 2;
  session = 3;
  timestamp = 4;

  browser = 5;
  browser_version = 6;
  city = 7;
  country = 8;
  entry_page = 9;
  event = 10;
  exit_page = 11;
  host = 12;
  os = 13;
  os_version = 14;
  path = 15;
  referrer = 16;
  referrer_source = 17;
  region = 18;
  screen = 19;
  utm_campaign = 20;
  utm_content = 21;
  utm_medium = 22;
  utm_source = 23;
  utm_term = 24;
}

message Notice {}

message Raft {
  message Entry {
    bytes key = 1;
    bytes value = 2;
    google.protobuf.Duration expires = 3;
  }

  message Log {
    uint64 index = 1;
    uint64 term = 2;
    Type type = 3;
    bytes data = 4;
    bytes extensions = 5;
    google.protobuf.Timestamp appended_at = 6;

    enum Type {
      Command = 0;
      Noop = 1;
      AddPeerDeprecated = 2;
      RemovePeerDeprecated = 3;
      Barrier = 4;
      Configuration = 5;
    }
  }

  message Config {
    repeated Server servers = 1;

    message Server {
      Suffrage suffrage = 1;
      string id = 2;
      string address = 3;
      string token = 4;

      enum Suffrage {
        Voter = 0;
        Nonvoter = 1;
        Staging = 2;
      }
    }
  }

  message RPC {

    message Call {
      message Request {
        oneof kind {
          Command.AppendEntries.Request append_entries = 1;
          Command.Vote.Request vote = 2;
          Command.InstallSnapshot.Request install_snapshot = 3;
          Command.TimeoutNow.Request timeout_now = 4;
        }
      }
      message Response {
        oneof kind {
          Command.AppendEntries.Response append_entries = 1;
          Command.Vote.Response vote = 2;
          Command.InstallSnapshot.Response install_snapshot = 3;
          Command.TimeoutNow.Response timeout_now = 4;
        }
        string error = 5;
      }
    }

    message Command {
      message AppendEntries {
        message Request {
          Header header = 1;
          uint64 term = 2;
          uint64 prev_log_entry = 4;
          uint64 prev_log_term = 5;
          repeated Log entries = 6;
          uint64 leader_commit_index = 7;
        }
        message Response {
          Header header = 1;
          uint64 term = 2;
          uint64 last_log = 3;
          bool success = 4;
          bool no_retry_backoff = 5;
        }
      }

      message Vote {
        message Request {
          Header header = 1;
          uint64 term = 2;
          uint64 last_log_index = 3;
          uint64 last_log_term = 4;
          bool leadership_transfer = 5;
        }
        message Response {
          Header header = 1;
          uint64 term = 2;
          bool granted = 3;
        }
      }

      message InstallSnapshot {
        message Request {
          Header header = 1;
          Version snapshot_version = 2;
          uint64 term = 3;
          bytes leader = 4;
          uint64 last_log_index = 5;
          uint64 last_log_term = 6;
          bytes configuration = 7;
          uint64 configuration_index = 8;
          int64 size = 9;

          enum Version {
            Min = 0;
            Max = 1;
          }
        }
        message Response {
          Header header = 1;
          uint64 term = 2;
          bool success = 3;
        }
      }

      message TimeoutNow {
        message Request { Header header = 1; }
        message Response { Header header = 1; }
      }

      message Header {
        Version version = 1;
        bytes id = 2;
        bytes addr = 3;

        enum Version {
          Min = 0;
          Max = 1;
        }
      }
    }
  }
}

message Cluster {
  message Apply {
    message Request { Config config = 1; }
    message Response { string ok = 1; }
  }

  message Get {
    message Request {}
    message Response { Config config = 1; }
  }

  message Config {
    string name = 1;
    map<string, Node> nodes = 2;

    message Node {
      Client.Auth account = 1;
      // True if this node is used to bootstrap the cluster.
      bool bootstrap = 2;
      string address = 3;
    }
  }
}

service Vince {
  rpc CreateSite(Site.Create.Request) returns (Site.Create.Request);
}