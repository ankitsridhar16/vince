syntax = "proto3";
package v1;

import "google/protobuf/duration.proto";
import "vince/config/v1/config.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "buf/validate/validate.proto";

service Vince {
  rpc CreateToken(CreateTokenRequest) returns (CreateTokenResponse) {
    option (google.api.http) = {
      post : "/v1/tokens"
    };
  };
  rpc CreateSite(CreateSiteRequest) returns (CreateSiteResponse) {
    option (google.api.http) = {
      post : "/v1/sites"
    };
  };
  rpc GetSite(GetSiteRequest) returns (GetSiteResponse) {
    option (google.api.http) = {
      get : "/v1/site"
    };
  };
  rpc ListSites(ListSitesRequest) returns (ListSitesResponse) {
    option (google.api.http) = {
      get : "/v1/sites"
    };
  };
  rpc DeleteSite(DeleteSiteRequest) returns (DeleteSiteResponse) {
    option (google.api.http) = {
      delete : "/v1/site"
    };
  };
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post : "/v1/query"
    };
  };
  rpc ApplyCluster(ApplyClusterRequest) returns (ApplyClusterResponse) {
    option (google.api.http) = {
      post : "/v1/cluster/apply"
    };
  };
  rpc GetCluster(GetClusterRequest) returns (GetClusterResponse) {
    option (google.api.http) = {
      get : "/v1/cluster"
    };
  };
  rpc Version(google.protobuf.Empty) returns (Build) {
    option (google.api.http) = {
      get : "/v1/version"
    };
  };

  rpc SendEvent(Event) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/api/event"
    };
  };
}

message Token {
  bytes pub_key = 1;

  enum Issuer {
    SERVER = 0;
    CLIENT = 1;
  }
  // Defines the resources that this token has access to
  enum Scope {
    // Token has access to all vince resources
    ALL = 0;
    // Token  has access to only cluster resources.
    CLUSTER = 2;
  }
}

message CreateTokenRequest {
  string name = 1 [ (buf.validate.field).required = true ];
  string password = 2 [ (buf.validate.field).required = true ];
  string token = 3;
  bytes public_key = 4;
  // When true, the token will be generated by the server.
  bool generate = 5;
  google.protobuf.Duration ttl = 6;

  option (buf.validate.message).cel = {
    id : "client.token",
    message : "token  is required",
    expression : "this.generate ? true : size(this.token)>0",
  };
  option (buf.validate.message).cel = {
    id : "client.pub_key",
    message : "public_key  is required",
    expression : "this.generate ? true : size(this.public_key)>0",
  };
}

message CreateTokenResponse { Client.Auth auth = 1; }

message Site { string domain = 1; }
message CreateSiteRequest {
  string domain = 1 [
    (buf.validate.field).string.hostname = true,
    (buf.validate.field).required = true
  ];
}
message CreateSiteResponse { Site site = 1; }
message GetSiteRequest {}
message GetSiteResponse { Site site = 1; }
message ListSitesRequest {}
message ListSitesResponse { repeated Site list = 1; }
message DeleteSiteRequest { string domain = 1; }
message DeleteSiteResponse {}

message Account {
  string name = 1;
  bytes hashed_password = 2;
}

message Error {
  string error = 1;
  int32 code = 2;
}

message Query {
  message Value {
    oneof value {
      int64 number = 1;
      double double = 2;
      string string = 3;
      bool bool = 4;
      google.protobuf.Timestamp timestamp = 5;
    }
  }

  message Param {
    string name = 1;
    Value value = 2;
  }

  message Colum {
    string name = 1;
    DataType data_type = 2;

    enum DataType {
      UNKNOWN = 0;
      NUMBER = 1;
      DOUBLE = 2;
      STRING = 3;
      BOOL = 4;
      TIMESTAMP = 5;
    }
  }
  message Row { repeated Value values = 1; }
}

message QueryRequest {
  string query = 1;
  repeated Query.Param params = 2;
}

message QueryResponse {
  google.protobuf.Duration elapsed = 1;
  repeated Query.Colum columns = 2;
  repeated Query.Row rows = 3;
}

message ApplyClusterRequest { Cluster.Config config = 1; }
message ApplyClusterResponse { string ok = 1; }

message GetClusterRequest {}
message GetClusterResponse { Cluster.Config config = 1; }

message Status {}

message Notice {}

message Event {
  /// EventName
  string n = 1;
  string url = 2;
  // Domain
  string d = 3;
  // Screen width
  string w = 4;
  // Hash mode
  bool h = 5;
  string ip = 6;
  // user agent
  string ua = 7;
}