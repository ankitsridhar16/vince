package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"io/fs"
	"os"
	"path/filepath"
	"sort"

	"github.com/gernest/vince/tools"
)

func main() {
	ls := []string{
		"mobile",
		"tablet",
		"laptop",
		"desktop",
	}
	seen := map[string]struct{}{
		"mobile":  {},
		"tablet":  {},
		"laptop":  {},
		"desktop": {},
	}
	err := filepath.Walk(".", func(path string, info fs.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}
		if filepath.Ext(path) != ".json" {
			return nil
		}
		b, err := os.ReadFile(path)
		if err != nil {
			return err
		}
		var o []string
		err = json.Unmarshal(b, &o)
		if err != nil {
			return err
		}
		for _, v := range o {
			if _, ok := seen[v]; ok {
				continue
			}
			seen[v] = struct{}{}
			ls = append(ls, v)
		}
		return tools.Remove(path)
	})
	if err != nil {
		tools.Exit("failed building index ", err.Error())
	}
	sort.Strings(ls)
	var b bytes.Buffer
	b.WriteString(`
	// DO NOT EDIT Code generated by ua/index/main.go"
	package ua 

	var commonIndex =map[string]uint16{
	`)
	for i, k := range ls {
		fmt.Fprintf(&b, "%q:%d,\n", k, i)
	}
	b.WriteString("}\n")
	b.WriteString(`
	var commonIndexReverse =map[uint16]string{
	`)
	for i, k := range ls {
		fmt.Fprintf(&b, "%d:%q,\n", i, k)
	}
	b.WriteString("}\n")
	x, err := format.Source(b.Bytes())
	if err != nil {
		tools.Exit("failed formatting go source ", err.Error())
	}
	tools.WriteFile("index.go", x)
}
