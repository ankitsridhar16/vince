package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"sort"
	"strings"

	"github.com/gernest/vince/ua"
)

func main() {
	var b bytes.Buffer

	fmt.Fprintln(&b, "// DO NOT EDIT Code generated by ua/client/make_client.go")
	fmt.Fprintln(&b, " package ua")
	err := genBrowserEngine(&b)
	if err != nil {
		log.Fatal(err)
	}
	err = genBrowser(&b)
	if err != nil {
		log.Fatal(err)
	}
	err = genFeedReader(&b)
	if err != nil {
		log.Fatal(err)
	}
	err = genLibraries(&b)
	if err != nil {
		log.Fatal(err)
	}
	err = genMediaPlayers(&b)
	if err != nil {
		log.Fatal(err)
	}
	err = genMobileApps(&b)
	if err != nil {
		log.Fatal(err)
	}
	err = genPim(&b)
	if err != nil {
		log.Fatal(err)
	}
	r, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	os.WriteFile("ua_client.go", r, 0600)
}

type ClientReg struct {
	Regex   string  `yaml:"regex" json:"regex"`
	Name    string  `yaml:"name" json:"name"`
	Version string  `yaml:"version" json:"version"`
	Url     string  `yaml:"url" json:"url"`
	Type    string  `yaml:"type" json:"type"`
	Engine  *Engine `yaml:"engine" json:"engine"`
}

type Engine struct {
	Default  string            `yaml:"default" json:"default"`
	Versions map[string]string `yaml:"versions" json:"versions"`
}

func genBrowserEngine(b *bytes.Buffer) error {
	return generic(b, "BrowserEngine", "client/browser_engine.yml")
}

func genBrowser(b *bytes.Buffer) error {
	return generic(b, "Browser", "client/browsers.yml")
}
func genFeedReader(b *bytes.Buffer) error {
	return generic(b, "FeedReader", "client/feed_readers.yml")
}

func genLibraries(b *bytes.Buffer) error {
	return generic(b, "Library", "client/libraries.yml")
}

func genMediaPlayers(b *bytes.Buffer) error {
	return generic(b, "MediaPlayer", "client/mediaplayers.yml")
}
func genMobileApps(b *bytes.Buffer) error {
	return generic(b, "MobileApp", "client/mobile_apps.yml")
}
func genPim(b *bytes.Buffer) error {
	return generic(b, "Pim", "client/pim.yml")
}

func generic(b *bytes.Buffer, name string, path string) error {
	var items []*ClientReg
	err := ua.Read(path, &items)
	if err != nil {
		return err
	}
	var s strings.Builder
	for i, d := range items {
		// set kind
		if d.Type == "" {
			d.Type = name
		}
		if i != 0 {
			s.WriteByte('|')
		}
		s.WriteString(d.Regex)
	}
	if ua.IsStdRe(s.String()) {
		fmt.Fprintf(b, " var client%sAllRe= MatchRe(`%s`)\n", name, ua.Clean(s.String()))
	} else {
		fmt.Fprintf(b, " var client%sAllRe= MatchRe2(`%s`)\n", name, ua.Clean(s.String()))
	}
	fmt.Fprintf(b, "var client%sAll=[]*clientRe{\n", name)
	var buf bytes.Buffer
	for _, d := range items {
		buf.Reset()
		r := ua.Clean(d.Regex)
		if ua.IsStdRe(d.Regex) {
			fmt.Fprintf(&buf, "re:MatchRe(`%s`)", r)
		} else {
			fmt.Fprintf(&buf, "re: MatchRe2(`%s`)", r)
		}
		fmt.Fprintf(b, "{%s,name:%q", &buf, d.Name)
		if d.Version != "" {
			fmt.Fprintf(b, ",version:%q", d.Version)
		}
		if d.Type != "" {
			fmt.Fprintf(b, ",kind:%q", d.Type)
		}
		if d.Url != "" {
			fmt.Fprintf(b, ",url:%q", d.Url)
		}
		if d.Engine != nil {
			fmt.Fprintf(b, ",engine:&clientEngine{")
			if d.Engine.Default != "" {
				fmt.Fprintf(b, "def:%q,", d.Engine.Default)
			}
			if d.Engine.Versions != nil {
				var ls []string
				for k := range d.Engine.Versions {
					ls = append(ls, k)
				}
				sort.Sort(sort.StringSlice(ls))
				fmt.Fprintf(b, "versions:map[string]string{")
				for _, k := range ls {
					fmt.Fprintf(b, "%q:%q,\n", k, d.Engine.Versions[k])
				}
				fmt.Fprint(b, "},")
			}
			fmt.Fprint(b, "},")
		}
		fmt.Fprintf(b, "},\n")
	}
	fmt.Fprintln(b, "}")
	return nil
}
