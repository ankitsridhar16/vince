package client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/vinceanalytics/vince/tools"
	"github.com/vinceanalytics/vince/ua"
	"gopkg.in/yaml.v2"
)

var all = map[string]struct{}{}
var versions = map[string]struct{}{}

func Make(root string) {
	var b bytes.Buffer
	fmt.Fprintln(&b, "// DO NOT EDIT Code generated by ua/client/make_client.go")
	fmt.Fprintln(&b, " package ua")
	genBrowserEngine(&b, root)
	genBrowser(&b, root)
	genFeedReader(&b, root)
	genLibraries(&b, root)
	genMediaPlayers(&b, root)
	genMobileApps(&b, root)
	genPim(&b, root)
	var ls []string
	for k := range all {
		ls = append(ls, k)
	}
	sort.Strings(ls)
	var o bytes.Buffer
	json.NewEncoder(&o).Encode(ls)
	tools.WriteFile("browsers.json", o.Bytes())
	ls = ls[:0]
	for k := range versions {
		ls = append(ls, k)
	}
	sort.Strings(ls)
	o.Reset()
	json.NewEncoder(&o).Encode(ls)
	tools.WriteFile("browser_version.json", o.Bytes())
	r, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	tools.WriteFile("ua_client.go", r)
}

type ClientReg struct {
	Regex   string  `yaml:"regex" json:"regex"`
	Name    string  `yaml:"name" json:"name"`
	Version string  `yaml:"version" json:"version"`
	Url     string  `yaml:"url" json:"url"`
	Type    string  `yaml:"type" json:"type"`
	Engine  *Engine `yaml:"engine" json:"engine"`
}

type Engine struct {
	Default  string            `yaml:"default" json:"default"`
	Versions map[string]string `yaml:"versions" json:"versions"`
}

func genBrowserEngine(b *bytes.Buffer, root string) {
	generic(b, "BrowserEngine", root, "client/browser_engine.yml")
}

func genBrowser(b *bytes.Buffer, root string) {
	generic(b, "Browser", root, "client/browsers.yml")
}
func genFeedReader(b *bytes.Buffer, root string) {
	generic(b, "FeedReader", root, "client/feed_readers.yml")
}

func genLibraries(b *bytes.Buffer, root string) {
	generic(b, "Library", root, "client/libraries.yml")
}

func genMediaPlayers(b *bytes.Buffer, root string) {
	generic(b, "MediaPlayer", root, "client/mediaplayers.yml")
}
func genMobileApps(b *bytes.Buffer, root string) {
	generic(b, "MobileApp", root, "client/mobile_apps.yml")
}
func genPim(b *bytes.Buffer, root string) {
	generic(b, "Pim", root, "client/pim.yml")
}

func generic(b *bytes.Buffer, name string, root string, path string) {
	var items []*ClientReg
	readUA(root, path, &items)
	var s strings.Builder
	for i, d := range items {
		if !strings.Contains(d.Name, "$") {
			all[d.Name] = struct{}{}
		}
		if d.Version != "" && !strings.Contains(d.Version, "$") {
			versions[d.Version] = struct{}{}
		}
		// set kind
		if d.Type == "" {
			d.Type = name
		}
		if i != 0 {
			s.WriteByte('|')
		}
		s.WriteString(d.Regex)
	}
	if ua.IsStdRe(s.String()) {
		fmt.Fprintf(b, " var client%sAllRe= MatchRe(`%s`)\n", name, ua.Clean(s.String()))
	} else {
		fmt.Fprintf(b, " var client%sAllRe= MatchRe2(`%s`)\n", name, ua.Clean(s.String()))
	}
	fmt.Fprintf(b, "var client%sAll=[]*clientRe{\n", name)
	var buf bytes.Buffer
	for _, d := range items {
		buf.Reset()
		r := ua.Clean(d.Regex)
		if ua.IsStdRe(d.Regex) {
			fmt.Fprintf(&buf, "re:MatchRe(`%s`)", r)
		} else {
			fmt.Fprintf(&buf, "re: MatchRe2(`%s`)", r)
		}
		fmt.Fprintf(b, "{%s,name:%q", &buf, d.Name)
		if d.Version != "" {
			fmt.Fprintf(b, ",version:%q", d.Version)
		}
		if d.Type != "" {
			fmt.Fprintf(b, ",kind:%q", d.Type)
		}
		if d.Url != "" {
			fmt.Fprintf(b, ",url:%q", d.Url)
		}
		if d.Engine != nil {
			fmt.Fprintf(b, ",engine:&clientEngine{")
			if d.Engine.Default != "" {
				fmt.Fprintf(b, "def:%q,", d.Engine.Default)
			}
			if d.Engine.Versions != nil {
				var ls []string
				for k := range d.Engine.Versions {
					ls = append(ls, k)
				}
				sort.Strings(ls)
				fmt.Fprintf(b, "versions:map[string]string{")
				for _, k := range ls {
					fmt.Fprintf(b, "%q:%q,\n", k, d.Engine.Versions[k])
				}
				fmt.Fprint(b, "},")
			}
			fmt.Fprint(b, "},")
		}
		fmt.Fprintf(b, "},\n")
	}
	fmt.Fprintln(b, "}")
}

func readUA(root, name string, out any) {
	path := filepath.Join(root, name)
	f, err := os.ReadFile(path)
	if err != nil {
		tools.Exit("failed to read ua file ", path)
	}
	err = yaml.Unmarshal(f, out)
	if err != nil {
		tools.Exit("failed to  decode ", path, err.Error())
	}
}
