package os

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/gernest/vince/tools"
	"github.com/gernest/vince/ua"
	"gopkg.in/yaml.v2"
)

var allOs = map[string]struct{}{}
var versions = map[string]struct{}{}

func Make(root string) {
	var b bytes.Buffer

	fmt.Fprintln(&b, "// DO NOT EDIT Code generated by ua/os/make_os.go")
	fmt.Fprintln(&b, " package ua")

	generate(&b, root, "oss.yml")
	var ls []string
	for k := range allOs {
		ls = append(ls, k)
	}
	sort.Strings(ls)
	var o bytes.Buffer
	json.NewEncoder(&o).Encode(ls)
	tools.WriteFile("os.json", o.Bytes())
	ls = ls[:0]
	for k := range versions {
		ls = append(ls, k)
	}
	sort.Strings(ls)
	o.Reset()
	json.NewEncoder(&o).Encode(ls)
	tools.WriteFile("os_version.json", o.Bytes())

	r, err := format.Source(b.Bytes())
	if err != nil {
		tools.Exit("failed  formatting go source ", err.Error())
	}
	tools.WriteFile("ua_os.go", r)
}

type OsReg struct {
	Regex   string `yaml:"regex" json:"regex"`
	Name    string `yaml:"name" json:"name"`
	Version string `yaml:"version" json:"version"`
}

func generate(b *bytes.Buffer, root, path string) {
	var items []*OsReg
	readUA(root, path, &items)
	var s strings.Builder
	for i, d := range items {
		if !strings.Contains(d.Name, "$") {
			allOs[d.Name] = struct{}{}
		}
		if d.Version != "" && !strings.Contains(d.Version, "$") {
			versions[d.Version] = struct{}{}
		}
		if i != 0 {
			s.WriteByte('|')
		}
		s.WriteString(d.Regex)
	}
	if ua.IsStdRe(s.String()) {
		fmt.Fprintf(b, " var osAllRe= MatchRe(`%s`)\n", ua.Clean(s.String()))
	} else {
		fmt.Fprintf(b, " var osAllRe= MatchRe2(`%s`)\n", ua.Clean(s.String()))
	}
	fmt.Fprintf(b, "var osAll=[]*clientRe{\n")
	var buf bytes.Buffer
	for _, d := range items {
		buf.Reset()
		r := ua.Clean(d.Regex)
		if ua.IsStdRe(d.Regex) {
			fmt.Fprintf(&buf, "re:MatchRe(`%s`)", r)
		} else {
			fmt.Fprintf(&buf, "re: MatchRe2(`%s`)", r)
		}
		fmt.Fprintf(b, "{%s,name:%q", &buf, d.Name)
		if d.Version != "" {
			fmt.Fprintf(b, ",version:%q", d.Version)
		}
		fmt.Fprintf(b, "},\n")
	}
	fmt.Fprintln(b, "}")
}

func readUA(root, name string, out any) {
	path := filepath.Join(root, name)
	f, err := os.ReadFile(path)
	if err != nil {
		tools.Exit("failed to read ua file ", path)
	}
	err = yaml.Unmarshal(f, out)
	if err != nil {
		tools.Exit("failed to  decode ", path, err.Error())
	}
}
