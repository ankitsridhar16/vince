package main

import (
	"bytes"
	"fmt"
	"go/format"
	"sort"
	"strings"

	"github.com/gernest/vince/tools"
	"github.com/gernest/vince/ua"
)

func main() {
	println("### Generating regex for ua devices ###")
	make()
}

func make() {
	var b bytes.Buffer

	fmt.Fprintln(&b, "// DO NOT EDIT Code generated by ua/device/make_device.go")
	fmt.Fprintln(&b, " package ua")

	genCamera(&b)
	genCar(&b)
	genConsole(&b)
	genTV(&b)
	genMobile(&b)
	genNotebook(&b)
	genPortableMediaPlayer(&b)
	genShell(&b)
	r, err := format.Source(b.Bytes())
	if err != nil {
		tools.Exit("failed to format go source ", err.Error())
	}
	tools.WriteFile("ua_device.go", r)
}

type Model struct {
	Regex  string `yaml:"regex" json:"regex"`
	Model  string `yaml:"model" json:"model"`
	Device string `yaml:"device" json:"device"` //mobile
	Brand  string `yaml:"brand" json:"brand"`   //mobile
}

type DeviceReg struct {
	Regex        string   `yaml:"regex" json:"regex"`
	Model        string   `yaml:"model" json:"model"`
	Device       string   `yaml:"device" json:"device"`
	Manufacturer string   `yaml:"-" json:"-"`
	Models       []*Model `yaml:"models" json:"models"`
}

type DeviceRegSlice []*DeviceReg

func (x DeviceRegSlice) Len() int           { return len(x) }
func (x DeviceRegSlice) Less(i, j int) bool { return x[i].Manufacturer < x[j].Manufacturer }
func (x DeviceRegSlice) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }

func genCamera(b *bytes.Buffer) {
	fmt.Fprintln(b)
	generic(b, "Camera", "device/cameras.yml")
}

func genCar(b *bytes.Buffer) {
	fmt.Fprintln(b)
	generic(b, "Car", "device/car_browsers.yml")
}

func genConsole(b *bytes.Buffer) {
	fmt.Fprintln(b)
	generic(b, "Console", "device/consoles.yml")
}

func genTV(b *bytes.Buffer) {
	fmt.Fprintln(b)
	fmt.Fprintf(b, " var deviceIsTVRe= MustCompile(`%s`)\n", ua.Clean(`HbbTV/([1-9]{1}(?:.[0-9]{1}){1,2})`))
	generic(b, "TV", "device/televisions.yml")
}

func genMobile(b *bytes.Buffer) {
	fmt.Fprintln(b)
	generic(b, "Mobile", "device/mobiles.yml")
}

func genNotebook(b *bytes.Buffer) {
	fmt.Fprintln(b)
	generic(b, "Notebook", "device/notebooks.yml")
}
func genPortableMediaPlayer(b *bytes.Buffer) {
	fmt.Fprintln(b)
	generic(b, "PortableMediaPlayer", "device/portable_media_player.yml")
}

func genShell(b *bytes.Buffer) {
	fmt.Fprintln(b)
	fmt.Fprintf(b, " var deviceIsShellTV= MustCompile(`%s`)\n", ua.Clean(`[a-z]+[ _]Shell[ _]\w{6}`))
	generic(b, "Shell", "device/shell_tv.yml")
}
func generic(b *bytes.Buffer, name string, path string) {
	items := loadDevice(path)
	var s strings.Builder
	for i, d := range items {
		if i != 0 {
			s.WriteByte('|')
		}
		s.WriteString(d.Regex)
	}
	var buf bytes.Buffer

	if ua.IsStdRe(s.String()) {
		fmt.Fprintf(b, " var device%sAllRe= MatchRe(`%s`)\n", name, ua.Clean(s.String()))
	} else {
		fmt.Fprintf(b, " var device%sAllRe= MatchRe2(`%s`)\n", name, ua.Clean(s.String()))
	}
	fmt.Fprintf(b, "var device%sAll=[]*deviceRe{\n", name)
	for _, d := range items {
		buf.Reset()
		r := ua.Clean(d.Regex)
		if ua.IsStdRe(d.Regex) {
			fmt.Fprintf(&buf, "re:MatchRe(`%s`)", r)
		} else {
			fmt.Fprintf(&buf, "re: MatchRe2(`%s`)", r)
		}
		fmt.Fprintf(b, "{%s,company:%q,device:%q, ", &buf, d.Manufacturer, d.Device)
		if d.Model != "" {
			fmt.Fprintf(b, "model:%q},\n", d.Model)
		} else {
			if len(d.Models) > 0 {
				fmt.Fprintf(b, "models:[]*deviceModel{")
				for _, m := range d.Models {

					fmt.Fprintf(b, "{model:%q,", m.Model)
					buf.Reset()
					r = ua.Clean(m.Regex)
					if ua.IsStdRe(m.Regex) {
						fmt.Fprintf(&buf, "re:MatchRe(`%s`)", r)
					} else {
						fmt.Fprintf(&buf, "re: MatchRe2(`%s`)", r)
					}
					fmt.Fprintf(b, "%s},\n", &buf)
				}
				fmt.Fprintf(b, "},")
			}
			fmt.Fprintf(b, "},\n")
		}

	}
	fmt.Fprintln(b, "}")
}

func loadDevice(path string) []*DeviceReg {
	var v map[string]*DeviceReg
	tools.ReadUA(path, &v)

	var items []*DeviceReg
	for key, value := range v {
		value.Manufacturer = key
		items = append(items, value)
	}
	sort.Sort(DeviceRegSlice(items))
	return items
}
